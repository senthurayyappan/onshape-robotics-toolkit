{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#onshape-robotics-toolkit","title":"onshape-robotics-toolkit","text":"<p><code>onshape-robotics-toolkit</code> is a feature-rich Python library that significantly extends the capabilities of Onshape's web-based CAD platform. The library provides a comprehensive API for automating robot design tasks, including solid model manipulation, robot assembly management, graph-based visualizations, and exporting CAD assemblies to URDF files for simulation and control. Intended as a resource for the robotics community, this library leverages Onshape's REST API to facilitate advanced workflows that bridge CAD design and robotics applications.</p> <p></p> <p>\u00a0 This library was inspired by onshape-to-robot, a tool renowned for its streamlined approach to URDF generation. While onshape-to-robot library focuses on predefined workflows and design-time considerations, the <code>onshape-robotics-toolkit</code> library offers greater flexibility. It provides access to nearly all of Onshape's REST API calls, enabling headless manipulation, detailed analysis, and seamless export of CAD assemblies. Users can programmatically edit variable studios, generate graph-based visualizations, and export URDF files tailored to their specific needs\u2014all without being restricted by rigid workflows or naming conventions. By removing these constraints, the <code>onshape-robotics-toolkit</code> library empowers the robotics and CAD communities to create custom solutions for algorithmic design, optimization, and automation.</p> <p> </p>"},{"location":"#key-features-of-onshape-robotics-toolkit","title":"Key Features of <code>onshape-robotics-toolkit</code>","text":"<p>The <code>onshape-robotics-toolkit</code> library is designed for users seeking a scalable, versatile API that empowers innovative robot design and control workflows. By integrating Onshape into algorithmic processes such as design optimization and automation, it unlocks the full potential of Onshape's cloud-based CAD system, fostering creativity and efficiency in robotics and beyond.</p> <p> </p> Feature <code>onshape-robotics-toolkit</code> <code>onshape-to-robot</code> Workflow Flexibility \u2705 Open-ended and customizable \u274c Predefined and rigid Design-Time Considerations \u2705 None \u274c Requires specific naming conventions Custom URDF Workflow \u2705 Supports any assembly \u274c Limited by design rules Variable Studio Editing \u2705 Yes \u274c No Ease of Setup \u274c Moderate (requires python coding) \u2705 Easy (no coding required) Headless Integration \u2705 Yes (e.g., optimization) \u274c No out-of-the-box support Access to Full Onshape API \u2705 Yes \u274c Limited Graph Visualization and Analysis \u2705 Supports graph generation \u274c Not supported"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Python 3.10 or higher installed on your machine.</li> <li>An Onshape account if you don't already have one.</li> <li>Onshape API keys (access key and secret key)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>onshape-robotics-toolkit</code> using <code>pip</code>, which is the easiest way to install it and is the recommended method for most users.</p> <pre><code>pip install onshape-robotics-toolkit\n</code></pre> <p>If you want to install from source, you'll need to install <code>poetry</code> and <code>git</code> first. Then, you can clone the repository and install the package.</p> <pre><code>git clone #\ncd onshape-robotics-toolkit\npoetry install\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>If you're interested in contributing to the project, please read the contributing guidelines to get started. All contributions are welcome!</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache 2.0 License. For more information, please refer to the license file.</p>"},{"location":"#references","title":"References","text":"<ul> <li>Onshape API Documentation</li> <li>Onshape API Glassworks Explorer</li> <li>Onshape to Robot URDF Exporter</li> </ul>"},{"location":"contributing/","title":"Contributing to <code>onshape-robotics-toolkit</code>","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps :)</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs here</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p><code>onshape-robotics-toolkit</code> could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue here.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>onshape-robotics-toolkit</code> for local development. Please note this documentation assumes you already have <code>poetry</code> and <code>Git</code> installed and ready to go.</p> <p>Fork the <code>onshape-robotics-toolkit</code> repo on GitHub.</p> <p>Clone your fork locally:</p> <pre><code>cd &lt;directory_in_which_repo_should_be_created&gt;\ngit clone git@github.com:YOUR_NAME/onshape-robotics-toolkit.git\n</code></pre> <p>Now we need to install the environment. Navigate into the directory</p> <pre><code>cd onshape-robotics-toolkit\n</code></pre> <p>Then, install and activate the environment with:</p> <pre><code>poetry install\npoetry shell\n</code></pre> <p>Please ensure that poetry is installed on your system. If not, you can install it by following the instructions here.</p> <p>Install pre-commit to run linters/formatters at commit time:</p> <pre><code>poetry run pre-commit install\n</code></pre> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <p>Don't forget to add test cases for your added functionality to the tests directory.</p> <p>When you're done making changes, check that your changes pass the formatting tests.</p> <pre><code>make check\n</code></pre> <p>Now, validate that all unit tests are passing:</p> <pre><code>make test\n</code></pre> <p>Before raising a pull request you should also run tox. This will run the tests across different versions of Python:</p> <pre><code>tox\n</code></pre> <p>This requires you to have multiple versions of python installed. This step is also triggered in the CI/CD pipeline, so you could also choose to skip this step locally.</p> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <p>Submit a pull request through the GitHub website.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li> <p>The pull request should include tests.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</p> </li> </ol>"},{"location":"developing/","title":"Sequence Diagram","text":"<pre>\n    sequenceDiagram\n        participant User as User\n        participant Client as onshape-robotics-toolkit.client\n        participant Onshape as Onshape Server\n        participant Robot as onshape-robotics-toolkit.robot\n\n        User-&gt;&gt;Client: Initialize Client with API Keys\n        Client-&gt;&gt;Onshape: Authenticate with Access Key &amp; Secret Key\n        Onshape--&gt;&gt;Client: Return Authentication Token\n\n        User-&gt;&gt;Client: Request Document Information (e.g., document URL)\n        Client-&gt;&gt;Onshape: Send GET request for Document Details\n        Onshape--&gt;&gt;Client: Return Document Metadata (JSON)\n        Client--&gt;&gt;User: Deliver Document Metadata\n\n        User-&gt;&gt;Client: Request CAD Assembly\n        Client-&gt;&gt;Onshape: Send GET request for Assembly Details\n        Onshape--&gt;&gt;Client: Return Assembly Data (JSON)\n        Client--&gt;&gt;User: Deliver Assembly Data\n\n        User-&gt;&gt;Robot: Initiate URDF Export Workflow\n        Robot--&gt;&gt;Onshape: Parse Assembly Data for URDF\n        Robot--&gt;&gt;User: Deliver Robot model (URDF)\n\n        User-&gt;&gt;User: Use URDF for Simulation or Control"},{"location":"getting-started/","title":"Getting Started with <code>onshape-robotics-toolkit</code>","text":"<p>Welcome to the <code>onshape-robotics-toolkit</code> library! This guide will help you set up and start using the library to interact with Onshape's powerful REST API.</p> <p>The Onshape API allows developers to access, manipulate, and extend Onshape's CAD platform programmatically. The API communicates via HTTP requests, returning data in JSON format.</p>"},{"location":"getting-started/#how-onshape-api-works","title":"How Onshape API Works","text":"<p>The Onshape API supports the following HTTP methods:</p> <ul> <li>GET: Retrieve information (e.g., document details, element properties).</li> <li>POST: Create or update resources (e.g., add features, update parts).</li> <li>DELETE: Remove resources (e.g., delete configurations).</li> </ul> <p>Each API request typically consists of:</p> <ol> <li>Method: Defines the action (e.g., GET, POST, DELETE).</li> <li>URL: Specifies the endpoint and target resource.</li> <li>Query Parameters: Optional key-value pairs to refine the request.</li> <li>Headers: Metadata such as content type and authorization tokens.</li> <li>Payload Body: Data sent with POST requests.</li> </ol>"},{"location":"getting-started/#understanding-api-urls","title":"Understanding API URLs","text":"<p>An Onshape API URL is structured to identify specific documents, workspaces, and elements:</p> <p>Example URL:</p> <pre><code>https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22\n</code></pre> <p>Breakdown:</p> <ul> <li>Base URL: <code>https://cad.onshape.com/api</code> \u2013 The entry point for API requests.</li> <li>Document ID: <code>e60c4803eaf2ac8be492c18e</code> \u2013 The unique identifier for the document.</li> <li>Workspace ID: <code>d2558da712764516cc9fec62</code> \u2013 The active workspace within the document.</li> <li>Element ID: <code>6bed6b43463f6a46a37b4a22</code> \u2013 A specific element in the workspace (e.g., a part studio or assembly).</li> </ul>"},{"location":"getting-started/#authentication-secure-your-api-calls","title":"Authentication: Secure Your API Calls","text":"<p>Access to the Onshape API requires authentication using API keys. Follow these steps to set up authentication for your project:</p>"},{"location":"getting-started/#obtain-api-keys","title":"Obtain API Keys","text":"<ol> <li>Log in to your Onshape account and navigate to the Developer Portal.</li> <li>Generate your Access Key and Secret Key.</li> </ol>"},{"location":"getting-started/#configure-the-library","title":"Configure the Library","text":"<p>Create a <code>.env</code> file in the root directory of your project to securely store your API keys:</p> <pre><code>ACCESS_KEY = &lt;your_access_key&gt;\nSECRET_KEY = &lt;your_secret_key&gt;\n</code></pre> <p>The <code>onshape-robotics-toolkit</code> library will automatically read these keys to authenticate your requests.</p>"},{"location":"getting-started/#install-the-library","title":"Install the Library","text":"<p>Install the <code>onshape-robotics-toolkit</code> library via pip:</p> <pre><code>pip install onshape-robotics-toolkit\n</code></pre>"},{"location":"getting-started/#first-api-call-example-usage","title":"First API Call: Example Usage","text":"<p>Here's an example of making a simple GET request to list documents using the <code>onshape-robotics-toolkit</code> library:</p> <pre><code>from onshape_robotics_toolkit.connect import Client\nfrom onshape_robotics_toolkit.models.document import Document\n\n# Initialize the client\nclient = osa.Client(\n    env=\"./.env\"\n)\n\n# Create a Document object from a URL\ndoc = Document.from_url(\n    url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n)\n\n# Retrieve the assembly and its JSON representation\nassembly = client.get_assembly(\n    did=doc.did,\n    wtype=doc.wtype,\n    wid=doc.wid,\n    eid=doc.eid\n)\n\n# Print the assembly details\nprint(assembly)\n</code></pre>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<ul> <li>Check out more examples and tutorials in the <code>onshape-robotics-toolkit</code> GitHub repository.</li> <li>Explore the Onshape API Documentation for detailed API reference.</li> </ul>"},{"location":"api/assembly/","title":"Assembly","text":"<p>This module defines data models for Assembly entities retrieved from Onshape REST API responses.</p> <p>The data models are implemented as Pydantic BaseModel classes, which are used to</p> <pre><code>1. Parse JSON responses from the API into Python objects.\n2. Validate the structure and types of the JSON responses.\n3. Provide type hints for better code clarity and autocompletion.\n</code></pre> <p>These models ensure that the data received from the API adheres to the expected format and types, facilitating easier and safer manipulation of the data within the application.</p> Models <ul> <li>Occurrence: Represents an occurrence of a part or sub-assembly within an assembly.</li> <li>Part: Represents a part within an assembly, including its properties and configuration.</li> <li>PartInstance: Represents an instance of a part within an assembly.</li> <li>AssemblyInstance: Represents an instance of an assembly within another assembly.</li> <li>AssemblyFeature: Represents a feature within an assembly, such as a mate or pattern.</li> <li>Pattern: Represents a pattern feature within an assembly, defining repeated instances of   parts or sub-assemblies.</li> <li>SubAssembly: Represents a sub-assembly within a larger assembly.</li> <li>RootAssembly: Represents the root assembly, which is the top-level assembly containing all parts   and sub-assemblies.</li> <li>Assembly: Represents the overall assembly, including all parts, sub-assemblies, and features.</li> </ul> Supplementary models <ul> <li>IDBase: Base model providing common attributes for Part, SubAssembly, and AssemblyInstance models.</li> <li>MatedCS: Represents a coordinate system used for mating parts within an assembly.</li> <li>MatedEntity: Represents an entity that is mated within an assembly, including its coordinate system.</li> <li>MateRelationMate: Represents a mate relation within an assembly, defining how parts or sub-assemblies   are connected.</li> <li>MateGroupFeatureOccurrence: Represents an occurrence of a mate group feature within an assembly.</li> <li>MateGroupFeatureData: Represents data for a mate group feature within an assembly.</li> <li>MateConnectorFeatureData: Represents data for a mate connector feature within an assembly.</li> <li>MateRelationFeatureData: Represents data for a mate relation feature within an assembly.</li> <li>MateFeatureData: Represents data for a mate feature within an assembly.</li> </ul> Enum <ul> <li>InstanceType: Enumerates the types of instances in an assembly, e.g. PART, ASSEMBLY.</li> <li>MateType: Enumerates the type of mate between two parts or assemblies, e.g. SLIDER,   CYLINDRICAL, REVOLUTE, etc.</li> <li>RelationType: Enumerates the type of mate relation between two parts or assemblies, e.g. LINEAR,   GEAR, SCREW, etc.</li> <li>AssemblyFeatureType: Enumerates the type of assembly feature, e.g. mate, mateRelation,   mateGroup, mateConnector</li> </ul>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Assembly","title":"<code>Assembly</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the overall assembly, including all parts, sub-assemblies, and features.</p> JSON <pre><code>    {\n        \"rootAssembly\": {\n            \"instances\": [],\n            \"patterns\": [],\n            \"features\": [],\n            \"occurrences\": [],\n            \"fullConfiguration\": \"default\",\n            \"configuration\": \"default\",\n            \"documentId\": \"a1c1addf75444f54b504f25c\",\n            \"elementId\": \"0b0c209535554345432581fe\",\n            \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n        },\n        \"subAssemblies\": [],\n        \"parts\": [],\n        \"partStudioFeatures\": []\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>rootAssembly</code> <code>RootAssembly</code> <p>The root assembly in the document.</p> <code>subAssemblies</code> <code>list[SubAssembly]</code> <p>A list of sub-assemblies in the document.</p> <code>parts</code> <code>list[Part]</code> <p>A list of parts in the document.</p> <code>partStudioFeatures</code> <code>list[dict]</code> <p>A list of part studio features in the document.</p> Custom Attributes <p>document (Union[Document, None]): The document object associated with the assembly. Defaults to None. name (Union[str, None]): The name of the assembly. Defaults to None.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Assembly(\n...     rootAssembly=RootAssembly(\n...         instances=[...],\n...         patterns=[...],\n...         features=[...],\n...         occurrences=[...],\n...         fullConfiguration=\"default\",\n...         configuration=\"default\",\n...         documentId=\"a1c1addf75444f54b504f25c\",\n...         elementId=\"0b0c209535554345432581fe\",\n...         documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n...     ),\n...     subAssemblies=[...],\n...     parts=[...],\n...     partStudioFeatures=[...],\n... )\nAssembly(\n    rootAssembly=RootAssembly(\n        instances=[...],\n        patterns=[...],\n        features=[...],\n        occurrences=[...],\n        fullConfiguration=\"default\",\n        configuration=\"default\",\n        documentId=\"a1c1addf75444f54b504f25c\",\n        elementId=\"0b0c209535554345432581fe\",\n        documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n    ),\n    subAssemblies=[...],\n    parts=[...],\n    partStudioFeatures=[...],\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class Assembly(BaseModel):\n    \"\"\"\n    Represents the overall assembly, including all parts, sub-assemblies, and features.\n\n    JSON:\n        ```json\n            {\n                \"rootAssembly\": {\n                    \"instances\": [],\n                    \"patterns\": [],\n                    \"features\": [],\n                    \"occurrences\": [],\n                    \"fullConfiguration\": \"default\",\n                    \"configuration\": \"default\",\n                    \"documentId\": \"a1c1addf75444f54b504f25c\",\n                    \"elementId\": \"0b0c209535554345432581fe\",\n                    \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n                },\n                \"subAssemblies\": [],\n                \"parts\": [],\n                \"partStudioFeatures\": []\n            }\n        ```\n\n    Attributes:\n        rootAssembly (RootAssembly): The root assembly in the document.\n        subAssemblies (list[SubAssembly]): A list of sub-assemblies in the document.\n        parts (list[Part]): A list of parts in the document.\n        partStudioFeatures (list[dict]): A list of part studio features in the document.\n\n    Custom Attributes:\n        document (Union[Document, None]): The document object associated with the assembly. Defaults to None.\n        name (Union[str, None]): The name of the assembly. Defaults to None.\n\n\n    Examples:\n        &gt;&gt;&gt; Assembly(\n        ...     rootAssembly=RootAssembly(\n        ...         instances=[...],\n        ...         patterns=[...],\n        ...         features=[...],\n        ...         occurrences=[...],\n        ...         fullConfiguration=\"default\",\n        ...         configuration=\"default\",\n        ...         documentId=\"a1c1addf75444f54b504f25c\",\n        ...         elementId=\"0b0c209535554345432581fe\",\n        ...         documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n        ...     ),\n        ...     subAssemblies=[...],\n        ...     parts=[...],\n        ...     partStudioFeatures=[...],\n        ... )\n        Assembly(\n            rootAssembly=RootAssembly(\n                instances=[...],\n                patterns=[...],\n                features=[...],\n                occurrences=[...],\n                fullConfiguration=\"default\",\n                configuration=\"default\",\n                documentId=\"a1c1addf75444f54b504f25c\",\n                elementId=\"0b0c209535554345432581fe\",\n                documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n            ),\n            subAssemblies=[...],\n            parts=[...],\n            partStudioFeatures=[...],\n        )\n    \"\"\"\n\n    rootAssembly: RootAssembly = Field(..., description=\"The root assembly in the document.\")\n    subAssemblies: list[SubAssembly] = Field(..., description=\"A list of sub-assemblies in the document.\")\n    parts: list[Part] = Field(..., description=\"A list of parts in the document.\")\n    partStudioFeatures: list[dict] = Field(..., description=\"A list of part studio features in the document.\")\n\n    document: Union[Document, None] = Field(None, description=\"The document associated with the assembly.\")\n    name: Union[str, None] = Field(None, description=\"The name of the assembly.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.AssemblyFeature","title":"<code>AssemblyFeature</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a feature within an assembly, such as a mate or pattern.</p> JSON <pre><code>    {\n    \"id\": \"Mw+URe/Uaxx5gIdlu\",\n    \"suppressed\": false,\n    \"featureType\": \"mate\",\n    \"featureData\": {\n        \"matedEntities\" :\n        [\n            {\n                \"matedOccurrence\" : [ \"MDUJyqGNo7JJll+/h\" ],\n                \"matedCS\" :\n                {\n                    \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                    \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n                    \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                    \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                }\n            }, {\n                \"matedOccurrence\" : [ \"MwoBIsds8rn1/0QXA\" ],\n                \"matedCS\" :\n                {\n                    \"xAxis\" : [ 0.8660254037844387, 0.0, -0.49999999999999994 ],\n                    \"yAxis\" : [ -0.49999999999999994, 0.0, -0.8660254037844387 ],\n                    \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                    \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                }\n            }\n        ],\n        \"mateType\" : \"FASTENED\",\n        \"name\" : \"Fastened 1\"\n        }\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The unique identifier of the feature.</p> <code>suppressed</code> <code>bool</code> <p>Indicates if the feature is suppressed.</p> <code>featureType</code> <code>AssemblyFeatureType</code> <p>The type of the feature.</p> <code>featureData</code> <code>Union[MateGroupFeatureData, MateConnectorFeatureData, MateRelationFeatureData, MateFeatureData]</code> <p>Data associated with the assembly feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssemblyFeature(\n...     id=\"Mw+URe/Uaxx5gIdlu\",\n...     suppressed=False,\n...     featureType=AssemblyFeatureType.MATE,\n...     featureData=MateFeatureData(\n...         matedEntities=[...],\n...         mateType=MateType.FASTENED,\n...         name=\"Fastened 1\",\n...     ),\n... )\nAssemblyFeature(\n    id=\"Mw+URe/Uaxx5gIdlu\",\n    suppressed=False,\n    featureType=AssemblyFeatureType.MATE,\n    featureData=MateFeatureData(\n        matedEntities=[...],\n        mateType=MateType.FASTENED,\n        name=\"Fastened 1\"\n    )\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class AssemblyFeature(BaseModel):\n    \"\"\"\n    Represents a feature within an assembly, such as a mate or pattern.\n\n    JSON:\n        ```json\n            {\n            \"id\": \"Mw+URe/Uaxx5gIdlu\",\n            \"suppressed\": false,\n            \"featureType\": \"mate\",\n            \"featureData\": {\n                \"matedEntities\" :\n                [\n                    {\n                        \"matedOccurrence\" : [ \"MDUJyqGNo7JJll+/h\" ],\n                        \"matedCS\" :\n                        {\n                            \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                            \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n                            \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                            \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                        }\n                    }, {\n                        \"matedOccurrence\" : [ \"MwoBIsds8rn1/0QXA\" ],\n                        \"matedCS\" :\n                        {\n                            \"xAxis\" : [ 0.8660254037844387, 0.0, -0.49999999999999994 ],\n                            \"yAxis\" : [ -0.49999999999999994, 0.0, -0.8660254037844387 ],\n                            \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                            \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                        }\n                    }\n                ],\n                \"mateType\" : \"FASTENED\",\n                \"name\" : \"Fastened 1\"\n                }\n            }\n        ```\n\n    Attributes:\n        id (str): The unique identifier of the feature.\n        suppressed (bool): Indicates if the feature is suppressed.\n        featureType (AssemblyFeatureType): The type of the feature.\n        featureData (Union[MateGroupFeatureData, MateConnectorFeatureData, MateRelationFeatureData, MateFeatureData]):\n            Data associated with the assembly feature.\n\n    Examples:\n        &gt;&gt;&gt; AssemblyFeature(\n        ...     id=\"Mw+URe/Uaxx5gIdlu\",\n        ...     suppressed=False,\n        ...     featureType=AssemblyFeatureType.MATE,\n        ...     featureData=MateFeatureData(\n        ...         matedEntities=[...],\n        ...         mateType=MateType.FASTENED,\n        ...         name=\"Fastened 1\",\n        ...     ),\n        ... )\n        AssemblyFeature(\n            id=\"Mw+URe/Uaxx5gIdlu\",\n            suppressed=False,\n            featureType=AssemblyFeatureType.MATE,\n            featureData=MateFeatureData(\n                matedEntities=[...],\n                mateType=MateType.FASTENED,\n                name=\"Fastened 1\"\n            )\n        )\n    \"\"\"\n\n    id: str = Field(..., description=\"The unique identifier of the feature.\")\n    suppressed: bool = Field(..., description=\"Indicates if the feature is suppressed.\")\n    featureType: AssemblyFeatureType = Field(..., description=\"The type of the feature.\")\n    featureData: Union[MateGroupFeatureData, MateConnectorFeatureData, MateRelationFeatureData, MateFeatureData] = (\n        Field(..., description=\"Data associated with the assembly feature.\")\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.AssemblyFeatureType","title":"<code>AssemblyFeatureType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the type of assembly feature, e.g. mate, mateRelation, mateGroup, mateConnector</p> <p>Attributes:</p> Name Type Description <code>MATE</code> <code>str</code> <p>Represents a mate feature.</p> <code>MATERELATION</code> <code>str</code> <p>Represents a mate relation feature.</p> <code>MATEGROUP</code> <code>str</code> <p>Represents a mate group feature.</p> <code>MATECONNECTOR</code> <code>str</code> <p>Represents a mate connector feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssemblyFeatureType.MATE\n'mate'\n&gt;&gt;&gt; AssemblyFeatureType.MATERELATION\n'mateRelation'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class AssemblyFeatureType(str, Enum):\n    \"\"\"\n    Enumerates the type of assembly feature, e.g. mate, mateRelation, mateGroup, mateConnector\n\n    Attributes:\n        MATE (str): Represents a mate feature.\n        MATERELATION (str): Represents a mate relation feature.\n        MATEGROUP (str): Represents a mate group feature.\n        MATECONNECTOR (str): Represents a mate connector feature.\n\n    Examples:\n        &gt;&gt;&gt; AssemblyFeatureType.MATE\n        'mate'\n        &gt;&gt;&gt; AssemblyFeatureType.MATERELATION\n        'mateRelation'\n    \"\"\"\n\n    MATE = \"mate\"\n    MATERELATION = \"mateRelation\"\n    MATEGROUP = \"mateGroup\"\n    MATECONNECTOR = \"mateConnector\"\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.AssemblyInstance","title":"<code>AssemblyInstance</code>","text":"<p>               Bases: <code>IDBase</code></p> <p>Represents an instance of an assembly within another assembly.</p> JSON <pre><code>    {\n        \"id\": \"Mon18P7LPP8A9STk+\",\n        \"type\": \"Assembly\",\n        \"name\": \"subAssembly\",\n        \"suppressed\": false,\n        \"fullConfiguration\": \"default\",\n        \"configuration\": \"default\",\n        \"documentId\": \"a1c1addf75444f54b504f25c\",\n        \"elementId\": \"f0b3a4afab120f778a4037df\",\n        \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The unique identifier for the assembly instance.</p> <code>type</code> <code>InstanceType</code> <p>The type of the instance, must be 'Assembly'.</p> <code>name</code> <code>str</code> <p>The name of the assembly instance.</p> <code>suppressed</code> <code>bool</code> <p>Indicates if the assembly instance is suppressed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssemblyInstance(\n...     id=\"Mon18P7LPP8A9STk+\",\n...     type=InstanceType.ASSEMBLY,\n...     name=\"subAssembly\",\n...     suppressed=False,\n... )\nAssemblyInstance(\n    id=\"Mon18P7LPP8A9STk+\",\n    type=InstanceType.ASSEMBLY,\n    name=\"subAssembly\",\n    suppressed=False,\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class AssemblyInstance(IDBase):\n    \"\"\"\n    Represents an instance of an assembly within another assembly.\n\n    JSON:\n        ```json\n            {\n                \"id\": \"Mon18P7LPP8A9STk+\",\n                \"type\": \"Assembly\",\n                \"name\": \"subAssembly\",\n                \"suppressed\": false,\n                \"fullConfiguration\": \"default\",\n                \"configuration\": \"default\",\n                \"documentId\": \"a1c1addf75444f54b504f25c\",\n                \"elementId\": \"f0b3a4afab120f778a4037df\",\n                \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n            }\n        ```\n\n    Attributes:\n        id (str): The unique identifier for the assembly instance.\n        type (InstanceType): The type of the instance, must be 'Assembly'.\n        name (str): The name of the assembly instance.\n        suppressed (bool): Indicates if the assembly instance is suppressed.\n\n    Examples:\n        &gt;&gt;&gt; AssemblyInstance(\n        ...     id=\"Mon18P7LPP8A9STk+\",\n        ...     type=InstanceType.ASSEMBLY,\n        ...     name=\"subAssembly\",\n        ...     suppressed=False,\n        ... )\n        AssemblyInstance(\n            id=\"Mon18P7LPP8A9STk+\",\n            type=InstanceType.ASSEMBLY,\n            name=\"subAssembly\",\n            suppressed=False,\n        )\n    \"\"\"\n\n    id: str = Field(..., description=\"The unique identifier for the assembly instance.\")\n    type: InstanceType = Field(..., description=\"The type of the instance, must be 'Assembly'.\")\n    name: str = Field(..., description=\"The name of the assembly instance.\")\n    suppressed: bool = Field(..., description=\"Indicates if the assembly instance is suppressed.\")\n\n    isRigid: bool = Field(\n        False,\n        description=\"Indicates if the assembly instance is a rigid assembly, i.e., \\\n        a sub-assembly with no degrees of freedom.\",\n    )\n\n    @field_validator(\"type\")\n    def check_type(cls, v: InstanceType) -&gt; InstanceType:\n        \"\"\"\n        Validates that the type is 'Assembly'.\n\n        Args:\n            v (InstanceType): The type to validate.\n\n        Returns:\n            InstanceType: The validated type.\n        \"\"\"\n        if v != InstanceType.ASSEMBLY:\n            raise ValueError(\"Type must be Assembly\")\n\n        return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.AssemblyInstance.check_type","title":"<code>check_type(v)</code>","text":"<p>Validates that the type is 'Assembly'.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>InstanceType</code> <p>The type to validate.</p> required <p>Returns:</p> Name Type Description <code>InstanceType</code> <code>InstanceType</code> <p>The validated type.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@field_validator(\"type\")\ndef check_type(cls, v: InstanceType) -&gt; InstanceType:\n    \"\"\"\n    Validates that the type is 'Assembly'.\n\n    Args:\n        v (InstanceType): The type to validate.\n\n    Returns:\n        InstanceType: The validated type.\n    \"\"\"\n    if v != InstanceType.ASSEMBLY:\n        raise ValueError(\"Type must be Assembly\")\n\n    return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.IDBase","title":"<code>IDBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model providing common attributes for Part, SubAssembly, and AssemblyInstance models.</p> JSON <pre><code>    {\n        \"fullConfiguration\" : \"default\",\n        \"configuration\" : \"default\",\n        \"documentId\" : \"a1c1addf75444f54b504f25c\",\n        \"elementId\" : \"0b0c209535554345432581fe\",\n        \"documentMicroversion\" : \"12fabf866bef5a9114d8c4d2\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>fullConfiguration</code> <code>str</code> <p>The full configuration of the entity.</p> <code>configuration</code> <code>str</code> <p>The configuration of the entity.</p> <code>documentId</code> <code>str</code> <p>The unique identifier of the entity.</p> <code>elementId</code> <code>str</code> <p>The unique identifier of the entity.</p> <code>documentMicroversion</code> <code>str</code> <p>The microversion of the document.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class IDBase(BaseModel):\n    \"\"\"\n    Base model providing common attributes for Part, SubAssembly, and AssemblyInstance models.\n\n    JSON:\n        ```json\n            {\n                \"fullConfiguration\" : \"default\",\n                \"configuration\" : \"default\",\n                \"documentId\" : \"a1c1addf75444f54b504f25c\",\n                \"elementId\" : \"0b0c209535554345432581fe\",\n                \"documentMicroversion\" : \"12fabf866bef5a9114d8c4d2\"\n            }\n        ```\n\n    Attributes:\n        fullConfiguration (str): The full configuration of the entity.\n        configuration (str): The configuration of the entity.\n        documentId (str): The unique identifier of the entity.\n        elementId (str): The unique identifier of the entity.\n        documentMicroversion (str): The microversion of the document.\n    \"\"\"\n\n    fullConfiguration: str = Field(..., description=\"The full configuration of the entity.\")\n    configuration: str = Field(..., description=\"The configuration of the entity.\")\n    documentId: str = Field(..., description=\"The unique identifier of the entity.\")\n    elementId: str = Field(..., description=\"The unique identifier of the entity.\")\n    documentMicroversion: str = Field(..., description=\"The microversion of the document.\")\n\n    @field_validator(\"documentId\", \"elementId\", \"documentMicroversion\")\n    def check_ids(cls, v: str) -&gt; str:\n        \"\"\"\n        Validates that the ID fields have exactly 24 characters.\n\n        Args:\n            v (str): The ID field to validate.\n\n        Returns:\n            str: The validated ID field.\n\n        Raises:\n            ValueError: If the ID field does not contain exactly 24 characters.\n        \"\"\"\n        if len(v) != 24:\n            raise ValueError(\"DocumentId must have 24 characters\")\n\n        return v\n\n    @property\n    def uid(self) -&gt; str:\n        \"\"\"\n        Generates a unique identifier for the part.\n\n        Returns:\n            str: The unique identifier generated from documentId, documentMicroversion,\n                elementId, and fullConfiguration.\n        \"\"\"\n        return generate_uid([self.documentId, self.documentMicroversion, self.elementId, self.fullConfiguration])\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.IDBase.uid","title":"<code>uid: str</code>  <code>property</code>","text":"<p>Generates a unique identifier for the part.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique identifier generated from documentId, documentMicroversion, elementId, and fullConfiguration.</p>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.IDBase.check_ids","title":"<code>check_ids(v)</code>","text":"<p>Validates that the ID fields have exactly 24 characters.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>The ID field to validate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated ID field.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the ID field does not contain exactly 24 characters.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@field_validator(\"documentId\", \"elementId\", \"documentMicroversion\")\ndef check_ids(cls, v: str) -&gt; str:\n    \"\"\"\n    Validates that the ID fields have exactly 24 characters.\n\n    Args:\n        v (str): The ID field to validate.\n\n    Returns:\n        str: The validated ID field.\n\n    Raises:\n        ValueError: If the ID field does not contain exactly 24 characters.\n    \"\"\"\n    if len(v) != 24:\n        raise ValueError(\"DocumentId must have 24 characters\")\n\n    return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.InstanceType","title":"<code>InstanceType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the types of instances in an assembly, e.g. PART, ASSEMBLY.</p> <p>Attributes:</p> Name Type Description <code>PART</code> <code>str</code> <p>Represents a part instance.</p> <code>ASSEMBLY</code> <code>str</code> <p>Represents an assembly instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; InstanceType.PART\n'Part'\n&gt;&gt;&gt; InstanceType.ASSEMBLY\n'Assembly'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class InstanceType(str, Enum):\n    \"\"\"\n    Enumerates the types of instances in an assembly, e.g. PART, ASSEMBLY.\n\n    Attributes:\n        PART (str): Represents a part instance.\n        ASSEMBLY (str): Represents an assembly instance.\n\n    Examples:\n        &gt;&gt;&gt; InstanceType.PART\n        'Part'\n        &gt;&gt;&gt; InstanceType.ASSEMBLY\n        'Assembly'\n    \"\"\"\n\n    PART = \"Part\"\n    ASSEMBLY = \"Assembly\"\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateConnectorFeatureData","title":"<code>MateConnectorFeatureData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents data for a mate connector feature within an assembly.</p> JSON <pre><code>    {\n        \"mateConnectorCS\": {\n            \"xAxis\": [1.0, 0.0, 0.0],\n            \"yAxis\": [0.0, 0.0, -1.0],\n            \"zAxis\": [0.0, 1.0, 0.0],\n            \"origin\": [0.0, -0.0505, 0.0]\n        },\n        \"occurrence\": [\n            \"MplKLzV/4d+nqmD18\"\n        ],\n        \"name\": \"Mate connector 1\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>mateConnectorCS</code> <code>MatedCS</code> <p>The coordinate system used for the mate connector.</p> <code>occurrence</code> <code>list[str]</code> <p>A list of identifiers for the occurrences involved in the mate connector.</p> <code>name</code> <code>str</code> <p>The name of the mate connector feature.</p> Custom Attributes <p>id (str): The unique identifier of the feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateConnectorFeatureData(\n...     mateConnectorCS=MatedCS(\n...         xAxis=[1.0, 0.0, 0.0],\n...         yAxis=[0.0, 0.0, -1.0],\n...         zAxis=[0.0, 1.0, 0.0],\n...         origin=[0.0, -0.0505, 0.0],\n...     ),\n...     occurrence=[\"MplKLzV/4d+nqmD18\"],\n...     name=\"Mate connector 1\",\n... )\nMateConnectorFeatureData(\n    mateConnectorCS=MatedCS(\n        xAxis=[1.0, 0.0, 0.0],\n        yAxis=[0.0, 0.0, -1.0],\n        zAxis=[0.0, 1.0, 0.0],\n        origin=[0.0, -0.0505, 0.0]\n    ),\n    occurrence=[\"MplKLzV/4d+nqmD18\"],\n    name=\"Mate connector 1\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateConnectorFeatureData(BaseModel):\n    \"\"\"\n    Represents data for a mate connector feature within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"mateConnectorCS\": {\n                    \"xAxis\": [1.0, 0.0, 0.0],\n                    \"yAxis\": [0.0, 0.0, -1.0],\n                    \"zAxis\": [0.0, 1.0, 0.0],\n                    \"origin\": [0.0, -0.0505, 0.0]\n                },\n                \"occurrence\": [\n                    \"MplKLzV/4d+nqmD18\"\n                ],\n                \"name\": \"Mate connector 1\"\n            }\n        ```\n\n    Attributes:\n        mateConnectorCS (MatedCS): The coordinate system used for the mate connector.\n        occurrence (list[str]): A list of identifiers for the occurrences involved in the mate connector.\n        name (str): The name of the mate connector feature.\n\n    Custom Attributes:\n        id (str): The unique identifier of the feature.\n\n    Examples:\n        &gt;&gt;&gt; MateConnectorFeatureData(\n        ...     mateConnectorCS=MatedCS(\n        ...         xAxis=[1.0, 0.0, 0.0],\n        ...         yAxis=[0.0, 0.0, -1.0],\n        ...         zAxis=[0.0, 1.0, 0.0],\n        ...         origin=[0.0, -0.0505, 0.0],\n        ...     ),\n        ...     occurrence=[\"MplKLzV/4d+nqmD18\"],\n        ...     name=\"Mate connector 1\",\n        ... )\n        MateConnectorFeatureData(\n            mateConnectorCS=MatedCS(\n                xAxis=[1.0, 0.0, 0.0],\n                yAxis=[0.0, 0.0, -1.0],\n                zAxis=[0.0, 1.0, 0.0],\n                origin=[0.0, -0.0505, 0.0]\n            ),\n            occurrence=[\"MplKLzV/4d+nqmD18\"],\n            name=\"Mate connector 1\"\n        )\n    \"\"\"\n\n    mateConnectorCS: MatedCS = Field(..., description=\"The coordinate system used for the mate connector.\")\n    occurrence: list[str] = Field(\n        ..., description=\"A list of identifiers for the occurrences involved in the mate connector.\"\n    )\n    name: str = Field(..., description=\"The name of the mate connector feature.\")\n\n    id: str = Field(None, description=\"The unique identifier of the feature.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateFeatureData","title":"<code>MateFeatureData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents data for a mate feature within an assembly.</p> JSON <pre><code>    {\n        \"matedEntities\" :\n        [\n            {\n                \"matedOccurrence\" : [ \"MDUJyqGNo7JJll+/h\" ],\n                \"matedCS\" :\n                {\n                    \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                    \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n                    \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                    \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                }\n            }, {\n                \"matedOccurrence\" : [ \"MwoBIsds8rn1/0QXA\" ],\n                \"matedCS\" :\n                {\n                    \"xAxis\" : [ 0.8660254037844387, 0.0, -0.49999999999999994 ],\n                    \"yAxis\" : [ -0.49999999999999994, 0.0, -0.8660254037844387 ],\n                    \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                    \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                }\n            }\n        ],\n        \"mateType\" : \"FASTENED\",\n        \"name\" : \"Fastened 1\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>matedEntities</code> <code>list[MatedEntity]</code> <p>A list of mated entities.</p> <code>mateType</code> <code>MateType</code> <p>The type of mate.</p> <code>name</code> <code>str</code> <p>The name of the mate feature.</p> Custom Attributes <p>id (str): The unique identifier of the feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateFeatureData(\n...     matedEntities=[...],\n...     mateType=MateType.FASTENED,\n...     name=\"Fastened 1\",\n... )\nMateFeatureData(\n    matedEntities=[...],\n    mateType=MateType.FASTENED,\n    name=\"Fastened 1\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateFeatureData(BaseModel):\n    \"\"\"\n    Represents data for a mate feature within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"matedEntities\" :\n                [\n                    {\n                        \"matedOccurrence\" : [ \"MDUJyqGNo7JJll+/h\" ],\n                        \"matedCS\" :\n                        {\n                            \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                            \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n                            \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                            \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                        }\n                    }, {\n                        \"matedOccurrence\" : [ \"MwoBIsds8rn1/0QXA\" ],\n                        \"matedCS\" :\n                        {\n                            \"xAxis\" : [ 0.8660254037844387, 0.0, -0.49999999999999994 ],\n                            \"yAxis\" : [ -0.49999999999999994, 0.0, -0.8660254037844387 ],\n                            \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                            \"origin\" : [ 0.0, -0.0505, 0.0 ]\n                        }\n                    }\n                ],\n                \"mateType\" : \"FASTENED\",\n                \"name\" : \"Fastened 1\"\n            }\n        ```\n\n    Attributes:\n        matedEntities (list[MatedEntity]): A list of mated entities.\n        mateType (MateType): The type of mate.\n        name (str): The name of the mate feature.\n\n    Custom Attributes:\n        id (str): The unique identifier of the feature.\n\n    Examples:\n        &gt;&gt;&gt; MateFeatureData(\n        ...     matedEntities=[...],\n        ...     mateType=MateType.FASTENED,\n        ...     name=\"Fastened 1\",\n        ... )\n        MateFeatureData(\n            matedEntities=[...],\n            mateType=MateType.FASTENED,\n            name=\"Fastened 1\"\n        )\n\n    \"\"\"\n\n    class Config:\n        arbitrary_types_allowed = True\n\n    matedEntities: list[MatedEntity] = Field(..., description=\"A list of mated entities.\")\n    mateType: MateType = Field(..., description=\"The type of mate.\")\n    name: str = Field(..., description=\"The name of the mate feature.\")\n\n    id: str = Field(None, description=\"The unique identifier of the feature.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateGroupFeatureData","title":"<code>MateGroupFeatureData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents data for a mate group feature within an assembly.</p> JSON <pre><code>    {\n        \"occurrences\": [\n            {\n                \"occurrence\": [\"MplKLzV/4d+nqmD18\"]\n            }\n        ],\n        \"name\": \"Mate group 1\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>occurrences</code> <code>list[MateGroupFeatureOccurrence]</code> <p>A list of occurrences in the mate group feature.</p> <code>name</code> <code>str</code> <p>The name of the mate group feature.</p> Custom Attributes <p>id (str): The unique identifier of the feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateGroupFeatureData(\n...     occurrences=[\n...         MateGroupFeatureOccurrence(\n...             occurrence=[\"MplKLzV/4d+nqmD18\"],\n...         )\n...     ],\n...     name=\"Mate group 1\",\n... )\nMateGroupFeatureData(\n    occurrences=[\n        MateGroupFeatureOccurrence(\n            occurrence=[\"MplKLzV/4d+nqmD18\"]\n        )\n    ],\n    name=\"Mate group 1\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateGroupFeatureData(BaseModel):\n    \"\"\"\n    Represents data for a mate group feature within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"occurrences\": [\n                    {\n                        \"occurrence\": [\"MplKLzV/4d+nqmD18\"]\n                    }\n                ],\n                \"name\": \"Mate group 1\"\n            }\n        ```\n\n    Attributes:\n        occurrences (list[MateGroupFeatureOccurrence]): A list of occurrences in the mate group feature.\n        name (str): The name of the mate group feature.\n\n    Custom Attributes:\n        id (str): The unique identifier of the feature.\n\n    Examples:\n        &gt;&gt;&gt; MateGroupFeatureData(\n        ...     occurrences=[\n        ...         MateGroupFeatureOccurrence(\n        ...             occurrence=[\"MplKLzV/4d+nqmD18\"],\n        ...         )\n        ...     ],\n        ...     name=\"Mate group 1\",\n        ... )\n        MateGroupFeatureData(\n            occurrences=[\n                MateGroupFeatureOccurrence(\n                    occurrence=[\"MplKLzV/4d+nqmD18\"]\n                )\n            ],\n            name=\"Mate group 1\"\n        )\n    \"\"\"\n\n    occurrences: list[MateGroupFeatureOccurrence] = Field(\n        ..., description=\"A list of occurrences in the mate group feature.\"\n    )\n    name: str = Field(..., description=\"The name of the mate group feature.\")\n\n    id: str = Field(None, description=\"The unique identifier of the feature.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateGroupFeatureOccurrence","title":"<code>MateGroupFeatureOccurrence</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an occurrence of a mate group feature within an assembly.</p> JSON <pre><code>    {\n        \"occurrence\": [\"MplKLzV/4d+nqmD18\"]\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>occurrence</code> <code>list[str]</code> <p>A list of identifiers for the occurrences in the mate group feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateGroupFeatureOccurrence(\n...     occurrence=[\"MplKLzV/4d+nqmD18\"],\n... )\nMateGroupFeatureOccurrence(\n    occurrence=[\"MplKLzV/4d+nqmD18\"]\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateGroupFeatureOccurrence(BaseModel):\n    \"\"\"\n    Represents an occurrence of a mate group feature within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"occurrence\": [\"MplKLzV/4d+nqmD18\"]\n            }\n        ```\n\n    Attributes:\n        occurrence (list[str]): A list of identifiers for the occurrences in the mate group feature.\n\n    Examples:\n        &gt;&gt;&gt; MateGroupFeatureOccurrence(\n        ...     occurrence=[\"MplKLzV/4d+nqmD18\"],\n        ... )\n        MateGroupFeatureOccurrence(\n            occurrence=[\"MplKLzV/4d+nqmD18\"]\n        )\n    \"\"\"\n\n    occurrence: list[str] = Field(\n        ..., description=\"A list of identifiers for the occurrences in the mate group feature.\"\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateRelationFeatureData","title":"<code>MateRelationFeatureData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents data for a mate relation feature within an assembly.</p> JSON <pre><code>    {\n        \"relationType\": \"GEAR\",\n        \"mates\": [\n            {\n            \"featureId\": \"S4/TgCRmQt1nIHHp\",\n            \"occurrence\": []\n            },\n            {\n            \"featureId\": \"QwaoOeXYPifsN7CP\",\n            \"occurrence\": []\n            }\n        ],\n        \"reverseDirection\": false,\n        \"relationRatio\": 1,\n        \"name\": \"Gear 1\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>relationType</code> <code>RelationType</code> <p>The type of mate relation.</p> <code>mates</code> <code>list[MateRelationMate]</code> <p>A list of mate relations.</p> <code>reverseDirection</code> <code>bool</code> <p>Indicates if the direction of the mate relation is reversed.</p> <code>relationRatio</code> <code>Union[float, None]</code> <p>The ratio of the GEAR mate relation. Defaults to None.</p> <code>relationLength</code> <code>Union[float, None]</code> <p>The length of the RACK_AND_PINION mate relation. Defaults to None.</p> <code>name</code> <code>str</code> <p>The name of the mate relation feature.</p> Custom Attributes <p>id (str): The unique identifier of the feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateRelationFeatureData(\n...     relationType=RelationType.GEAR,\n...     mates=[...],\n...     reverseDirection=False,\n...     relationRatio=1,\n...     name=\"Gear 1\",\n... )\nMateRelationFeatureData(\n    relationType=RelationType.GEAR,\n    mates=[...],\n    reverseDirection=False,\n    relationRatio=1,\n    name=\"Gear 1\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateRelationFeatureData(BaseModel):\n    \"\"\"\n    Represents data for a mate relation feature within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"relationType\": \"GEAR\",\n                \"mates\": [\n                    {\n                    \"featureId\": \"S4/TgCRmQt1nIHHp\",\n                    \"occurrence\": []\n                    },\n                    {\n                    \"featureId\": \"QwaoOeXYPifsN7CP\",\n                    \"occurrence\": []\n                    }\n                ],\n                \"reverseDirection\": false,\n                \"relationRatio\": 1,\n                \"name\": \"Gear 1\"\n            }\n        ```\n\n    Attributes:\n        relationType (RelationType): The type of mate relation.\n        mates (list[MateRelationMate]): A list of mate relations.\n        reverseDirection (bool): Indicates if the direction of the mate relation is reversed.\n        relationRatio (Union[float, None]): The ratio of the GEAR mate relation. Defaults to None.\n        relationLength (Union[float, None]): The length of the RACK_AND_PINION mate relation. Defaults to None.\n        name (str): The name of the mate relation feature.\n\n    Custom Attributes:\n        id (str): The unique identifier of the feature.\n\n    Examples:\n        &gt;&gt;&gt; MateRelationFeatureData(\n        ...     relationType=RelationType.GEAR,\n        ...     mates=[...],\n        ...     reverseDirection=False,\n        ...     relationRatio=1,\n        ...     name=\"Gear 1\",\n        ... )\n        MateRelationFeatureData(\n            relationType=RelationType.GEAR,\n            mates=[...],\n            reverseDirection=False,\n            relationRatio=1,\n            name=\"Gear 1\"\n        )\n    \"\"\"\n\n    relationType: RelationType = Field(..., description=\"The type of mate relation.\")\n    mates: list[MateRelationMate] = Field(..., description=\"A list of mate relations.\")\n    reverseDirection: bool = Field(..., description=\"Indicates if the direction of the mate relation is reversed.\")\n    relationRatio: Union[float, None] = Field(\n        None, description=\"The ratio of the GEAR mate relation. Defaults to None.\"\n    )\n    relationLength: Union[float, None] = Field(\n        None, description=\"The length of the RACK_AND_PINION mate relation. Defaults to None.\"\n    )\n    name: str = Field(..., description=\"The name of the mate relation feature.\")\n\n    id: str = Field(None, description=\"The unique identifier of the feature.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateRelationMate","title":"<code>MateRelationMate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a mate relation within an assembly, defining how parts or sub-assemblies are connected.</p> JSON <pre><code>    {\n        \"featureId\": \"S4/TgCRmQt1nIHHp\",\n        \"occurrence\": []\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>featureId</code> <code>str</code> <p>The unique identifier of the mate feature.</p> <code>occurrence</code> <code>list[str]</code> <p>A list of identifiers for the occurrences involved in the mate relation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateRelationMate(\n...     featureId=\"S4/TgCRmQt1nIHHp\",\n...     occurrence=[],\n... )\nMateRelationMate(\n    featureId=\"S4/TgCRmQt1nIHHp\",\n    occurrence=[],\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateRelationMate(BaseModel):\n    \"\"\"\n    Represents a mate relation within an assembly, defining how parts or sub-assemblies are connected.\n\n    JSON:\n        ```json\n            {\n                \"featureId\": \"S4/TgCRmQt1nIHHp\",\n                \"occurrence\": []\n            }\n        ```\n\n    Attributes:\n        featureId (str): The unique identifier of the mate feature.\n        occurrence (list[str]): A list of identifiers for the occurrences involved in the mate relation.\n\n    Examples:\n        &gt;&gt;&gt; MateRelationMate(\n        ...     featureId=\"S4/TgCRmQt1nIHHp\",\n        ...     occurrence=[],\n        ... )\n        MateRelationMate(\n            featureId=\"S4/TgCRmQt1nIHHp\",\n            occurrence=[],\n        )\n    \"\"\"\n\n    featureId: str = Field(..., description=\"The unique identifier of the mate feature.\")\n    occurrence: list[str] = Field(\n        ..., description=\"A list of identifiers for the occurrences involved in the mate relation.\"\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MateType","title":"<code>MateType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the type of mate between two parts or assemblies, e.g. SLIDER, CYLINDRICAL, REVOLUTE, etc.</p> <p>Attributes:</p> Name Type Description <code>SLIDER</code> <code>str</code> <p>Represents a slider mate.</p> <code>CYLINDRICAL</code> <code>str</code> <p>Represents a cylindrical mate.</p> <code>REVOLUTE</code> <code>str</code> <p>Represents a revolute mate.</p> <code>PIN_SLOT</code> <code>str</code> <p>Represents a pin-slot mate.</p> <code>PLANAR</code> <code>str</code> <p>Represents a planar mate.</p> <code>BALL</code> <code>str</code> <p>Represents a ball mate.</p> <code>FASTENED</code> <code>str</code> <p>Represents a fastened mate.</p> <code>PARALLEL</code> <code>str</code> <p>Represents a parallel mate.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MateType.SLIDER\n'SLIDER'\n&gt;&gt;&gt; MateType.CYLINDRICAL\n'CYLINDRICAL'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MateType(str, Enum):\n    \"\"\"\n    Enumerates the type of mate between two parts or assemblies, e.g. SLIDER, CYLINDRICAL, REVOLUTE, etc.\n\n    Attributes:\n        SLIDER (str): Represents a slider mate.\n        CYLINDRICAL (str): Represents a cylindrical mate.\n        REVOLUTE (str): Represents a revolute mate.\n        PIN_SLOT (str): Represents a pin-slot mate.\n        PLANAR (str): Represents a planar mate.\n        BALL (str): Represents a ball mate.\n        FASTENED (str): Represents a fastened mate.\n        PARALLEL (str): Represents a parallel mate.\n\n    Examples:\n        &gt;&gt;&gt; MateType.SLIDER\n        'SLIDER'\n        &gt;&gt;&gt; MateType.CYLINDRICAL\n        'CYLINDRICAL'\n    \"\"\"\n\n    SLIDER = \"SLIDER\"\n    CYLINDRICAL = \"CYLINDRICAL\"\n    REVOLUTE = \"REVOLUTE\"\n    PIN_SLOT = \"PIN_SLOT\"\n    PLANAR = \"PLANAR\"\n    BALL = \"BALL\"\n    FASTENED = \"FASTENED\"\n    PARALLEL = \"PARALLEL\"\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MatedCS","title":"<code>MatedCS</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a coordinate system used for mating parts within an assembly.</p> JSON <pre><code>    {\n        \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n        \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n        \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n        \"origin\" : [ 0.0, -0.0505, 0.0 ]\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>xAxis</code> <code>list[float]</code> <p>The x-axis vector of the coordinate system.</p> <code>yAxis</code> <code>list[float]</code> <p>The y-axis vector of the coordinate system.</p> <code>zAxis</code> <code>list[float]</code> <p>The z-axis vector of the coordinate system.</p> <code>origin</code> <code>list[float]</code> <p>The origin point of the coordinate system.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MatedCS(\n...     xAxis=[1.0, 0.0, 0.0],\n...     yAxis=[0.0, 0.0, -1.0],\n...     zAxis=[0.0, 1.0, 0.0],\n...     origin=[0.0, -0.0505, 0.0],\n... )\nMatedCS(\n    xAxis=[1.0, 0.0, 0.0],\n    yAxis=[0.0, 0.0, -1.0],\n    zAxis=[0.0, 1.0, 0.0],\n    origin=[0.0, -0.0505, 0.0]\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MatedCS(BaseModel):\n    \"\"\"\n    Represents a coordinate system used for mating parts within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                \"yAxis\" : [ 0.0, 0.0, -1.0 ],\n                \"zAxis\" : [ 0.0, 1.0, 0.0 ],\n                \"origin\" : [ 0.0, -0.0505, 0.0 ]\n            }\n        ```\n\n    Attributes:\n        xAxis (list[float]): The x-axis vector of the coordinate system.\n        yAxis (list[float]): The y-axis vector of the coordinate system.\n        zAxis (list[float]): The z-axis vector of the coordinate system.\n        origin (list[float]): The origin point of the coordinate system.\n\n    Examples:\n        &gt;&gt;&gt; MatedCS(\n        ...     xAxis=[1.0, 0.0, 0.0],\n        ...     yAxis=[0.0, 0.0, -1.0],\n        ...     zAxis=[0.0, 1.0, 0.0],\n        ...     origin=[0.0, -0.0505, 0.0],\n        ... )\n        MatedCS(\n            xAxis=[1.0, 0.0, 0.0],\n            yAxis=[0.0, 0.0, -1.0],\n            zAxis=[0.0, 1.0, 0.0],\n            origin=[0.0, -0.0505, 0.0]\n        )\n    \"\"\"\n\n    class Config:\n        arbitrary_types_allowed = True\n\n    xAxis: list[float] = Field(..., description=\"The x-axis vector of the coordinate system.\")\n    yAxis: list[float] = Field(..., description=\"The y-axis vector of the coordinate system.\")\n    zAxis: list[float] = Field(..., description=\"The z-axis vector of the coordinate system.\")\n    origin: list[float] = Field(..., description=\"The origin point of the coordinate system.\")\n\n    part_tf: np.matrix = Field(\n        None, description=\"The 4x4 transformation matrix from the part coordinate system to the mate coordinate system.\"\n    )\n\n    @field_validator(\"xAxis\", \"yAxis\", \"zAxis\", \"origin\")\n    def check_vectors(cls, v: list[float]) -&gt; list[float]:\n        \"\"\"\n        Validates that the vectors have exactly 3 values.\n\n        Args:\n            v (list[float]): The vector to validate.\n\n        Returns:\n            list[float]: The validated vector.\n\n        Raises:\n            ValueError: If the vector does not have exactly 3 values.\n        \"\"\"\n        if len(v) != 3:\n            raise ValueError(\"Vectors must have 3 values\")\n\n        return v\n\n    @property\n    def part_to_mate_tf(self) -&gt; np.matrix:\n        \"\"\"\n        Generates a transformation matrix from the part coordinate system to the mate coordinate system.\n\n        Returns:\n            np.matrix: The 4x4 transformation matrix.\n        \"\"\"\n        if self.part_tf is not None:\n            return self.part_tf\n\n        rotation_matrix = np.array([self.xAxis, self.yAxis, self.zAxis]).T\n        translation_vector = np.array(self.origin)\n        part_to_mate_tf = np.eye(4)\n        part_to_mate_tf[:3, :3] = rotation_matrix\n        part_to_mate_tf[:3, 3] = translation_vector\n        return np.matrix(part_to_mate_tf)\n\n    @classmethod\n    def from_tf(cls, tf: np.matrix) -&gt; \"MatedCS\":\n        \"\"\"\n        Creates a MatedCS object from a 4x4 transformation matrix.\n\n        Args:\n            tf (np.matrix): The 4x4 transformation matrix.\n\n        Returns:\n            MatedCS: The MatedCS object created from the transformation matrix.\n        \"\"\"\n        return MatedCS(\n            xAxis=tf[:3, 0].flatten().tolist()[0],\n            yAxis=tf[:3, 1].flatten().tolist()[0],\n            zAxis=tf[:3, 2].flatten().tolist()[0],\n            origin=tf[:3, 3].flatten().tolist()[0],\n            part_tf=tf,\n        )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MatedCS.part_to_mate_tf","title":"<code>part_to_mate_tf: np.matrix</code>  <code>property</code>","text":"<p>Generates a transformation matrix from the part coordinate system to the mate coordinate system.</p> <p>Returns:</p> Type Description <code>matrix</code> <p>np.matrix: The 4x4 transformation matrix.</p>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MatedCS.check_vectors","title":"<code>check_vectors(v)</code>","text":"<p>Validates that the vectors have exactly 3 values.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>list[float]</code> <p>The vector to validate.</p> required <p>Returns:</p> Type Description <code>list[float]</code> <p>list[float]: The validated vector.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the vector does not have exactly 3 values.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@field_validator(\"xAxis\", \"yAxis\", \"zAxis\", \"origin\")\ndef check_vectors(cls, v: list[float]) -&gt; list[float]:\n    \"\"\"\n    Validates that the vectors have exactly 3 values.\n\n    Args:\n        v (list[float]): The vector to validate.\n\n    Returns:\n        list[float]: The validated vector.\n\n    Raises:\n        ValueError: If the vector does not have exactly 3 values.\n    \"\"\"\n    if len(v) != 3:\n        raise ValueError(\"Vectors must have 3 values\")\n\n    return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MatedCS.from_tf","title":"<code>from_tf(tf)</code>  <code>classmethod</code>","text":"<p>Creates a MatedCS object from a 4x4 transformation matrix.</p> <p>Parameters:</p> Name Type Description Default <code>tf</code> <code>matrix</code> <p>The 4x4 transformation matrix.</p> required <p>Returns:</p> Name Type Description <code>MatedCS</code> <code>MatedCS</code> <p>The MatedCS object created from the transformation matrix.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@classmethod\ndef from_tf(cls, tf: np.matrix) -&gt; \"MatedCS\":\n    \"\"\"\n    Creates a MatedCS object from a 4x4 transformation matrix.\n\n    Args:\n        tf (np.matrix): The 4x4 transformation matrix.\n\n    Returns:\n        MatedCS: The MatedCS object created from the transformation matrix.\n    \"\"\"\n    return MatedCS(\n        xAxis=tf[:3, 0].flatten().tolist()[0],\n        yAxis=tf[:3, 1].flatten().tolist()[0],\n        zAxis=tf[:3, 2].flatten().tolist()[0],\n        origin=tf[:3, 3].flatten().tolist()[0],\n        part_tf=tf,\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.MatedEntity","title":"<code>MatedEntity</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an entity that is mated within an assembly, including its coordinate system.</p> JSON <pre><code>    {\n        \"matedOccurrence\": [\"MDUJyqGNo7JJll+/h\"],\n        \"matedCS\": {\n            \"xAxis\": [1.0, 0.0, 0.0],\n            \"yAxis\": [0.0, 0.0, -1.0],\n            \"zAxis\": [0.0, 1.0, 0.0],\n            \"origin\": [0.0, -0.0505, 0.0]\n        }\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>matedOccurrence</code> <code>list[str]</code> <p>A list of identifiers for the occurrences that are mated.</p> <code>matedCS</code> <code>MatedCS</code> <p>The coordinate system used for mating the parts.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MatedEntity(\n...     matedOccurrence=[\"MDUJyqGNo7JJll+/h\"],\n...     matedCS=MatedCS(\n...         xAxis=[1.0, 0.0, 0.0],\n...         yAxis=[0.0, 0.0, -1.0],\n...         zAxis=[0.0, 1.0, 0.0],\n...         origin=[0.0, -0.0505, 0.0],\n...     ),\n... )\nMatedEntity(\n    matedOccurrence=[\"MDUJyqGNo7JJll+/h\"],\n    matedCS=MatedCS(\n        xAxis=[1.0, 0.0, 0.0],\n        yAxis=[0.0, 0.0, -1.0],\n        zAxis=[0.0, 1.0, 0.0],\n        origin=[0.0, -0.0505, 0.0]\n    )\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class MatedEntity(BaseModel):\n    \"\"\"\n    Represents an entity that is mated within an assembly, including its coordinate system.\n\n    JSON:\n        ```json\n            {\n                \"matedOccurrence\": [\"MDUJyqGNo7JJll+/h\"],\n                \"matedCS\": {\n                    \"xAxis\": [1.0, 0.0, 0.0],\n                    \"yAxis\": [0.0, 0.0, -1.0],\n                    \"zAxis\": [0.0, 1.0, 0.0],\n                    \"origin\": [0.0, -0.0505, 0.0]\n                }\n            }\n        ```\n\n    Attributes:\n        matedOccurrence (list[str]): A list of identifiers for the occurrences that are mated.\n        matedCS (MatedCS): The coordinate system used for mating the parts.\n\n    Examples:\n        &gt;&gt;&gt; MatedEntity(\n        ...     matedOccurrence=[\"MDUJyqGNo7JJll+/h\"],\n        ...     matedCS=MatedCS(\n        ...         xAxis=[1.0, 0.0, 0.0],\n        ...         yAxis=[0.0, 0.0, -1.0],\n        ...         zAxis=[0.0, 1.0, 0.0],\n        ...         origin=[0.0, -0.0505, 0.0],\n        ...     ),\n        ... )\n        MatedEntity(\n            matedOccurrence=[\"MDUJyqGNo7JJll+/h\"],\n            matedCS=MatedCS(\n                xAxis=[1.0, 0.0, 0.0],\n                yAxis=[0.0, 0.0, -1.0],\n                zAxis=[0.0, 1.0, 0.0],\n                origin=[0.0, -0.0505, 0.0]\n            )\n        )\n    \"\"\"\n\n    matedOccurrence: list[str] = Field(..., description=\"A list of identifiers for the occurrences that are mated.\")\n    matedCS: MatedCS = Field(..., description=\"The coordinate system used for mating the parts.\")\n\n    parentCS: MatedCS = Field(\n        None, description=\"The 4x4 transformation matrix for the mate feature, used for custom transformations.\"\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Occurrence","title":"<code>Occurrence</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an occurrence of a part or sub-assembly within an assembly.</p> JSON <pre><code>    {\n        \"fixed\": false,\n        \"transform\": [\n            0.8660254037844396, 0.0, 0.5000000000000004, 0.09583333333333346,\n            0.0, 1.0, 0.0, -1.53080849893419E-19,\n            -0.5000000000000004, 0.0, 0.8660254037844396, 0.16598820239201767,\n            0.0, 0.0, 0.0, 1.0\n        ],\n        \"hidden\": false,\n        \"path\": [\"M0Cyvy+yIq8Rd7En0\"]\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>fixed</code> <code>bool</code> <p>Indicates if the occurrence is fixed in space.</p> <code>transform</code> <code>list[float]</code> <p>A 4x4 transformation matrix represented as a list of 16 floats.</p> <code>hidden</code> <code>bool</code> <p>Indicates if the occurrence is hidden.</p> <code>path</code> <code>list[str]</code> <p>A list of strings representing the path to the instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Occurrence(\n...     fixed=False,\n...     transform=[\n...         0.8660254037844396, 0.0, 0.5000000000000004, 0.09583333333333346,\n...         0.0, 1.0, 0.0, -1.53080849893419E-19,\n...         -0.5000000000000004, 0.0, 0.8660254037844396, 0.16598820239201767,\n...         0.0, 0.0, 0.0, 1.0)\n...     ],\n...     hidden=False,\n...     path=[\"M0Cyvy+yIq8Rd7En0\"]\n... )\nOccurrence(\n    fixed=False,\n    transform=[...],\n    hidden=False,\n    path=[\"M0Cyvy+yIq8Rd7En0\"]\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class Occurrence(BaseModel):\n    \"\"\"\n    Represents an occurrence of a part or sub-assembly within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"fixed\": false,\n                \"transform\": [\n                    0.8660254037844396, 0.0, 0.5000000000000004, 0.09583333333333346,\n                    0.0, 1.0, 0.0, -1.53080849893419E-19,\n                    -0.5000000000000004, 0.0, 0.8660254037844396, 0.16598820239201767,\n                    0.0, 0.0, 0.0, 1.0\n                ],\n                \"hidden\": false,\n                \"path\": [\"M0Cyvy+yIq8Rd7En0\"]\n            }\n        ```\n\n    Attributes:\n        fixed (bool): Indicates if the occurrence is fixed in space.\n        transform (list[float]): A 4x4 transformation matrix represented as a list of 16 floats.\n        hidden (bool): Indicates if the occurrence is hidden.\n        path (list[str]): A list of strings representing the path to the instance.\n\n    Examples:\n        &gt;&gt;&gt; Occurrence(\n        ...     fixed=False,\n        ...     transform=[\n        ...         0.8660254037844396, 0.0, 0.5000000000000004, 0.09583333333333346,\n        ...         0.0, 1.0, 0.0, -1.53080849893419E-19,\n        ...         -0.5000000000000004, 0.0, 0.8660254037844396, 0.16598820239201767,\n        ...         0.0, 0.0, 0.0, 1.0)\n        ...     ],\n        ...     hidden=False,\n        ...     path=[\"M0Cyvy+yIq8Rd7En0\"]\n        ... )\n        Occurrence(\n            fixed=False,\n            transform=[...],\n            hidden=False,\n            path=[\"M0Cyvy+yIq8Rd7En0\"]\n        )\n    \"\"\"\n\n    fixed: bool = Field(..., description=\"Indicates if the occurrence is fixed in space.\")\n    transform: list[float] = Field(..., description=\"A 4x4 transformation matrix represented as a list of 16 floats.\")\n    hidden: bool = Field(..., description=\"Indicates if the occurrence is hidden.\")\n    path: list[str] = Field(..., description=\"A list of strings representing the path to the instance.\")\n\n    @field_validator(\"transform\")\n    def check_transform(cls, v: list[float]) -&gt; list[float]:\n        \"\"\"\n        Validates that the transform list has exactly 16 values.\n\n        Args:\n            v (list[float]): The transform list to validate.\n\n        Returns:\n            list[float]: The validated transform list.\n\n        Raises:\n            ValueError: If the transform list does not contain exactly 16 values.\n        \"\"\"\n        if len(v) != 16:\n            raise ValueError(\"Transform must have 16 values\")\n\n        return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Occurrence.check_transform","title":"<code>check_transform(v)</code>","text":"<p>Validates that the transform list has exactly 16 values.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>list[float]</code> <p>The transform list to validate.</p> required <p>Returns:</p> Type Description <code>list[float]</code> <p>list[float]: The validated transform list.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the transform list does not contain exactly 16 values.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@field_validator(\"transform\")\ndef check_transform(cls, v: list[float]) -&gt; list[float]:\n    \"\"\"\n    Validates that the transform list has exactly 16 values.\n\n    Args:\n        v (list[float]): The transform list to validate.\n\n    Returns:\n        list[float]: The validated transform list.\n\n    Raises:\n        ValueError: If the transform list does not contain exactly 16 values.\n    \"\"\"\n    if len(v) != 16:\n        raise ValueError(\"Transform must have 16 values\")\n\n    return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Part","title":"<code>Part</code>","text":"<p>               Bases: <code>IDBase</code></p> <p>Represents a part within an assembly, including its properties and configuration.</p> JSON <pre><code>    {\n        \"isStandardContent\": false,\n        \"partId\": \"RDBD\",\n        \"bodyType\": \"solid\",\n        \"fullConfiguration\": \"default\",\n        \"configuration\": \"default\",\n        \"documentId\": \"a1c1addf75444f54b504f25c\",\n        \"elementId\": \"0b0c209535554345432581fe\",\n        \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>isStandardContent</code> <code>bool</code> <p>Indicates if the part is standard content.</p> <code>partId</code> <code>str</code> <p>The unique identifier of the part.</p> <code>bodyType</code> <code>str</code> <p>The type of the body (e.g., solid, surface).</p> Custom Attributes <p>MassProperty (Union[MassProperties, None]): The mass properties of the part, if available.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Part(\n...     isStandardContent=False,\n...     partId=\"RDBD\",\n...     bodyType=\"solid\",\n... )\nPart(\n    isStandardContent=False,\n    partId=\"RDBD\",\n    bodyType=\"solid\",\n    MassProperty=None\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class Part(IDBase):\n    \"\"\"\n    Represents a part within an assembly, including its properties and configuration.\n\n    JSON:\n        ```json\n            {\n                \"isStandardContent\": false,\n                \"partId\": \"RDBD\",\n                \"bodyType\": \"solid\",\n                \"fullConfiguration\": \"default\",\n                \"configuration\": \"default\",\n                \"documentId\": \"a1c1addf75444f54b504f25c\",\n                \"elementId\": \"0b0c209535554345432581fe\",\n                \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n            }\n        ```\n\n    Attributes:\n        isStandardContent (bool): Indicates if the part is standard content.\n        partId (str): The unique identifier of the part.\n        bodyType (str): The type of the body (e.g., solid, surface).\n\n    Custom Attributes:\n        MassProperty (Union[MassProperties, None]): The mass properties of the part, if available.\n\n    Examples:\n        &gt;&gt;&gt; Part(\n        ...     isStandardContent=False,\n        ...     partId=\"RDBD\",\n        ...     bodyType=\"solid\",\n        ... )\n        Part(\n            isStandardContent=False,\n            partId=\"RDBD\",\n            bodyType=\"solid\",\n            MassProperty=None\n        )\n\n    \"\"\"\n\n    isStandardContent: bool = Field(..., description=\"Indicates if the part is standard content.\")\n    partId: str = Field(..., description=\"The unique identifier of the part.\")\n    bodyType: str = Field(..., description=\"The type of the body (e.g., solid, surface).\")\n    mateConnectors: list[PartMateConnector] = Field(None, description=\"The mate connectors that belong to the part.\")\n    documentVersion: str = Field(None, description=\"The version of the document.\")\n    MassProperty: Union[MassProperties, None] = Field(\n        None, description=\"The mass properties of the part, this is a retrieved via a separate API call.\"\n    )\n\n    isRigidAssembly: bool = Field(\n        False, description=\"Indicates if the part is a rigid assembly, i.e., a sub-assembly with no degrees of freedom.\"\n    )\n    rigidAssemblyToPartTF: Union[dict[str, \"MatedCS\"], None] = Field(\n        None, description=\"The transformation matrix from the rigid assembly to the part coordinate system.\"\n    )\n    rigidAssemblyWorkspaceId: Union[str, None] = Field(\n        None, description=\"The workspace ID of the rigid assembly, if it is a sub-assembly.\"\n    )\n\n    @property\n    def uid(self) -&gt; str:\n        \"\"\"\n        Generates a unique identifier for the part.\n\n        Returns:\n            str: The unique identifier generated from documentId, documentMicroversion,\n                elementId, partId, and fullConfiguration.\n        \"\"\"\n        return generate_uid([\n            self.documentId,\n            self.documentMicroversion,\n            self.elementId,\n            self.partId,\n            self.fullConfiguration,\n        ])\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Part.uid","title":"<code>uid: str</code>  <code>property</code>","text":"<p>Generates a unique identifier for the part.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique identifier generated from documentId, documentMicroversion, elementId, partId, and fullConfiguration.</p>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.PartInstance","title":"<code>PartInstance</code>","text":"<p>               Bases: <code>IDBase</code></p> <p>Represents an instance of a part within an assembly.</p> JSON <pre><code>    {\n        \"isStandardContent\": false,\n        \"type\": \"Part\",\n        \"id\": \"M0Cyvy+yIq8Rd7En0\",\n        \"name\": \"Part 1 &lt;2&gt;\",\n        \"suppressed\": false,\n        \"partId\": \"JHD\",\n        \"fullConfiguration\": \"default\",\n        \"configuration\": \"default\",\n        \"documentId\": \"a1c1addf75444f54b504f25c\",\n        \"elementId\": \"0b0c209535554345432581fe\",\n        \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>isStandardContent</code> <code>bool</code> <p>Indicates if the part is standard content.</p> <code>type</code> <code>InstanceType</code> <p>The type of the instance, must be 'Part'.</p> <code>id</code> <code>str</code> <p>The unique identifier for the part instance.</p> <code>name</code> <code>str</code> <p>The name of the part instance.</p> <code>suppressed</code> <code>bool</code> <p>Indicates if the part instance is suppressed.</p> <code>partId</code> <code>str</code> <p>The identifier for the part.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PartInstance(\n...     isStandardContent=False,\n...     type=InstanceType.PART,\n...     id=\"M0Cyvy+yIq8Rd7En0\",\n...     name=\"Part 1 &lt;2&gt;\",\n...     suppressed=False,\n...     partId=\"JHD\",\n... )\nPartInstance(\n    isStandardContent=False,\n    type=InstanceType.PART,\n    id=\"M0Cyvy+yIq8Rd7En0\",\n    name=\"Part 1 &lt;2&gt;\",\n    suppressed=False,\n    partId=\"JHD\",\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class PartInstance(IDBase):\n    \"\"\"\n    Represents an instance of a part within an assembly.\n\n    JSON:\n        ```json\n            {\n                \"isStandardContent\": false,\n                \"type\": \"Part\",\n                \"id\": \"M0Cyvy+yIq8Rd7En0\",\n                \"name\": \"Part 1 &lt;2&gt;\",\n                \"suppressed\": false,\n                \"partId\": \"JHD\",\n                \"fullConfiguration\": \"default\",\n                \"configuration\": \"default\",\n                \"documentId\": \"a1c1addf75444f54b504f25c\",\n                \"elementId\": \"0b0c209535554345432581fe\",\n                \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n            }\n        ```\n\n    Attributes:\n        isStandardContent (bool): Indicates if the part is standard content.\n        type (InstanceType): The type of the instance, must be 'Part'.\n        id (str): The unique identifier for the part instance.\n        name (str): The name of the part instance.\n        suppressed (bool): Indicates if the part instance is suppressed.\n        partId (str): The identifier for the part.\n\n    Examples:\n        &gt;&gt;&gt; PartInstance(\n        ...     isStandardContent=False,\n        ...     type=InstanceType.PART,\n        ...     id=\"M0Cyvy+yIq8Rd7En0\",\n        ...     name=\"Part 1 &lt;2&gt;\",\n        ...     suppressed=False,\n        ...     partId=\"JHD\",\n        ... )\n        PartInstance(\n            isStandardContent=False,\n            type=InstanceType.PART,\n            id=\"M0Cyvy+yIq8Rd7En0\",\n            name=\"Part 1 &lt;2&gt;\",\n            suppressed=False,\n            partId=\"JHD\",\n        )\n    \"\"\"\n\n    isStandardContent: bool = Field(..., description=\"Indicates if the part is standard content.\")\n    type: InstanceType = Field(..., description=\"The type of the instance, must be 'Part'.\")\n    documentVersion: str = Field(None, description=\"The version of the document.\")\n    id: str = Field(..., description=\"The unique identifier for the part instance.\")\n    name: str = Field(..., description=\"The name of the part instance.\")\n    suppressed: bool = Field(..., description=\"Indicates if the part instance is suppressed.\")\n    partId: str = Field(..., description=\"The identifier for the part.\")\n\n    @field_validator(\"type\")\n    def check_type(cls, v: InstanceType) -&gt; InstanceType:\n        \"\"\"\n        Validates that the type is 'Part'.\n\n        Args:\n            v (InstanceType): The type to validate.\n\n        Returns:\n            InstanceType: The validated type.\n        \"\"\"\n        if v != InstanceType.PART:\n            raise ValueError(\"Type must be Part\")\n\n        return v\n\n    @property\n    def uid(self) -&gt; str:\n        \"\"\"\n        Generates a unique identifier for the part instance based on its attributes.\n\n        Returns:\n            str: The unique identifier for the part instance.\n        \"\"\"\n        return generate_uid([\n            self.documentId,\n            self.documentMicroversion,\n            self.elementId,\n            self.partId,\n            self.fullConfiguration,\n        ])\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.PartInstance.uid","title":"<code>uid: str</code>  <code>property</code>","text":"<p>Generates a unique identifier for the part instance based on its attributes.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique identifier for the part instance.</p>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.PartInstance.check_type","title":"<code>check_type(v)</code>","text":"<p>Validates that the type is 'Part'.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>InstanceType</code> <p>The type to validate.</p> required <p>Returns:</p> Name Type Description <code>InstanceType</code> <code>InstanceType</code> <p>The validated type.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>@field_validator(\"type\")\ndef check_type(cls, v: InstanceType) -&gt; InstanceType:\n    \"\"\"\n    Validates that the type is 'Part'.\n\n    Args:\n        v (InstanceType): The type to validate.\n\n    Returns:\n        InstanceType: The validated type.\n    \"\"\"\n    if v != InstanceType.PART:\n        raise ValueError(\"Type must be Part\")\n\n    return v\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.PartMateConnector","title":"<code>PartMateConnector</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a mate connector within a part.</p> JSON <pre><code>    {\n    \"mateConnectorCS\" : {\n        \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n        \"yAxis\" : [ 0.0, 1.0, 0.0 ],\n        \"zAxis\" : [ 0.0, 0.0, 1.0 ],\n        \"origin\" : [ 0.0, 0.0, 0.024999999999999984 ]\n    },\n    \"featureId\" : \"FuB5m1oLMD3WyJ1_1\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>mateConnectorCS</code> <code>MatedCS</code> <p>The coordinate system used for the mate connector.</p> <code>featureId</code> <code>str</code> <p>The unique identifier of the mate connector feature.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PartMateConnector(\n...     mateConnectorCS=MatedCS(\n...         xAxis=[1.0, 0.0, 0.0],\n...         yAxis=[0.0, 1.0, 0.0],\n...         zAxis=[0.0, 0.0, 1.0],\n...         origin=[0.0, 0.0, 0.024999999999999984],\n...     ),\n...     featureId=\"FuB5m1oLMD3WyJ1_1\",\n... )\nPartMateConnector(\n    mateConnectorCS=MatedCS(\n        xAxis=[1.0, 0.0, 0.0],\n        yAxis=[0.0, 1.0, 0.0],\n        zAxis=[0.0, 0.0, 1.0],\n        origin=[0.0, 0.0, 0.024999999999999984]\n    ),\n    featureId=\"FuB5m1oLMD3WyJ1_1\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class PartMateConnector(BaseModel):\n    \"\"\"\n    Represents a mate connector within a part.\n\n    JSON:\n        ```json\n            {\n            \"mateConnectorCS\" : {\n                \"xAxis\" : [ 1.0, 0.0, 0.0 ],\n                \"yAxis\" : [ 0.0, 1.0, 0.0 ],\n                \"zAxis\" : [ 0.0, 0.0, 1.0 ],\n                \"origin\" : [ 0.0, 0.0, 0.024999999999999984 ]\n            },\n            \"featureId\" : \"FuB5m1oLMD3WyJ1_1\"\n            }\n        ```\n\n    Attributes:\n        mateConnectorCS (MatedCS): The coordinate system used for the mate connector.\n        featureId (str): The unique identifier of the mate connector feature.\n\n    Examples:\n        &gt;&gt;&gt; PartMateConnector(\n        ...     mateConnectorCS=MatedCS(\n        ...         xAxis=[1.0, 0.0, 0.0],\n        ...         yAxis=[0.0, 1.0, 0.0],\n        ...         zAxis=[0.0, 0.0, 1.0],\n        ...         origin=[0.0, 0.0, 0.024999999999999984],\n        ...     ),\n        ...     featureId=\"FuB5m1oLMD3WyJ1_1\",\n        ... )\n        PartMateConnector(\n            mateConnectorCS=MatedCS(\n                xAxis=[1.0, 0.0, 0.0],\n                yAxis=[0.0, 1.0, 0.0],\n                zAxis=[0.0, 0.0, 1.0],\n                origin=[0.0, 0.0, 0.024999999999999984]\n            ),\n            featureId=\"FuB5m1oLMD3WyJ1_1\"\n        )\n    \"\"\"\n\n    mateConnectorCS: \"MatedCS\" = Field(..., description=\"The coordinate system used for the mate connector.\")\n    featureId: str = Field(..., description=\"The unique identifier of the mate connector feature.\")\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.Pattern","title":"<code>Pattern</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a pattern feature within an assembly, defining repeated instances of parts or sub-assemblies.</p> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class Pattern(BaseModel):\n    \"\"\"\n    Represents a pattern feature within an assembly, defining repeated instances of parts or sub-assemblies.\n    \"\"\"\n\n    # TODO: Implement Pattern model\n    pass\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.RelationType","title":"<code>RelationType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the type of mate relation between two parts or assemblies, e.g. LINEAR, GEAR, SCREW, etc.</p> <p>Attributes:</p> Name Type Description <code>LINEAR</code> <code>str</code> <p>Represents a linear relation.</p> <code>GEAR</code> <code>str</code> <p>Represents a gear relation.</p> <code>SCREW</code> <code>str</code> <p>Represents a screw relation.</p> <code>RACK_AND_PINION</code> <code>str</code> <p>Represents a rack and pinion relation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; RelationType.LINEAR\n'LINEAR'\n&gt;&gt;&gt; RelationType.GEAR\n'GEAR'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class RelationType(str, Enum):\n    \"\"\"\n    Enumerates the type of mate relation between two parts or assemblies, e.g. LINEAR, GEAR, SCREW, etc.\n\n    Attributes:\n        LINEAR (str): Represents a linear relation.\n        GEAR (str): Represents a gear relation.\n        SCREW (str): Represents a screw relation.\n        RACK_AND_PINION (str): Represents a rack and pinion relation.\n\n    Examples:\n        &gt;&gt;&gt; RelationType.LINEAR\n        'LINEAR'\n        &gt;&gt;&gt; RelationType.GEAR\n        'GEAR'\n    \"\"\"\n\n    LINEAR = \"LINEAR\"\n    GEAR = \"GEAR\"\n    SCREW = \"SCREW\"\n    RACK_AND_PINION = \"RACK_AND_PINION\"\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.RootAssembly","title":"<code>RootAssembly</code>","text":"<p>               Bases: <code>SubAssembly</code></p> <p>Represents the root assembly, which is the top-level assembly containing all parts and sub-assemblies.</p> JSON <pre><code>    {\n        \"instances\": [],\n        \"patterns\": [],\n        \"features\": [],\n        \"occurrences\": [],\n        \"fullConfiguration\": \"default\",\n        \"configuration\": \"default\",\n        \"documentId\": \"a1c1addf75444f54b504f25c\",\n        \"elementId\": \"0b0c209535554345432581fe\",\n        \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>instances</code> <code>list[Union[PartInstance, AssemblyInstance]]</code> <p>A list of part and assembly instances in the root assembly.</p> <code>patterns</code> <code>list[Pattern]</code> <p>A list of patterns in the root assembly.</p> <code>features</code> <code>list[AssemblyFeature]</code> <p>A list of features in the root assembly.</p> <code>occurrences</code> <code>list[Occurrence]</code> <p>A list of occurrences in the root assembly.</p> <code>fullConfiguration</code> <code>str</code> <p>The full configuration of the root assembly.</p> <code>configuration</code> <code>str</code> <p>The configuration of the root assembly.</p> <code>documentId</code> <code>str</code> <p>The unique identifier of the document containing the root assembly.</p> <code>elementId</code> <code>str</code> <p>The unique identifier of the element containing the root assembly.</p> <code>documentMicroversion</code> <code>str</code> <p>The microversion of the document containing the root assembly.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; RootAssembly(\n...     instances=[...],\n...     patterns=[...],\n...     features=[...],\n...     occurrences=[...],\n...     fullConfiguration=\"default\",\n...     configuration=\"default\",\n...     documentId=\"a1c1addf75444f54b504f25c\",\n...     elementId=\"0b0c209535554345432581fe\",\n...     documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n... )\nRootAssembly(\n    instances=[...],\n    patterns=[...],\n    features=[...],\n    occurrences=[...],\n    fullConfiguration=\"default\",\n    configuration=\"default\",\n    documentId=\"a1c1addf75444f54b504f25c\",\n    elementId=\"0b0c209535554345432581fe\",\n    documentMicroversion=\"349f6413cafefe8fb4ab3b07\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class RootAssembly(SubAssembly):\n    \"\"\"\n    Represents the root assembly, which is the top-level assembly containing all parts and sub-assemblies.\n\n    JSON:\n        ```json\n            {\n                \"instances\": [],\n                \"patterns\": [],\n                \"features\": [],\n                \"occurrences\": [],\n                \"fullConfiguration\": \"default\",\n                \"configuration\": \"default\",\n                \"documentId\": \"a1c1addf75444f54b504f25c\",\n                \"elementId\": \"0b0c209535554345432581fe\",\n                \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n            }\n        ```\n\n    Attributes:\n        instances (list[Union[PartInstance, AssemblyInstance]]):\n            A list of part and assembly instances in the root assembly.\n        patterns (list[Pattern]): A list of patterns in the root assembly.\n        features (list[AssemblyFeature]): A list of features in the root assembly.\n        occurrences (list[Occurrence]): A list of occurrences in the root assembly.\n        fullConfiguration (str): The full configuration of the root assembly.\n        configuration (str): The configuration of the root assembly.\n        documentId (str): The unique identifier of the document containing the root assembly.\n        elementId (str): The unique identifier of the element containing the root assembly.\n        documentMicroversion (str): The microversion of the document containing the root assembly.\n\n    Examples:\n        &gt;&gt;&gt; RootAssembly(\n        ...     instances=[...],\n        ...     patterns=[...],\n        ...     features=[...],\n        ...     occurrences=[...],\n        ...     fullConfiguration=\"default\",\n        ...     configuration=\"default\",\n        ...     documentId=\"a1c1addf75444f54b504f25c\",\n        ...     elementId=\"0b0c209535554345432581fe\",\n        ...     documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n        ... )\n        RootAssembly(\n            instances=[...],\n            patterns=[...],\n            features=[...],\n            occurrences=[...],\n            fullConfiguration=\"default\",\n            configuration=\"default\",\n            documentId=\"a1c1addf75444f54b504f25c\",\n            elementId=\"0b0c209535554345432581fe\",\n            documentMicroversion=\"349f6413cafefe8fb4ab3b07\"\n        )\n    \"\"\"\n\n    occurrences: list[Occurrence] = Field(..., description=\"A list of occurrences in the root assembly.\")\n\n    documentMetaData: Union[DocumentMetaData, None] = Field(\n        None, description=\"The document associated with the assembly.\"\n    )\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.SubAssembly","title":"<code>SubAssembly</code>","text":"<p>               Bases: <code>IDBase</code></p> <p>Represents a sub-assembly within a root assembly.</p> JSON <pre><code>    {\n        \"instances\": [],\n        \"patterns\": [],\n        \"features\": [],\n        \"fullConfiguration\": \"default\",\n        \"configuration\": \"default\",\n        \"documentId\": \"a1c1addf75444f54b504f25c\",\n        \"elementId\": \"0b0c209535554345432581fe\",\n        \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>instances</code> <code>list[Union[PartInstance, AssemblyInstance]]</code> <p>A list of part and assembly instances in the sub-assembly.</p> <code>patterns</code> <code>list[Pattern]</code> <p>A list of patterns in the sub-assembly.</p> <code>features</code> <code>list[AssemblyFeature]</code> <p>A list of features in the sub-assembly</p> <code>fullConfiguration</code> <code>str</code> <p>The full configuration of the sub-assembly.</p> <code>configuration</code> <code>str</code> <p>The configuration of the sub-assembly.</p> <code>documentId</code> <code>str</code> <p>The unique identifier of the document containing the sub-assembly.</p> <code>elementId</code> <code>str</code> <p>The unique identifier of the element containing the sub-assembly.</p> <code>documentMicroversion</code> <code>str</code> <p>The microversion of the document containing the sub-assembly.</p> Properties <p>uid (str): A unique identifier for the sub-assembly based on documentId, documentMicroversion, elementId, and     fullConfiguration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SubAssembly(\n...     instances=[...],\n...     patterns=[...],\n...     features=[...],\n...     fullConfiguration=\"default\",\n...     configuration=\"default\",\n...     documentId=\"a1c1addf75444f54b504f25c\",\n...     elementId=\"0b0c209535554345432581fe\",\n...     documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n... )\nSubAssembly(\n    instances=[...],\n    patterns=[...],\n    features=[...],\n    fullConfiguration=\"default\",\n    configuration=\"default\",\n    documentId=\"a1c1addf75444f54b504f25c\",\n    elementId=\"0b0c209535554345432581fe\",\n    documentMicroversion=\"349f6413cafefe8fb4ab3b07\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\assembly.py</code> <pre><code>class SubAssembly(IDBase):\n    \"\"\"\n    Represents a sub-assembly within a root assembly.\n\n    JSON:\n        ```json\n            {\n                \"instances\": [],\n                \"patterns\": [],\n                \"features\": [],\n                \"fullConfiguration\": \"default\",\n                \"configuration\": \"default\",\n                \"documentId\": \"a1c1addf75444f54b504f25c\",\n                \"elementId\": \"0b0c209535554345432581fe\",\n                \"documentMicroversion\": \"349f6413cafefe8fb4ab3b07\"\n            }\n        ```\n\n    Attributes:\n        instances (list[Union[PartInstance, AssemblyInstance]]):\n            A list of part and assembly instances in the sub-assembly.\n        patterns (list[Pattern]): A list of patterns in the sub-assembly.\n        features (list[AssemblyFeature]): A list of features in the sub-assembly\n        fullConfiguration (str): The full configuration of the sub-assembly.\n        configuration (str): The configuration of the sub-assembly.\n        documentId (str): The unique identifier of the document containing the sub-assembly.\n        elementId (str): The unique identifier of the element containing the sub-assembly.\n        documentMicroversion (str): The microversion of the document containing the sub-assembly.\n\n    Properties:\n        uid (str): A unique identifier for the sub-assembly based on documentId, documentMicroversion, elementId, and\n            fullConfiguration.\n\n    Examples:\n        &gt;&gt;&gt; SubAssembly(\n        ...     instances=[...],\n        ...     patterns=[...],\n        ...     features=[...],\n        ...     fullConfiguration=\"default\",\n        ...     configuration=\"default\",\n        ...     documentId=\"a1c1addf75444f54b504f25c\",\n        ...     elementId=\"0b0c209535554345432581fe\",\n        ...     documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n        ... )\n        SubAssembly(\n            instances=[...],\n            patterns=[...],\n            features=[...],\n            fullConfiguration=\"default\",\n            configuration=\"default\",\n            documentId=\"a1c1addf75444f54b504f25c\",\n            elementId=\"0b0c209535554345432581fe\",\n            documentMicroversion=\"349f6413cafefe8fb4ab3b07\"\n        )\n\n    \"\"\"\n\n    instances: list[Union[PartInstance, AssemblyInstance]] = Field(\n        ..., description=\"A list of part and assembly instances in the sub-assembly.\"\n    )\n    patterns: list[Pattern] = Field(..., description=\"A list of patterns in the sub-assembly.\")\n    features: list[AssemblyFeature] = Field(..., description=\"A list of features in the sub-assembly\")\n\n    MassProperty: Union[MassProperties, None] = Field(\n        None, description=\"The mass properties of the sub-assembly, this is a retrieved via a separate API call.\"\n    )\n\n    @property\n    def uid(self) -&gt; str:\n        \"\"\"\n        Generates a unique identifier for the sub-assembly with documentId, documentMicroversion, elementId, and\n        fullConfiguration.\n\n        Returns:\n            str: The unique identifier for the sub-assembly.\n        \"\"\"\n        return generate_uid([self.documentId, self.documentMicroversion, self.elementId, self.fullConfiguration])\n</code></pre>"},{"location":"api/assembly/#onshape_robotics_toolkit.models.assembly.SubAssembly.uid","title":"<code>uid: str</code>  <code>property</code>","text":"<p>Generates a unique identifier for the sub-assembly with documentId, documentMicroversion, elementId, and fullConfiguration.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique identifier for the sub-assembly.</p>"},{"location":"api/connect/","title":"Connect","text":"<p>This module provides a client class and other utilities to interact with the Onshape API.</p> Class <ul> <li>Client: Provides access to the Onshape REST API.</li> <li>Part: Represents a part within an assembly, including its properties and configuration.</li> <li>PartInstance: Represents an instance of a part within an assembly.</li> </ul> Enum <ul> <li>HTTP: Enumerates the possible HTTP methods (GET, POST, DELETE).</li> </ul>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset","title":"<code>Asset</code>","text":"<p>Represents a set of parameters required to download a link from Onshape.</p> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>class Asset:\n    \"\"\"\n    Represents a set of parameters required to download a link from Onshape.\n    \"\"\"\n\n    def __init__(\n        self,\n        file_name: str,\n        did: str = \"\",\n        wtype: str = \"\",\n        wid: str = \"\",\n        eid: str = \"\",\n        client: Optional[Client] = None,\n        transform: Optional[np.ndarray] = None,\n        is_rigid_assembly: bool = False,\n        partID: Optional[str] = None,\n        is_from_file: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the Asset object.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the element.\n            client: Onshape API client object.\n            transform: Transformation matrix to apply to the mesh.\n            file_name: Name of the mesh file.\n            is_rigid_assembly: Whether the element is a rigid assembly.\n            partID: The unique identifier of the part.\n        \"\"\"\n        self.did = did\n        self.wtype = wtype\n        self.wid = wid\n        self.eid = eid\n        self.client = client\n        self.transform = transform\n        self.file_name = file_name\n        self.is_rigid_assembly = is_rigid_assembly\n        self.partID = partID\n        self.is_from_file = is_from_file\n\n        self._file_path = None\n\n    @property\n    def absolute_path(self) -&gt; str:\n        \"\"\"\n        Returns the file path of the mesh file.\n        \"\"\"\n        if self.is_from_file:\n            return self._file_path\n\n        # if meshes directory does not exist, create it\n        if not os.path.exists(os.path.join(CURRENT_DIR, MESHES_DIR)):\n            os.makedirs(os.path.join(CURRENT_DIR, MESHES_DIR))\n\n        return os.path.join(CURRENT_DIR, MESHES_DIR, self.file_name)\n\n    @property\n    def relative_path(self) -&gt; str:\n        \"\"\"\n        Returns the relative path of the mesh file.\n        \"\"\"\n        return os.path.relpath(self.absolute_path, CURRENT_DIR)\n\n    async def download(self) -&gt; None:\n        \"\"\"\n        Asynchronously download the mesh file from Onshape, transform it, and save it to a file.\n        \"\"\"\n        LOGGER.info(f\"Starting download for {self.file_name}\")\n        try:\n            with io.BytesIO() as buffer:\n                if not self.is_rigid_assembly:\n                    await asyncio.to_thread(\n                        self.client.download_part_stl,\n                        did=self.did,\n                        wtype=self.wtype,\n                        wid=self.wid,\n                        eid=self.eid,\n                        partID=self.partID,\n                        buffer=buffer,\n                    )\n                else:\n                    await asyncio.to_thread(\n                        self.client.download_assembly_stl,\n                        did=self.did,\n                        wtype=self.wtype,\n                        wid=self.wid,\n                        eid=self.eid,\n                        buffer=buffer,\n                    )\n\n                buffer.seek(0)\n\n                raw_mesh = stl.mesh.Mesh.from_file(None, fh=buffer)\n                transformed_mesh = transform_mesh(raw_mesh, self.transform)\n                transformed_mesh.save(self.absolute_path)\n\n                LOGGER.info(f\"Mesh file saved: {self.absolute_path}\")\n        except Exception as e:\n            LOGGER.error(f\"Failed to download {self.file_name}: {e}\")\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Returns the XML representation of the asset, which is a mesh file.\n\n        Examples:\n            &gt;&gt;&gt; asset = Asset(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wtype=\"w\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\",\n            ...     client=client,\n            ...     transform=np.eye(4),\n            ...     file_name=\"mesh.stl\",\n            ...     is_rigid_assembly=True\n            ... )\n            &gt;&gt;&gt; asset.to_mjcf()\n            &lt;mesh name=\"Part-1-1\" file=\"Part-1-1.stl\" /&gt;\n        \"\"\"\n        asset = ET.Element(\"mesh\") if root is None else ET.SubElement(root, \"mesh\")\n        asset.set(\"name\", self.file_name.split(\".\")[0])\n        asset.set(\"file\", self.relative_path)\n\n    @classmethod\n    def from_file(cls, file_path: str) -&gt; \"Asset\":\n        \"\"\"\n        Create an Asset object from a mesh file.\n\n        Args:\n            file_path: Path to the mesh file.\n            client: Onshape API client object.\n\n        Returns:\n            Asset: Asset object representing the mesh file.\n\n        Examples:\n            &gt;&gt;&gt; asset = Asset.from_file(\"mesh.stl\", client)\n        \"\"\"\n        file_name = os.path.basename(file_path)\n        asset = cls(\n            file_name=file_name.split(\".\")[0],\n            is_from_file=True,\n        )\n\n        asset._file_path = file_path\n        return asset\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.absolute_path","title":"<code>absolute_path: str</code>  <code>property</code>","text":"<p>Returns the file path of the mesh file.</p>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.relative_path","title":"<code>relative_path: str</code>  <code>property</code>","text":"<p>Returns the relative path of the mesh file.</p>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.__init__","title":"<code>__init__(file_name, did='', wtype='', wid='', eid='', client=None, transform=None, is_rigid_assembly=False, partID=None, is_from_file=False)</code>","text":"<p>Initialize the Asset object.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> <code>''</code> <code>wtype</code> <code>str</code> <p>The type of workspace.</p> <code>''</code> <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> <code>''</code> <code>eid</code> <code>str</code> <p>The unique identifier of the element.</p> <code>''</code> <code>client</code> <code>Optional[Client]</code> <p>Onshape API client object.</p> <code>None</code> <code>transform</code> <code>Optional[ndarray]</code> <p>Transformation matrix to apply to the mesh.</p> <code>None</code> <code>file_name</code> <code>str</code> <p>Name of the mesh file.</p> required <code>is_rigid_assembly</code> <code>bool</code> <p>Whether the element is a rigid assembly.</p> <code>False</code> <code>partID</code> <code>Optional[str]</code> <p>The unique identifier of the part.</p> <code>None</code> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def __init__(\n    self,\n    file_name: str,\n    did: str = \"\",\n    wtype: str = \"\",\n    wid: str = \"\",\n    eid: str = \"\",\n    client: Optional[Client] = None,\n    transform: Optional[np.ndarray] = None,\n    is_rigid_assembly: bool = False,\n    partID: Optional[str] = None,\n    is_from_file: bool = False,\n) -&gt; None:\n    \"\"\"\n    Initialize the Asset object.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the element.\n        client: Onshape API client object.\n        transform: Transformation matrix to apply to the mesh.\n        file_name: Name of the mesh file.\n        is_rigid_assembly: Whether the element is a rigid assembly.\n        partID: The unique identifier of the part.\n    \"\"\"\n    self.did = did\n    self.wtype = wtype\n    self.wid = wid\n    self.eid = eid\n    self.client = client\n    self.transform = transform\n    self.file_name = file_name\n    self.is_rigid_assembly = is_rigid_assembly\n    self.partID = partID\n    self.is_from_file = is_from_file\n\n    self._file_path = None\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.download","title":"<code>download()</code>  <code>async</code>","text":"<p>Asynchronously download the mesh file from Onshape, transform it, and save it to a file.</p> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>async def download(self) -&gt; None:\n    \"\"\"\n    Asynchronously download the mesh file from Onshape, transform it, and save it to a file.\n    \"\"\"\n    LOGGER.info(f\"Starting download for {self.file_name}\")\n    try:\n        with io.BytesIO() as buffer:\n            if not self.is_rigid_assembly:\n                await asyncio.to_thread(\n                    self.client.download_part_stl,\n                    did=self.did,\n                    wtype=self.wtype,\n                    wid=self.wid,\n                    eid=self.eid,\n                    partID=self.partID,\n                    buffer=buffer,\n                )\n            else:\n                await asyncio.to_thread(\n                    self.client.download_assembly_stl,\n                    did=self.did,\n                    wtype=self.wtype,\n                    wid=self.wid,\n                    eid=self.eid,\n                    buffer=buffer,\n                )\n\n            buffer.seek(0)\n\n            raw_mesh = stl.mesh.Mesh.from_file(None, fh=buffer)\n            transformed_mesh = transform_mesh(raw_mesh, self.transform)\n            transformed_mesh.save(self.absolute_path)\n\n            LOGGER.info(f\"Mesh file saved: {self.absolute_path}\")\n    except Exception as e:\n        LOGGER.error(f\"Failed to download {self.file_name}: {e}\")\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>Create an Asset object from a mesh file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the mesh file.</p> required <code>client</code> <p>Onshape API client object.</p> required <p>Returns:</p> Name Type Description <code>Asset</code> <code>Asset</code> <p>Asset object representing the mesh file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; asset = Asset.from_file(\"mesh.stl\", client)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str) -&gt; \"Asset\":\n    \"\"\"\n    Create an Asset object from a mesh file.\n\n    Args:\n        file_path: Path to the mesh file.\n        client: Onshape API client object.\n\n    Returns:\n        Asset: Asset object representing the mesh file.\n\n    Examples:\n        &gt;&gt;&gt; asset = Asset.from_file(\"mesh.stl\", client)\n    \"\"\"\n    file_name = os.path.basename(file_path)\n    asset = cls(\n        file_name=file_name.split(\".\")[0],\n        is_from_file=True,\n    )\n\n    asset._file_path = file_path\n    return asset\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Asset.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Returns the XML representation of the asset, which is a mesh file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; asset = Asset(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\",\n...     client=client,\n...     transform=np.eye(4),\n...     file_name=\"mesh.stl\",\n...     is_rigid_assembly=True\n... )\n&gt;&gt;&gt; asset.to_mjcf()\n&lt;mesh name=\"Part-1-1\" file=\"Part-1-1.stl\" /&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Returns the XML representation of the asset, which is a mesh file.\n\n    Examples:\n        &gt;&gt;&gt; asset = Asset(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\",\n        ...     client=client,\n        ...     transform=np.eye(4),\n        ...     file_name=\"mesh.stl\",\n        ...     is_rigid_assembly=True\n        ... )\n        &gt;&gt;&gt; asset.to_mjcf()\n        &lt;mesh name=\"Part-1-1\" file=\"Part-1-1.stl\" /&gt;\n    \"\"\"\n    asset = ET.Element(\"mesh\") if root is None else ET.SubElement(root, \"mesh\")\n    asset.set(\"name\", self.file_name.split(\".\")[0])\n    asset.set(\"file\", self.relative_path)\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client","title":"<code>Client</code>","text":"<p>Represents a client for the Onshape REST API with methods to interact with the API.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>str, default='./.env'</code> <p>Path to the environment file containing the access and secret keys</p> <code>'./.env'</code> <code>base_url</code> <code>str, default='https</code> <p>//cad.onshape.com'): Base URL for the Onshape API</p> <code>BASE_URL</code> <p>Methods:</p> Name Description <code>get_document_metadata</code> <p>Get details for a specified document.</p> <code>get_elements</code> <p>Get list of elements in a document.</p> <code>get_variables</code> <p>Get list of variables in a variable studio.</p> <code>set_variables</code> <p>Set variables in a variable studio.</p> <code>get_assembly</code> <p>Get assembly data for a specified document / workspace / assembly.</p> <code>download_part_stl</code> <p>Download an STL file from a part studio.</p> <code>get_mass_property</code> <p>Get mass properties for a part in a part studio.</p> <code>request</code> <p>Issue a request to the Onshape API.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = Client(\n...     env=\".env\",\n... )\n&gt;&gt;&gt; document_meta_data = client.get_document_metadata(\"document_id\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>class Client:\n    \"\"\"\n    Represents a client for the Onshape REST API with methods to interact with the API.\n\n    Args:\n        env (str, default='./.env'): Path to the environment file containing the access and secret keys\n        base_url (str, default='https://cad.onshape.com'): Base URL for the Onshape API\n\n    Methods:\n        get_document_metadata: Get details for a specified document.\n        get_elements: Get list of elements in a document.\n        get_variables: Get list of variables in a variable studio.\n        set_variables: Set variables in a variable studio.\n        get_assembly: Get assembly data for a specified document / workspace / assembly.\n        download_part_stl: Download an STL file from a part studio.\n        get_mass_property: Get mass properties for a part in a part studio.\n        request: Issue a request to the Onshape API.\n\n    Examples:\n        &gt;&gt;&gt; client = Client(\n        ...     env=\".env\",\n        ... )\n        &gt;&gt;&gt; document_meta_data = client.get_document_metadata(\"document_id\")\n    \"\"\"\n\n    def __init__(self, env: str = \"./.env\", base_url: str = BASE_URL):\n        \"\"\"\n        Initialize the Onshape API client.\n\n        Args:\n            env: Path to the environment file containing the access and secret keys\n            base_url: Base URL for the Onshape API\n\n        Examples:\n            &gt;&gt;&gt; client = Client(\n            ...     env=\".env\",\n            ... )\n        \"\"\"\n\n        self._url = base_url\n        self._access_key, self._secret_key = load_env_variables(env)\n        LOGGER.info(f\"Onshape API initialized with env file: {env}\")\n\n    def set_base_url(self, base_url: str):\n        \"\"\"\n        Set the base URL for the Onshape API.\n\n        Args:\n            base_url: Base URL for the Onshape API\n\n        Examples:\n            &gt;&gt;&gt; client.set_base_url(\"https://cad.onshape.com\")\n        \"\"\"\n        self._url = base_url\n\n    def get_document_metadata(self, did: str) -&gt; DocumentMetaData:\n        \"\"\"\n        Get meta data for a specified document.\n\n        Args:\n            did: The unique identifier of the document.\n\n        Returns:\n            Meta data for the specified document as a DocumentMetaData object or None if the document is not found\n\n        Examples:\n            &gt;&gt;&gt; document_meta_data = client.get_document_metadata(\"document_id\n            &gt;&gt;&gt; print(document_meta_data)\n            DocumentMetaData(\n                defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n                name=\"Document Name\",\n                id=\"a1c1addf75444f54b504f25c\"\n            )\n        \"\"\"\n        if len(did) != 24:\n            raise ValueError(f\"Invalid document ID: {did}\")\n\n        res = self.request(HTTP.GET, \"/api/documents/\" + did)\n\n        if res.status_code == 404:\n            \"\"\"\n            404: Document not found\n                {\n                    \"message\": \"Not found.\",\n                    \"code\": 0,\n                    \"status\": 404,\n                    \"moreInfoUrl\": \"\"\n                }\n            \"\"\"\n            raise ValueError(f\"Document does not exist: {did}\")\n        elif res.status_code == 403:\n            \"\"\"\n            403: Forbidden\n                {\n                    \"message\": \"Forbidden\",\n                    \"code\": 0,\n                    \"status\": 403,\n                    \"moreInfoUrl\": \"\"\n                }\n            \"\"\"\n            raise ValueError(f\"Access forbidden for document: {did}\")\n\n        document = DocumentMetaData.model_validate(res.json())\n        document.name = get_sanitized_name(document.name)\n\n        return document\n\n    def get_elements(self, did: str, wtype: str, wid: str) -&gt; dict[str, Element]:\n        \"\"\"\n        Get a list of all elements in a document.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n\n        Returns:\n            A dictionary of element name and Element object pairs.\n\n        Examples:\n            &gt;&gt;&gt; elements = client.get_elements(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wtype=\"w\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\"\n            ... )\n            &gt;&gt;&gt; print(elements)\n            {\n                \"wheelAndFork\": Element(id='0b0c209535554345432581fe', name='wheelAndFork', elementType='PARTSTUDIO',\n                                         microversionId='9b3be6165c7a2b1f6dd61305'),\n                \"frame\": Element(id='0b0c209535554345432581fe', name='frame', elementType='PARTSTUDIO',\n                                 microversionId='9b3be6165c7a2b1f6dd61305')\n            }\n        \"\"\"\n\n        # /documents/d/{did}/{wvm}/{wvmid}/elements\n        request_path = \"/api/documents/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/elements\"\n        _elements_json = self.request(\n            HTTP.GET,\n            request_path,\n        ).json()\n\n        return {element[\"name\"]: Element.model_validate(element) for element in _elements_json}\n\n    def get_variables(self, did: str, wid: str, eid: str) -&gt; dict[str, Variable]:\n        \"\"\"\n        Get a list of variables in a variable studio within a document.\n\n        Args:\n            did: The unique identifier of the document.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the variable studio.\n\n        Returns:\n            A dictionary of variable name and Variable object pairs.\n\n        Examples:\n            &gt;&gt;&gt; variables = client.get_variables(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"cba5e3ca026547f34f8d9f0f\"\n            ... )\n            &gt;&gt;&gt; print(variables)\n            {\n                \"forkAngle\": Variable(\n                    type='ANGLE',\n                    name='forkAngle',\n                    value=None,\n                    description='Fork angle for front wheel assembly in deg',\n                    expression='15 deg'\n                )\n            }\n        \"\"\"\n        request_path = \"/api/variables/d/\" + did + \"/w/\" + wid + \"/e/\" + eid + \"/variables\"\n\n        _variables_json = self.request(\n            HTTP.GET,\n            request_path,\n        ).json()\n\n        return {variable[\"name\"]: Variable.model_validate(variable) for variable in _variables_json[0][\"variables\"]}\n\n    def set_variables(self, did: str, wid: str, eid: str, variables: dict[str, str]) -&gt; requests.Response:\n        \"\"\"\n        Set values for variables of a variable studio in a document.\n\n        Args:\n            did: The unique identifier of the document.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the variable studio.\n            variables: A dictionary of variable name and expression pairs.\n\n        Returns:\n            requests.Response: Response from Onshape API after setting the variables.\n\n        Examples:\n            &gt;&gt;&gt; variables = {\n            ...     \"forkAngle\": \"15 deg\",\n            ...     \"wheelRadius\": \"0.5 m\"\n            ... }\n            &gt;&gt;&gt; client.set_variables(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"cba5e3ca026547f34f8d9f0f\",\n            ...     variables=variables\n            ... )\n            &lt;Response [200]&gt;\n        \"\"\"\n\n        payload = [variable.model_dump() for variable in variables.values()]\n\n        # api/v9/variables/d/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/cba5e3ca026547f34f8d9f0f/variables\n        request_path = \"/api/variables/d/\" + did + \"/w/\" + wid + \"/e/\" + eid + \"/variables\"\n\n        return self.request(\n            HTTP.POST,\n            request_path,\n            body=payload,\n        )\n\n    def get_assembly_name(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        configuration: str = \"default\",\n    ) -&gt; str:\n        \"\"\"\n        Get assembly name for a specified document / workspace / assembly.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the assembly.\n\n        Returns:\n            str: Assembly name\n\n        Examples:\n            &gt;&gt;&gt; assembly_name = client.get_assembly_name(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wtype=\"w\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\"\n            ... )\n            &gt;&gt;&gt; print(assembly_name)\n            \"Assembly Name\"\n        \"\"\"\n        request_path = \"/api/metadata/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n        result_json = self.request(\n            HTTP.GET,\n            request_path,\n            query={\n                \"inferMetadataOwner\": \"false\",\n                \"includeComputedProperties\": \"false\",\n                \"includeComputedAssemblyProperties\": \"false\",\n                \"thumbnail\": \"false\",\n                \"configuration\": configuration,\n            },\n            log_response=False,\n        ).json()\n\n        name = None\n        try:\n            name = result_json[\"properties\"][0][\"value\"]\n            name = get_sanitized_name(name)\n\n        except KeyError:\n            LOGGER.warning(f\"Assembly name not found for document: {did}\")\n\n        return name\n\n    def get_root_assembly(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        configuration: str = \"default\",\n        with_mass_properties: bool = False,\n        log_response: bool = True,\n        with_meta_data: bool = True,\n    ) -&gt; RootAssembly:\n        \"\"\"\n        Get root assembly data for a specified document / workspace / element.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the element.\n            configuration: The configuration of the assembly.\n            log_response: Log the response from the API request.\n\n        Returns:\n            RootAssembly: RootAssembly object containing the root assembly data\n\n        Examples:\n            &gt;&gt;&gt; root_assembly = client.get_root_assembly(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wtype=\"w\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\"\n            ... )\n            &gt;&gt;&gt; print(root_assembly)\n            RootAssembly(\n                instances=[...],\n                patterns=[...],\n                features=[...],\n                occurrences=[...],\n                fullConfiguration=\"default\",\n                configuration=\"default\",\n                documentId=\"a1c1addf75444f54b504f25c\",\n                elementId=\"0b0c209535554345432581fe\",\n                documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n            )\n        \"\"\"\n        request_path = \"/api/assemblies/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n        res = self.request(\n            HTTP.GET,\n            request_path,\n            query={\n                \"includeMateFeatures\": \"true\",\n                \"includeMateConnectors\": \"true\",\n                \"includeNonSolids\": \"false\",\n                \"configuration\": configuration,\n            },\n            log_response=log_response,\n        )\n\n        if res.status_code == 401:\n            LOGGER.warning(f\"Unauthorized access to document: {did}\")\n            LOGGER.warning(\"Please check the API keys in your env file.\")\n            exit(1)\n\n        if res.status_code == 404:\n            LOGGER.error(f\"Assembly not found: {did}\")\n            LOGGER.error(\n                generate_url(\n                    base_url=self._url,\n                    did=did,\n                    wtype=wtype,\n                    wid=wid,\n                    eid=eid,\n                )\n            )\n            exit(1)\n\n        assembly_json = res.json()\n        assembly = RootAssembly.model_validate(assembly_json[\"rootAssembly\"])\n\n        if with_mass_properties:\n            assembly.MassProperty = self.get_assembly_mass_properties(\n                did=did,\n                wid=wid,\n                eid=eid,\n                wtype=wtype,\n            )\n\n        if with_meta_data:\n            assembly.documentMetaData = self.get_document_metadata(did)\n\n        return assembly\n\n    def get_assembly(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        configuration: str = \"default\",\n        log_response: bool = True,\n        with_meta_data: bool = True,\n    ) -&gt; Assembly:\n        \"\"\"\n        Get assembly data for a specified document / workspace / assembly.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the assembly.\n            configuration: The configuration of the assembly.\n            log_response: Log the response from the API request.\n            with_meta_data: Include meta data in the assembly data.\n\n        Returns:\n            Assembly: Assembly object containing the assembly data\n\n        Examples:\n            &gt;&gt;&gt; assembly = client.get_assembly(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wtype=\"w\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\"\n            ... )\n            &gt;&gt;&gt; print(assembly)\n            Assembly(\n                rootAssembly=RootAssembly(\n                    instances=[...],\n                    patterns=[...],\n                    features=[...],\n                    occurrences=[...],\n                    fullConfiguration=\"default\",\n                    configuration=\"default\",\n                    documentId=\"a1c1addf75444f54b504f25c\",\n                    elementId=\"0b0c209535554345432581fe\",\n                    documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n                ),\n                subAssemblies=[...],\n                parts=[...],\n                partStudioFeatures=[...],\n                document=Document(\n                    url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n                    did=\"a1c1addf75444f54b504f25c\",\n                    wtype=\"w\",\n                    wid=\"0d17b8ebb2a4c76be9fff3c7\",\n                    eid=\"a86aaf34d2f4353288df8812\"\n                )\n            )\n        \"\"\"\n        request_path = \"/api/assemblies/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n        res = self.request(\n            HTTP.GET,\n            request_path,\n            query={\n                \"includeMateFeatures\": \"true\",\n                \"includeMateConnectors\": \"true\",\n                \"includeNonSolids\": \"false\",\n                \"configuration\": configuration,\n            },\n            log_response=log_response,\n        )\n\n        if res.status_code == 401 or res.status_code == 403:\n            LOGGER.warning(f\"Unauthorized access to document: {did}\")\n            LOGGER.warning(\"Please check the API keys in your env file.\")\n            exit(1)\n\n        if res.status_code == 404:\n            LOGGER.error(f\"Assembly not found: {did}\")\n            LOGGER.error(\n                generate_url(\n                    base_url=self._url,\n                    did=did,\n                    wtype=wtype,\n                    wid=wid,\n                    eid=eid,\n                )\n            )\n            exit(1)\n\n        assembly = Assembly.model_validate(res.json())\n        document = Document(did=did, wtype=wtype, wid=wid, eid=eid)\n        assembly.document = document\n\n        if with_meta_data:\n            assembly.name = self.get_assembly_name(did, wtype, wid, eid, configuration)\n            document_meta_data = self.get_document_metadata(did)\n            assembly.document.name = document_meta_data.name\n\n        return assembly\n\n    def download_assembly_stl(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        buffer: BinaryIO,\n        configuration: str = \"default\",\n    ):\n        \"\"\"\n        Download an STL file from an assembly. The file is written to the buffer.\n\n        Args:\n            did: The unique identifier of the document.\n            wtype: The type of workspace.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the element.\n            configuration: The configuration of the assembly.\n\n        \"\"\"\n        req_headers = {\"Accept\": \"application/vnd.onshape.v1+octet-stream\"}\n        request_path = f\"/api/assemblies/d/{did}/{wtype}/{wid}/e/{eid}/translations\"\n\n        # Initiate the translation\n        payload = {\n            \"formatName\": \"STL\",\n            \"storeInDocument\": \"false\",\n        }\n        response = self.request(\n            HTTP.POST,\n            path=request_path,\n            body=payload,\n            log_response=False,\n        )\n\n        if response.status_code == 200:\n            job_info = response.json()\n            translation_id = job_info.get(\"id\")\n            if not translation_id:\n                LOGGER.error(\"Translation job ID not found in response.\")\n                return None\n\n            status_path = f\"/api/translations/{translation_id}\"\n            while True:\n                status_response = self.request(HTTP.GET, path=status_path)\n                if status_response.status_code != 200:\n                    LOGGER.error(f\"Failed to get translation status: {status_response.text}\")\n                    return None\n\n                status_info = status_response.json()\n                request_state = status_info.get(\"requestState\")\n                LOGGER.info(f\"Current status: {request_state}\")\n                if request_state == \"DONE\":\n                    LOGGER.info(\"Translation job completed.\")\n                    break\n                elif request_state == \"FAILED\":\n                    LOGGER.error(\"Translation job failed.\")\n                    return None\n                time.sleep(1)\n\n            fid = status_info.get(\"resultExternalDataIds\")[0]\n            data_path = f\"/api/documents/d/{did}/externaldata/{fid}\"\n\n            download_response = self.request(\n                HTTP.GET,\n                path=data_path,\n                headers=req_headers,\n                log_response=False,\n            )\n            if download_response.status_code == 200:\n                buffer.write(download_response.content)\n                LOGGER.info(\"STL file downloaded successfully.\")\n                return buffer\n            else:\n                LOGGER.error(f\"Failed to download STL file: {download_response.text}\")\n                return None\n\n        else:\n            LOGGER.info(f\"Failed to download assembly: {response.status_code} - {response.text}\")\n            LOGGER.info(\n                generate_url(\n                    base_url=self._url,\n                    did=did,\n                    wtype=wtype,\n                    wid=wid,\n                    eid=eid,\n                )\n            )\n\n        return buffer\n\n    def download_part_stl(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        partID: str,\n        buffer: BinaryIO,\n    ) -&gt; BinaryIO:\n        \"\"\"\n        Download an STL file from a part studio. The file is written to the buffer.\n\n        Args:\n            did: The unique identifier of the document.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the element.\n            partID: The unique identifier of the part.\n            buffer: BinaryIO object to write the STL file to.\n            wtype: The type of workspace.\n\n        Returns:\n            BinaryIO: BinaryIO object containing the STL file\n\n        Examples:\n            &gt;&gt;&gt; with io.BytesIO() as buffer:\n            ...     client.download_part_stl(\n            ...         \"a1c1addf75444f54b504f25c\",\n            ...         \"0d17b8ebb2a4c76be9fff3c7\",\n            ...         \"a86aaf34d2f4353288df8812\",\n            ...         \"0b0c209535554345432581fe\",\n            ...         buffer,\n            ...         \"w\",\n            ...         \"0d17b8ebb2a4c76be9fff3c7\"\n            ...     )\n            &gt;&gt;&gt; buffer.seek(0)\n            &gt;&gt;&gt; raw_mesh = stl.mesh.Mesh.from_file(None, fh=buffer)\n            &gt;&gt;&gt; raw_mesh.save(\"mesh.stl\")\n        \"\"\"\n        # TODO: version id seems to always work, should this default behavior be changed?\n        req_headers = {\"Accept\": \"application/vnd.onshape.v1+octet-stream\"}\n        request_path = f\"/api/parts/d/{did}/{wtype}/{wid}/e/{eid}/partid/{partID}/stl\"\n        _query = {\n            \"mode\": \"binary\",\n            \"grouping\": True,\n            \"units\": \"meter\",\n        }\n        response = self.request(\n            HTTP.GET,\n            path=request_path,\n            headers=req_headers,\n            query=_query,\n            log_response=False,\n        )\n        if response.status_code == 200:\n            buffer.write(response.content)\n        else:\n            url = generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=wtype,\n                wid=wid,\n                eid=eid,\n            )\n            LOGGER.info(f\"{url}\")\n            LOGGER.info(f\"Failed to download STL file: {response.status_code} - {response.text}\")\n\n        return buffer\n\n    def get_assembly_mass_properties(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n    ) -&gt; MassProperties:\n        \"\"\"\n        Get mass properties of a rigid assembly in a document.\n\n        Args:\n            did: The unique identifier of the document.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the rigid assembly.\n            wtype: The type of workspace.\n\n        Returns:\n            MassProperties object containing the mass properties of the assembly.\n\n        Examples:\n            &gt;&gt;&gt; mass_properties = client.get_assembly_mass_properties(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\",\n            ...     wtype=\"w\"\n            ... )\n            &gt;&gt;&gt; print(mass_properties)\n            MassProperties(\n                volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n                mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n                centroid=[...],\n                inertia=[...],\n                principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n                principalAxes=[...]\n            )\n        \"\"\"\n        request_path = f\"/api/assemblies/d/{did}/{wtype}/{wid}/e/{eid}/massproperties\"\n        res = self.request(HTTP.GET, request_path, log_response=False)\n\n        if res.status_code == 404:\n            url = generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=\"w\",\n                wid=wid,\n                eid=eid,\n            )\n            raise ValueError(f\"Assembly: {url} does not have a mass property\")\n\n        return MassProperties.model_validate(res.json())\n\n    def get_mass_property(\n        self,\n        did: str,\n        wtype: str,\n        wid: str,\n        eid: str,\n        partID: str,\n    ) -&gt; MassProperties:\n        \"\"\"\n        Get mass properties of a part in a part studio.\n\n        Args:\n            did: The unique identifier of the document.\n            wid: The unique identifier of the workspace.\n            eid: The unique identifier of the element.\n            partID: The identifier of the part.\n            wtype: The type of workspace.\n\n        Returns:\n            MassProperties object containing the mass properties of the part.\n\n        Examples:\n            &gt;&gt;&gt; mass_properties = client.get_mass_property(\n            ...     did=\"a1c1addf75444f54b504f25c\",\n            ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            ...     eid=\"a86aaf34d2f4353288df8812\",\n            ...     partID=\"0b0c209535554345432581fe\"\n            ...     wtype=\"w\"\n            ... )\n            &gt;&gt;&gt; print(mass_properties)\n            MassProperties(\n                volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n                mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n                centroid=[...],\n                inertia=[...],\n                principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n                principalAxes=[...]\n            )\n        \"\"\"\n        # TODO: version id seems to always work, should this default behavior be changed?\n        request_path = f\"/api/parts/d/{did}/{wtype}/{wid}/e/{eid}/partid/{partID}/massproperties\"\n        res = self.request(HTTP.GET, request_path, {\"useMassPropertiesOverrides\": True}, log_response=False)\n\n        if res.status_code == 404:\n            # TODO: There doesn't seem to be a way to assign material to a part currently\n            # It is possible that the workspace got deleted\n            url = generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=wtype,\n                wid=wid,\n                eid=eid,\n            )\n            raise ValueError(f\"Part: {url} does not have a material assigned or the part is not found\")\n\n        elif res.status_code == 429:\n            raise ValueError(f\"Too many requests, please retry after {res.headers['Retry-After']} seconds\")\n\n        resonse_json = res.json()\n\n        if \"bodies\" not in resonse_json:\n            raise KeyError(f\"Bodies not found in response, broken part? {partID}\")\n\n        return MassProperties.model_validate(resonse_json[\"bodies\"][partID])\n\n    def request(\n        self,\n        method: HTTP,\n        path: str,\n        query: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, Any]] = None,\n        body: Optional[dict[str, Any]] = None,\n        base_url: Optional[str] = None,\n        log_response: bool = True,\n        timeout: int = 50,\n    ) -&gt; requests.Response:\n        \"\"\"\n        Send a request to the Onshape API.\n\n        Args:\n            method: HTTP method (GET, POST, DELETE)\n            path: URL path for the request\n            query: Query string in key-value pairs\n            headers: Additional headers for the request\n            body: Body of the request\n            base_url: Base URL for the request\n            log_response: Log the response from the API request\n\n        Returns:\n            requests.Response: Response from the Onshape API request\n        \"\"\"\n        if query is None:\n            query = {}\n        if headers is None:\n            headers = {}\n        if base_url is None:\n            base_url = self._url\n\n        req_headers = self._make_headers(method, path, query, headers)\n        url = self._build_url(base_url, path, query)\n\n        LOGGER.debug(f\"Request body: {body}\")\n        LOGGER.debug(f\"Request headers: {req_headers}\")\n        LOGGER.debug(f\"Request URL: {url}\")\n\n        res = self._send_request(method, url, req_headers, body, timeout)\n\n        if res.status_code == 307:\n            return self._handle_redirect(res, method, headers, log_response)\n        else:\n            if log_response:\n                self._log_response(res)\n\n        return res\n\n    def _build_url(self, base_url, path, query):\n        return base_url + path + \"?\" + urlencode(query)\n\n    def _send_request(self, method, url, headers, body, timeout):\n        return requests.request(\n            method,\n            url,\n            headers=headers,\n            json=body,\n            allow_redirects=False,\n            stream=True,\n            timeout=timeout,  # Specify an appropriate timeout value in seconds\n        )\n\n    def _handle_redirect(self, res, method, headers, log_response=True):\n        location = urlparse(res.headers[\"Location\"])\n        querystring = parse_qs(location.query)\n\n        LOGGER.debug(f\"Request redirected to: {location.geturl()}\")\n\n        new_query = {key: querystring[key][0] for key in querystring}\n        new_base_url = location.scheme + \"://\" + location.netloc\n\n        return self.request(\n            method, location.path, query=new_query, headers=headers, base_url=new_base_url, log_response=log_response\n        )\n\n    def _log_response(self, res):\n        try:\n            if not 200 &lt;= res.status_code &lt;= 206:\n                LOGGER.debug(f\"Request failed, details: {res.text}\")\n            else:\n                LOGGER.debug(f\"Request succeeded, details: {res.text}\")\n        except UnicodeEncodeError as e:\n            LOGGER.error(f\"UnicodeEncodeError: {e}\")\n\n    def _make_auth(self, method, date, nonce, path, query=None, ctype=\"application/json\"):\n        if query is None:\n            query = {}\n        query = urlencode(query)\n\n        hmac_str = (\n            str(method + \"\\n\" + nonce + \"\\n\" + date + \"\\n\" + ctype + \"\\n\" + path + \"\\n\" + query + \"\\n\")\n            .lower()\n            .encode(\"utf-8\")\n        )\n\n        signature = base64.b64encode(\n            hmac.new(self._secret_key.encode(\"utf-8\"), hmac_str, digestmod=hashlib.sha256).digest()\n        )\n        auth = \"On \" + self._access_key + \":HmacSHA256:\" + signature.decode(\"utf-8\")\n\n        LOGGER.debug(f\"query: {query}, hmac_str: {hmac_str}, signature: {signature}, auth: {auth}\")\n\n        return auth\n\n    def _make_headers(self, method, path, query=None, headers=None):\n        if headers is None:\n            headers = {}\n        if query is None:\n            query = {}\n        date = datetime.datetime.utcnow().strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n        nonce = make_nonce()\n        ctype = headers.get(\"Content-Type\") if headers.get(\"Content-Type\") else \"application/json\"\n\n        auth = self._make_auth(method, date, nonce, path, query=query, ctype=ctype)\n\n        req_headers = {\n            \"Content-Type\": \"application/json\",\n            \"Date\": date,\n            \"On-Nonce\": nonce,\n            \"Authorization\": auth,\n            \"User-Agent\": \"Onshape Python Sample App\",\n            \"Accept\": \"application/json\",\n        }\n\n        # add in user-defined headers\n        for h in headers:\n            req_headers[h] = headers[h]\n\n        return req_headers\n\n    @property\n    def base_url(self):\n        return self._url\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.__init__","title":"<code>__init__(env='./.env', base_url=BASE_URL)</code>","text":"<p>Initialize the Onshape API client.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>str</code> <p>Path to the environment file containing the access and secret keys</p> <code>'./.env'</code> <code>base_url</code> <code>str</code> <p>Base URL for the Onshape API</p> <code>BASE_URL</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = Client(\n...     env=\".env\",\n... )\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def __init__(self, env: str = \"./.env\", base_url: str = BASE_URL):\n    \"\"\"\n    Initialize the Onshape API client.\n\n    Args:\n        env: Path to the environment file containing the access and secret keys\n        base_url: Base URL for the Onshape API\n\n    Examples:\n        &gt;&gt;&gt; client = Client(\n        ...     env=\".env\",\n        ... )\n    \"\"\"\n\n    self._url = base_url\n    self._access_key, self._secret_key = load_env_variables(env)\n    LOGGER.info(f\"Onshape API initialized with env file: {env}\")\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.download_assembly_stl","title":"<code>download_assembly_stl(did, wtype, wid, eid, buffer, configuration='default')</code>","text":"<p>Download an STL file from an assembly. The file is written to the buffer.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the element.</p> required <code>configuration</code> <code>str</code> <p>The configuration of the assembly.</p> <code>'default'</code> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def download_assembly_stl(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    buffer: BinaryIO,\n    configuration: str = \"default\",\n):\n    \"\"\"\n    Download an STL file from an assembly. The file is written to the buffer.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the element.\n        configuration: The configuration of the assembly.\n\n    \"\"\"\n    req_headers = {\"Accept\": \"application/vnd.onshape.v1+octet-stream\"}\n    request_path = f\"/api/assemblies/d/{did}/{wtype}/{wid}/e/{eid}/translations\"\n\n    # Initiate the translation\n    payload = {\n        \"formatName\": \"STL\",\n        \"storeInDocument\": \"false\",\n    }\n    response = self.request(\n        HTTP.POST,\n        path=request_path,\n        body=payload,\n        log_response=False,\n    )\n\n    if response.status_code == 200:\n        job_info = response.json()\n        translation_id = job_info.get(\"id\")\n        if not translation_id:\n            LOGGER.error(\"Translation job ID not found in response.\")\n            return None\n\n        status_path = f\"/api/translations/{translation_id}\"\n        while True:\n            status_response = self.request(HTTP.GET, path=status_path)\n            if status_response.status_code != 200:\n                LOGGER.error(f\"Failed to get translation status: {status_response.text}\")\n                return None\n\n            status_info = status_response.json()\n            request_state = status_info.get(\"requestState\")\n            LOGGER.info(f\"Current status: {request_state}\")\n            if request_state == \"DONE\":\n                LOGGER.info(\"Translation job completed.\")\n                break\n            elif request_state == \"FAILED\":\n                LOGGER.error(\"Translation job failed.\")\n                return None\n            time.sleep(1)\n\n        fid = status_info.get(\"resultExternalDataIds\")[0]\n        data_path = f\"/api/documents/d/{did}/externaldata/{fid}\"\n\n        download_response = self.request(\n            HTTP.GET,\n            path=data_path,\n            headers=req_headers,\n            log_response=False,\n        )\n        if download_response.status_code == 200:\n            buffer.write(download_response.content)\n            LOGGER.info(\"STL file downloaded successfully.\")\n            return buffer\n        else:\n            LOGGER.error(f\"Failed to download STL file: {download_response.text}\")\n            return None\n\n    else:\n        LOGGER.info(f\"Failed to download assembly: {response.status_code} - {response.text}\")\n        LOGGER.info(\n            generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=wtype,\n                wid=wid,\n                eid=eid,\n            )\n        )\n\n    return buffer\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.download_part_stl","title":"<code>download_part_stl(did, wtype, wid, eid, partID, buffer)</code>","text":"<p>Download an STL file from a part studio. The file is written to the buffer.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the element.</p> required <code>partID</code> <code>str</code> <p>The unique identifier of the part.</p> required <code>buffer</code> <code>BinaryIO</code> <p>BinaryIO object to write the STL file to.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <p>Returns:</p> Name Type Description <code>BinaryIO</code> <code>BinaryIO</code> <p>BinaryIO object containing the STL file</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with io.BytesIO() as buffer:\n...     client.download_part_stl(\n...         \"a1c1addf75444f54b504f25c\",\n...         \"0d17b8ebb2a4c76be9fff3c7\",\n...         \"a86aaf34d2f4353288df8812\",\n...         \"0b0c209535554345432581fe\",\n...         buffer,\n...         \"w\",\n...         \"0d17b8ebb2a4c76be9fff3c7\"\n...     )\n&gt;&gt;&gt; buffer.seek(0)\n&gt;&gt;&gt; raw_mesh = stl.mesh.Mesh.from_file(None, fh=buffer)\n&gt;&gt;&gt; raw_mesh.save(\"mesh.stl\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def download_part_stl(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    partID: str,\n    buffer: BinaryIO,\n) -&gt; BinaryIO:\n    \"\"\"\n    Download an STL file from a part studio. The file is written to the buffer.\n\n    Args:\n        did: The unique identifier of the document.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the element.\n        partID: The unique identifier of the part.\n        buffer: BinaryIO object to write the STL file to.\n        wtype: The type of workspace.\n\n    Returns:\n        BinaryIO: BinaryIO object containing the STL file\n\n    Examples:\n        &gt;&gt;&gt; with io.BytesIO() as buffer:\n        ...     client.download_part_stl(\n        ...         \"a1c1addf75444f54b504f25c\",\n        ...         \"0d17b8ebb2a4c76be9fff3c7\",\n        ...         \"a86aaf34d2f4353288df8812\",\n        ...         \"0b0c209535554345432581fe\",\n        ...         buffer,\n        ...         \"w\",\n        ...         \"0d17b8ebb2a4c76be9fff3c7\"\n        ...     )\n        &gt;&gt;&gt; buffer.seek(0)\n        &gt;&gt;&gt; raw_mesh = stl.mesh.Mesh.from_file(None, fh=buffer)\n        &gt;&gt;&gt; raw_mesh.save(\"mesh.stl\")\n    \"\"\"\n    # TODO: version id seems to always work, should this default behavior be changed?\n    req_headers = {\"Accept\": \"application/vnd.onshape.v1+octet-stream\"}\n    request_path = f\"/api/parts/d/{did}/{wtype}/{wid}/e/{eid}/partid/{partID}/stl\"\n    _query = {\n        \"mode\": \"binary\",\n        \"grouping\": True,\n        \"units\": \"meter\",\n    }\n    response = self.request(\n        HTTP.GET,\n        path=request_path,\n        headers=req_headers,\n        query=_query,\n        log_response=False,\n    )\n    if response.status_code == 200:\n        buffer.write(response.content)\n    else:\n        url = generate_url(\n            base_url=self._url,\n            did=did,\n            wtype=wtype,\n            wid=wid,\n            eid=eid,\n        )\n        LOGGER.info(f\"{url}\")\n        LOGGER.info(f\"Failed to download STL file: {response.status_code} - {response.text}\")\n\n    return buffer\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_assembly","title":"<code>get_assembly(did, wtype, wid, eid, configuration='default', log_response=True, with_meta_data=True)</code>","text":"<p>Get assembly data for a specified document / workspace / assembly.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the assembly.</p> required <code>configuration</code> <code>str</code> <p>The configuration of the assembly.</p> <code>'default'</code> <code>log_response</code> <code>bool</code> <p>Log the response from the API request.</p> <code>True</code> <code>with_meta_data</code> <code>bool</code> <p>Include meta data in the assembly data.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Assembly</code> <code>Assembly</code> <p>Assembly object containing the assembly data</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assembly = client.get_assembly(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\"\n... )\n&gt;&gt;&gt; print(assembly)\nAssembly(\n    rootAssembly=RootAssembly(\n        instances=[...],\n        patterns=[...],\n        features=[...],\n        occurrences=[...],\n        fullConfiguration=\"default\",\n        configuration=\"default\",\n        documentId=\"a1c1addf75444f54b504f25c\",\n        elementId=\"0b0c209535554345432581fe\",\n        documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n    ),\n    subAssemblies=[...],\n    parts=[...],\n    partStudioFeatures=[...],\n    document=Document(\n        url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n        did=\"a1c1addf75444f54b504f25c\",\n        wtype=\"w\",\n        wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        eid=\"a86aaf34d2f4353288df8812\"\n    )\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_assembly(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    configuration: str = \"default\",\n    log_response: bool = True,\n    with_meta_data: bool = True,\n) -&gt; Assembly:\n    \"\"\"\n    Get assembly data for a specified document / workspace / assembly.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the assembly.\n        configuration: The configuration of the assembly.\n        log_response: Log the response from the API request.\n        with_meta_data: Include meta data in the assembly data.\n\n    Returns:\n        Assembly: Assembly object containing the assembly data\n\n    Examples:\n        &gt;&gt;&gt; assembly = client.get_assembly(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\"\n        ... )\n        &gt;&gt;&gt; print(assembly)\n        Assembly(\n            rootAssembly=RootAssembly(\n                instances=[...],\n                patterns=[...],\n                features=[...],\n                occurrences=[...],\n                fullConfiguration=\"default\",\n                configuration=\"default\",\n                documentId=\"a1c1addf75444f54b504f25c\",\n                elementId=\"0b0c209535554345432581fe\",\n                documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n            ),\n            subAssemblies=[...],\n            parts=[...],\n            partStudioFeatures=[...],\n            document=Document(\n                url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n                did=\"a1c1addf75444f54b504f25c\",\n                wtype=\"w\",\n                wid=\"0d17b8ebb2a4c76be9fff3c7\",\n                eid=\"a86aaf34d2f4353288df8812\"\n            )\n        )\n    \"\"\"\n    request_path = \"/api/assemblies/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n    res = self.request(\n        HTTP.GET,\n        request_path,\n        query={\n            \"includeMateFeatures\": \"true\",\n            \"includeMateConnectors\": \"true\",\n            \"includeNonSolids\": \"false\",\n            \"configuration\": configuration,\n        },\n        log_response=log_response,\n    )\n\n    if res.status_code == 401 or res.status_code == 403:\n        LOGGER.warning(f\"Unauthorized access to document: {did}\")\n        LOGGER.warning(\"Please check the API keys in your env file.\")\n        exit(1)\n\n    if res.status_code == 404:\n        LOGGER.error(f\"Assembly not found: {did}\")\n        LOGGER.error(\n            generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=wtype,\n                wid=wid,\n                eid=eid,\n            )\n        )\n        exit(1)\n\n    assembly = Assembly.model_validate(res.json())\n    document = Document(did=did, wtype=wtype, wid=wid, eid=eid)\n    assembly.document = document\n\n    if with_meta_data:\n        assembly.name = self.get_assembly_name(did, wtype, wid, eid, configuration)\n        document_meta_data = self.get_document_metadata(did)\n        assembly.document.name = document_meta_data.name\n\n    return assembly\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_assembly_mass_properties","title":"<code>get_assembly_mass_properties(did, wtype, wid, eid)</code>","text":"<p>Get mass properties of a rigid assembly in a document.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the rigid assembly.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <p>Returns:</p> Type Description <code>MassProperties</code> <p>MassProperties object containing the mass properties of the assembly.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties = client.get_assembly_mass_properties(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\",\n...     wtype=\"w\"\n... )\n&gt;&gt;&gt; print(mass_properties)\nMassProperties(\n    volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n    mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n    centroid=[...],\n    inertia=[...],\n    principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n    principalAxes=[...]\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_assembly_mass_properties(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n) -&gt; MassProperties:\n    \"\"\"\n    Get mass properties of a rigid assembly in a document.\n\n    Args:\n        did: The unique identifier of the document.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the rigid assembly.\n        wtype: The type of workspace.\n\n    Returns:\n        MassProperties object containing the mass properties of the assembly.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties = client.get_assembly_mass_properties(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\",\n        ...     wtype=\"w\"\n        ... )\n        &gt;&gt;&gt; print(mass_properties)\n        MassProperties(\n            volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n            mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n            centroid=[...],\n            inertia=[...],\n            principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n            principalAxes=[...]\n        )\n    \"\"\"\n    request_path = f\"/api/assemblies/d/{did}/{wtype}/{wid}/e/{eid}/massproperties\"\n    res = self.request(HTTP.GET, request_path, log_response=False)\n\n    if res.status_code == 404:\n        url = generate_url(\n            base_url=self._url,\n            did=did,\n            wtype=\"w\",\n            wid=wid,\n            eid=eid,\n        )\n        raise ValueError(f\"Assembly: {url} does not have a mass property\")\n\n    return MassProperties.model_validate(res.json())\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_assembly_name","title":"<code>get_assembly_name(did, wtype, wid, eid, configuration='default')</code>","text":"<p>Get assembly name for a specified document / workspace / assembly.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the assembly.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Assembly name</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assembly_name = client.get_assembly_name(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\"\n... )\n&gt;&gt;&gt; print(assembly_name)\n\"Assembly Name\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_assembly_name(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    configuration: str = \"default\",\n) -&gt; str:\n    \"\"\"\n    Get assembly name for a specified document / workspace / assembly.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the assembly.\n\n    Returns:\n        str: Assembly name\n\n    Examples:\n        &gt;&gt;&gt; assembly_name = client.get_assembly_name(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\"\n        ... )\n        &gt;&gt;&gt; print(assembly_name)\n        \"Assembly Name\"\n    \"\"\"\n    request_path = \"/api/metadata/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n    result_json = self.request(\n        HTTP.GET,\n        request_path,\n        query={\n            \"inferMetadataOwner\": \"false\",\n            \"includeComputedProperties\": \"false\",\n            \"includeComputedAssemblyProperties\": \"false\",\n            \"thumbnail\": \"false\",\n            \"configuration\": configuration,\n        },\n        log_response=False,\n    ).json()\n\n    name = None\n    try:\n        name = result_json[\"properties\"][0][\"value\"]\n        name = get_sanitized_name(name)\n\n    except KeyError:\n        LOGGER.warning(f\"Assembly name not found for document: {did}\")\n\n    return name\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_document_metadata","title":"<code>get_document_metadata(did)</code>","text":"<p>Get meta data for a specified document.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <p>Returns:</p> Type Description <code>DocumentMetaData</code> <p>Meta data for the specified document as a DocumentMetaData object or None if the document is not found</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document_meta_data = client.get_document_metadata(\"document_id\n&gt;&gt;&gt; print(document_meta_data)\nDocumentMetaData(\n    defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n    name=\"Document Name\",\n    id=\"a1c1addf75444f54b504f25c\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_document_metadata(self, did: str) -&gt; DocumentMetaData:\n    \"\"\"\n    Get meta data for a specified document.\n\n    Args:\n        did: The unique identifier of the document.\n\n    Returns:\n        Meta data for the specified document as a DocumentMetaData object or None if the document is not found\n\n    Examples:\n        &gt;&gt;&gt; document_meta_data = client.get_document_metadata(\"document_id\n        &gt;&gt;&gt; print(document_meta_data)\n        DocumentMetaData(\n            defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n            name=\"Document Name\",\n            id=\"a1c1addf75444f54b504f25c\"\n        )\n    \"\"\"\n    if len(did) != 24:\n        raise ValueError(f\"Invalid document ID: {did}\")\n\n    res = self.request(HTTP.GET, \"/api/documents/\" + did)\n\n    if res.status_code == 404:\n        \"\"\"\n        404: Document not found\n            {\n                \"message\": \"Not found.\",\n                \"code\": 0,\n                \"status\": 404,\n                \"moreInfoUrl\": \"\"\n            }\n        \"\"\"\n        raise ValueError(f\"Document does not exist: {did}\")\n    elif res.status_code == 403:\n        \"\"\"\n        403: Forbidden\n            {\n                \"message\": \"Forbidden\",\n                \"code\": 0,\n                \"status\": 403,\n                \"moreInfoUrl\": \"\"\n            }\n        \"\"\"\n        raise ValueError(f\"Access forbidden for document: {did}\")\n\n    document = DocumentMetaData.model_validate(res.json())\n    document.name = get_sanitized_name(document.name)\n\n    return document\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_elements","title":"<code>get_elements(did, wtype, wid)</code>","text":"<p>Get a list of all elements in a document.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <p>Returns:</p> Type Description <code>dict[str, Element]</code> <p>A dictionary of element name and Element object pairs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; elements = client.get_elements(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\"\n... )\n&gt;&gt;&gt; print(elements)\n{\n    \"wheelAndFork\": Element(id='0b0c209535554345432581fe', name='wheelAndFork', elementType='PARTSTUDIO',\n                             microversionId='9b3be6165c7a2b1f6dd61305'),\n    \"frame\": Element(id='0b0c209535554345432581fe', name='frame', elementType='PARTSTUDIO',\n                     microversionId='9b3be6165c7a2b1f6dd61305')\n}\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_elements(self, did: str, wtype: str, wid: str) -&gt; dict[str, Element]:\n    \"\"\"\n    Get a list of all elements in a document.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n\n    Returns:\n        A dictionary of element name and Element object pairs.\n\n    Examples:\n        &gt;&gt;&gt; elements = client.get_elements(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\"\n        ... )\n        &gt;&gt;&gt; print(elements)\n        {\n            \"wheelAndFork\": Element(id='0b0c209535554345432581fe', name='wheelAndFork', elementType='PARTSTUDIO',\n                                     microversionId='9b3be6165c7a2b1f6dd61305'),\n            \"frame\": Element(id='0b0c209535554345432581fe', name='frame', elementType='PARTSTUDIO',\n                             microversionId='9b3be6165c7a2b1f6dd61305')\n        }\n    \"\"\"\n\n    # /documents/d/{did}/{wvm}/{wvmid}/elements\n    request_path = \"/api/documents/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/elements\"\n    _elements_json = self.request(\n        HTTP.GET,\n        request_path,\n    ).json()\n\n    return {element[\"name\"]: Element.model_validate(element) for element in _elements_json}\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_mass_property","title":"<code>get_mass_property(did, wtype, wid, eid, partID)</code>","text":"<p>Get mass properties of a part in a part studio.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the element.</p> required <code>partID</code> <code>str</code> <p>The identifier of the part.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <p>Returns:</p> Type Description <code>MassProperties</code> <p>MassProperties object containing the mass properties of the part.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties = client.get_mass_property(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\",\n...     partID=\"0b0c209535554345432581fe\"\n...     wtype=\"w\"\n... )\n&gt;&gt;&gt; print(mass_properties)\nMassProperties(\n    volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n    mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n    centroid=[...],\n    inertia=[...],\n    principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n    principalAxes=[...]\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_mass_property(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    partID: str,\n) -&gt; MassProperties:\n    \"\"\"\n    Get mass properties of a part in a part studio.\n\n    Args:\n        did: The unique identifier of the document.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the element.\n        partID: The identifier of the part.\n        wtype: The type of workspace.\n\n    Returns:\n        MassProperties object containing the mass properties of the part.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties = client.get_mass_property(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\",\n        ...     partID=\"0b0c209535554345432581fe\"\n        ...     wtype=\"w\"\n        ... )\n        &gt;&gt;&gt; print(mass_properties)\n        MassProperties(\n            volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n            mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n            centroid=[...],\n            inertia=[...],\n            principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n            principalAxes=[...]\n        )\n    \"\"\"\n    # TODO: version id seems to always work, should this default behavior be changed?\n    request_path = f\"/api/parts/d/{did}/{wtype}/{wid}/e/{eid}/partid/{partID}/massproperties\"\n    res = self.request(HTTP.GET, request_path, {\"useMassPropertiesOverrides\": True}, log_response=False)\n\n    if res.status_code == 404:\n        # TODO: There doesn't seem to be a way to assign material to a part currently\n        # It is possible that the workspace got deleted\n        url = generate_url(\n            base_url=self._url,\n            did=did,\n            wtype=wtype,\n            wid=wid,\n            eid=eid,\n        )\n        raise ValueError(f\"Part: {url} does not have a material assigned or the part is not found\")\n\n    elif res.status_code == 429:\n        raise ValueError(f\"Too many requests, please retry after {res.headers['Retry-After']} seconds\")\n\n    resonse_json = res.json()\n\n    if \"bodies\" not in resonse_json:\n        raise KeyError(f\"Bodies not found in response, broken part? {partID}\")\n\n    return MassProperties.model_validate(resonse_json[\"bodies\"][partID])\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_root_assembly","title":"<code>get_root_assembly(did, wtype, wid, eid, configuration='default', with_mass_properties=False, log_response=True, with_meta_data=True)</code>","text":"<p>Get root assembly data for a specified document / workspace / element.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wtype</code> <code>str</code> <p>The type of workspace.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the element.</p> required <code>configuration</code> <code>str</code> <p>The configuration of the assembly.</p> <code>'default'</code> <code>log_response</code> <code>bool</code> <p>Log the response from the API request.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>RootAssembly</code> <code>RootAssembly</code> <p>RootAssembly object containing the root assembly data</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; root_assembly = client.get_root_assembly(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\"\n... )\n&gt;&gt;&gt; print(root_assembly)\nRootAssembly(\n    instances=[...],\n    patterns=[...],\n    features=[...],\n    occurrences=[...],\n    fullConfiguration=\"default\",\n    configuration=\"default\",\n    documentId=\"a1c1addf75444f54b504f25c\",\n    elementId=\"0b0c209535554345432581fe\",\n    documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_root_assembly(\n    self,\n    did: str,\n    wtype: str,\n    wid: str,\n    eid: str,\n    configuration: str = \"default\",\n    with_mass_properties: bool = False,\n    log_response: bool = True,\n    with_meta_data: bool = True,\n) -&gt; RootAssembly:\n    \"\"\"\n    Get root assembly data for a specified document / workspace / element.\n\n    Args:\n        did: The unique identifier of the document.\n        wtype: The type of workspace.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the element.\n        configuration: The configuration of the assembly.\n        log_response: Log the response from the API request.\n\n    Returns:\n        RootAssembly: RootAssembly object containing the root assembly data\n\n    Examples:\n        &gt;&gt;&gt; root_assembly = client.get_root_assembly(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\"\n        ... )\n        &gt;&gt;&gt; print(root_assembly)\n        RootAssembly(\n            instances=[...],\n            patterns=[...],\n            features=[...],\n            occurrences=[...],\n            fullConfiguration=\"default\",\n            configuration=\"default\",\n            documentId=\"a1c1addf75444f54b504f25c\",\n            elementId=\"0b0c209535554345432581fe\",\n            documentMicroversion=\"349f6413cafefe8fb4ab3b07\",\n        )\n    \"\"\"\n    request_path = \"/api/assemblies/d/\" + did + \"/\" + wtype + \"/\" + wid + \"/e/\" + eid\n    res = self.request(\n        HTTP.GET,\n        request_path,\n        query={\n            \"includeMateFeatures\": \"true\",\n            \"includeMateConnectors\": \"true\",\n            \"includeNonSolids\": \"false\",\n            \"configuration\": configuration,\n        },\n        log_response=log_response,\n    )\n\n    if res.status_code == 401:\n        LOGGER.warning(f\"Unauthorized access to document: {did}\")\n        LOGGER.warning(\"Please check the API keys in your env file.\")\n        exit(1)\n\n    if res.status_code == 404:\n        LOGGER.error(f\"Assembly not found: {did}\")\n        LOGGER.error(\n            generate_url(\n                base_url=self._url,\n                did=did,\n                wtype=wtype,\n                wid=wid,\n                eid=eid,\n            )\n        )\n        exit(1)\n\n    assembly_json = res.json()\n    assembly = RootAssembly.model_validate(assembly_json[\"rootAssembly\"])\n\n    if with_mass_properties:\n        assembly.MassProperty = self.get_assembly_mass_properties(\n            did=did,\n            wid=wid,\n            eid=eid,\n            wtype=wtype,\n        )\n\n    if with_meta_data:\n        assembly.documentMetaData = self.get_document_metadata(did)\n\n    return assembly\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.get_variables","title":"<code>get_variables(did, wid, eid)</code>","text":"<p>Get a list of variables in a variable studio within a document.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the variable studio.</p> required <p>Returns:</p> Type Description <code>dict[str, Variable]</code> <p>A dictionary of variable name and Variable object pairs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; variables = client.get_variables(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"cba5e3ca026547f34f8d9f0f\"\n... )\n&gt;&gt;&gt; print(variables)\n{\n    \"forkAngle\": Variable(\n        type='ANGLE',\n        name='forkAngle',\n        value=None,\n        description='Fork angle for front wheel assembly in deg',\n        expression='15 deg'\n    )\n}\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def get_variables(self, did: str, wid: str, eid: str) -&gt; dict[str, Variable]:\n    \"\"\"\n    Get a list of variables in a variable studio within a document.\n\n    Args:\n        did: The unique identifier of the document.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the variable studio.\n\n    Returns:\n        A dictionary of variable name and Variable object pairs.\n\n    Examples:\n        &gt;&gt;&gt; variables = client.get_variables(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"cba5e3ca026547f34f8d9f0f\"\n        ... )\n        &gt;&gt;&gt; print(variables)\n        {\n            \"forkAngle\": Variable(\n                type='ANGLE',\n                name='forkAngle',\n                value=None,\n                description='Fork angle for front wheel assembly in deg',\n                expression='15 deg'\n            )\n        }\n    \"\"\"\n    request_path = \"/api/variables/d/\" + did + \"/w/\" + wid + \"/e/\" + eid + \"/variables\"\n\n    _variables_json = self.request(\n        HTTP.GET,\n        request_path,\n    ).json()\n\n    return {variable[\"name\"]: Variable.model_validate(variable) for variable in _variables_json[0][\"variables\"]}\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.request","title":"<code>request(method, path, query=None, headers=None, body=None, base_url=None, log_response=True, timeout=50)</code>","text":"<p>Send a request to the Onshape API.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>HTTP</code> <p>HTTP method (GET, POST, DELETE)</p> required <code>path</code> <code>str</code> <p>URL path for the request</p> required <code>query</code> <code>Optional[dict[str, Any]]</code> <p>Query string in key-value pairs</p> <code>None</code> <code>headers</code> <code>Optional[dict[str, Any]]</code> <p>Additional headers for the request</p> <code>None</code> <code>body</code> <code>Optional[dict[str, Any]]</code> <p>Body of the request</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the request</p> <code>None</code> <code>log_response</code> <code>bool</code> <p>Log the response from the API request</p> <code>True</code> <p>Returns:</p> Type Description <code>Response</code> <p>requests.Response: Response from the Onshape API request</p> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def request(\n    self,\n    method: HTTP,\n    path: str,\n    query: Optional[dict[str, Any]] = None,\n    headers: Optional[dict[str, Any]] = None,\n    body: Optional[dict[str, Any]] = None,\n    base_url: Optional[str] = None,\n    log_response: bool = True,\n    timeout: int = 50,\n) -&gt; requests.Response:\n    \"\"\"\n    Send a request to the Onshape API.\n\n    Args:\n        method: HTTP method (GET, POST, DELETE)\n        path: URL path for the request\n        query: Query string in key-value pairs\n        headers: Additional headers for the request\n        body: Body of the request\n        base_url: Base URL for the request\n        log_response: Log the response from the API request\n\n    Returns:\n        requests.Response: Response from the Onshape API request\n    \"\"\"\n    if query is None:\n        query = {}\n    if headers is None:\n        headers = {}\n    if base_url is None:\n        base_url = self._url\n\n    req_headers = self._make_headers(method, path, query, headers)\n    url = self._build_url(base_url, path, query)\n\n    LOGGER.debug(f\"Request body: {body}\")\n    LOGGER.debug(f\"Request headers: {req_headers}\")\n    LOGGER.debug(f\"Request URL: {url}\")\n\n    res = self._send_request(method, url, req_headers, body, timeout)\n\n    if res.status_code == 307:\n        return self._handle_redirect(res, method, headers, log_response)\n    else:\n        if log_response:\n            self._log_response(res)\n\n    return res\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.set_base_url","title":"<code>set_base_url(base_url)</code>","text":"<p>Set the base URL for the Onshape API.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL for the Onshape API</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; client.set_base_url(\"https://cad.onshape.com\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def set_base_url(self, base_url: str):\n    \"\"\"\n    Set the base URL for the Onshape API.\n\n    Args:\n        base_url: Base URL for the Onshape API\n\n    Examples:\n        &gt;&gt;&gt; client.set_base_url(\"https://cad.onshape.com\")\n    \"\"\"\n    self._url = base_url\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.Client.set_variables","title":"<code>set_variables(did, wid, eid, variables)</code>","text":"<p>Set values for variables of a variable studio in a document.</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the variable studio.</p> required <code>variables</code> <code>dict[str, str]</code> <p>A dictionary of variable name and expression pairs.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>requests.Response: Response from Onshape API after setting the variables.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; variables = {\n...     \"forkAngle\": \"15 deg\",\n...     \"wheelRadius\": \"0.5 m\"\n... }\n&gt;&gt;&gt; client.set_variables(\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"cba5e3ca026547f34f8d9f0f\",\n...     variables=variables\n... )\n&lt;Response [200]&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def set_variables(self, did: str, wid: str, eid: str, variables: dict[str, str]) -&gt; requests.Response:\n    \"\"\"\n    Set values for variables of a variable studio in a document.\n\n    Args:\n        did: The unique identifier of the document.\n        wid: The unique identifier of the workspace.\n        eid: The unique identifier of the variable studio.\n        variables: A dictionary of variable name and expression pairs.\n\n    Returns:\n        requests.Response: Response from Onshape API after setting the variables.\n\n    Examples:\n        &gt;&gt;&gt; variables = {\n        ...     \"forkAngle\": \"15 deg\",\n        ...     \"wheelRadius\": \"0.5 m\"\n        ... }\n        &gt;&gt;&gt; client.set_variables(\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"cba5e3ca026547f34f8d9f0f\",\n        ...     variables=variables\n        ... )\n        &lt;Response [200]&gt;\n    \"\"\"\n\n    payload = [variable.model_dump() for variable in variables.values()]\n\n    # api/v9/variables/d/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/cba5e3ca026547f34f8d9f0f/variables\n    request_path = \"/api/variables/d/\" + did + \"/w/\" + wid + \"/e/\" + eid + \"/variables\"\n\n    return self.request(\n        HTTP.POST,\n        request_path,\n        body=payload,\n    )\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.HTTP","title":"<code>HTTP</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible HTTP methods.</p> <p>Attributes:</p> Name Type Description <code>GET</code> <code>str</code> <p>HTTP GET method</p> <code>POST</code> <code>str</code> <p>HTTP POST method</p> <code>DELETE</code> <code>str</code> <p>HTTP DELETE method</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; HTTP.GET\n'get'\n&gt;&gt;&gt; HTTP.POST\n'post'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>class HTTP(str, Enum):\n    \"\"\"\n    Enumerates the possible HTTP methods.\n\n    Attributes:\n        GET (str): HTTP GET method\n        POST (str): HTTP POST method\n        DELETE (str): HTTP DELETE method\n\n    Examples:\n        &gt;&gt;&gt; HTTP.GET\n        'get'\n        &gt;&gt;&gt; HTTP.POST\n        'post'\n    \"\"\"\n\n    GET = \"get\"\n    POST = \"post\"\n    DELETE = \"delete\"\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.load_env_variables","title":"<code>load_env_variables(env)</code>","text":"<p>Load access and secret keys required for Onshape API requests from a .env file.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>str</code> <p>Path to the environment file containing the access and secret keys</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Access and secret keys</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the environment file is not found</p> <code>ValueError</code> <p>If the required environment variables are missing</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; load_env_variables(\".env\")\n('asdagflkdfjsdlfkdfjlsdf', 'asdkkjdnknsdgkjsdguoiuosdg')\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def load_env_variables(env: str) -&gt; tuple[str, str]:\n    \"\"\"\n    Load access and secret keys required for Onshape API requests from a .env file.\n\n    Args:\n        env: Path to the environment file containing the access and secret keys\n\n    Returns:\n        tuple[str, str]: Access and secret keys\n\n    Raises:\n        FileNotFoundError: If the environment file is not found\n        ValueError: If the required environment variables are missing\n\n    Examples:\n        &gt;&gt;&gt; load_env_variables(\".env\")\n        ('asdagflkdfjsdlfkdfjlsdf', 'asdkkjdnknsdgkjsdguoiuosdg')\n    \"\"\"\n\n    if not os.path.isfile(env):\n        raise FileNotFoundError(f\"{env} file not found\")\n\n    load_dotenv(env)\n\n    access_key = os.getenv(\"ACCESS_KEY\")\n    secret_key = os.getenv(\"SECRET_KEY\")\n\n    if not access_key or not secret_key:\n        missing_vars = [var for var in [\"ACCESS_KEY\", \"SECRET_KEY\"] if not os.getenv(var)]\n        raise ValueError(f\"Missing required environment variables: {', '.join(missing_vars)}\")\n\n    return access_key, secret_key\n</code></pre>"},{"location":"api/connect/#onshape_robotics_toolkit.connect.make_nonce","title":"<code>make_nonce()</code>","text":"<p>Generate a unique ID for the request, 25 chars in length</p> <p>Returns:</p> Type Description <code>str</code> <p>Cryptographic nonce string for the API request</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; make_nonce()\n'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\connect.py</code> <pre><code>def make_nonce() -&gt; str:\n    \"\"\"\n    Generate a unique ID for the request, 25 chars in length\n\n    Returns:\n        Cryptographic nonce string for the API request\n\n    Examples:\n        &gt;&gt;&gt; make_nonce()\n        'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p'\n    \"\"\"\n\n    chars = string.digits + string.ascii_letters\n    nonce = \"\".join(secrets.choice(chars) for i in range(25))\n    LOGGER.debug(f\"nonce created: {nonce}\")\n\n    return nonce\n</code></pre>"},{"location":"api/document/","title":"Document","text":"<p>This module defines data models for Onshape document, workspace, element, and other related entities retrieved from Onshape REST API responses.</p> <p>The data models are implemented as Pydantic BaseModel classes, which are used to</p> <pre><code>1. Parse JSON responses from the API into Python objects.\n2. Validate the structure and types of the JSON responses.\n3. Provide type hints for better code clarity and autocompletion.\n</code></pre> <p>These models ensure that the data received from the API adheres to the expected format and types, facilitating easier and safer manipulation of the data within the application.</p> Models <ul> <li>Document: Represents an Onshape document, containing the document ID, workspace type, workspace ID,   and element ID.</li> <li>DocumentMetaData: Represents metadata of an Onshape document, containing the default workspace   information and name.</li> </ul> Supplementary models <ul> <li>DefaultWorkspace: Represents the default workspace of an Onshape document, containing the   workspace ID and type.</li> </ul> Enum <ul> <li>WorkspaceType: Enumerates the possible workspace types in Onshape (w, v, m).</li> <li>MetaWorkspaceType: Enumerates the possible meta workspace types in Onshape (workspace,   version, microversion).</li> </ul>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.DefaultWorkspace","title":"<code>DefaultWorkspace</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the default workspace of an Onshape document, containing the workspace ID and type.</p> JSON <pre><code>{\n    \"id\": \"739221fb10c88c2bebb456e8\"\n    \"type\": \"workspace\"\n}\n</code></pre> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The unique identifier of the workspace</p> <code>type</code> <code>MetaWorkspaceType</code> <p>The type of workspace (workspace, version, microversion)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\")\nDefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>class DefaultWorkspace(BaseModel):\n    \"\"\"\n    Represents the default workspace of an Onshape document, containing the workspace ID and type.\n\n    JSON:\n        ```json\n        {\n            \"id\": \"739221fb10c88c2bebb456e8\"\n            \"type\": \"workspace\"\n        }\n        ```\n\n    Attributes:\n        id: The unique identifier of the workspace\n        type: The type of workspace (workspace, version, microversion)\n\n    Examples:\n        &gt;&gt;&gt; DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\")\n        DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\")\n    \"\"\"\n\n    id: str = Field(..., description=\"The unique identifier of the workspace\")\n    type: MetaWorkspaceType = Field(..., description=\"The type of workspace (workspace, version, microversion)\")\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.Document","title":"<code>Document</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an Onshape document, containing the document ID, workspace type, workspace ID, and element ID.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>Union[str, None]</code> <p>URL to the document element</p> <code>did</code> <code>str</code> <p>The unique identifier of the document</p> <code>wtype</code> <code>str</code> <p>The type of workspace (w, v, m)</p> <code>wid</code> <code>str</code> <p>The unique identifier of the workspace</p> <code>eid</code> <code>str</code> <p>The unique identifier of the element</p> <code>name</code> <code>str</code> <p>The name of the document</p> <p>Methods:</p> Name Description <code>from_url</code> <p>Create a Document instance from an Onshape URL</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Document(\n...     url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n...     did=\"a1c1addf75444f54b504f25c\",\n...     wtype=\"w\",\n...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n...     eid=\"a86aaf34d2f4353288df8812\"\n... )\nDocument(\n    url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n    did=\"a1c1addf75444f54b504f25c\",\n    wtype=\"w\",\n    wid=\"0d17b8ebb2a4c76be9fff3c7\",\n    eid=\"a86aaf34d2f4353288df8812\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>class Document(BaseModel):\n    \"\"\"\n    Represents an Onshape document, containing the document ID, workspace type, workspace ID, and element ID.\n\n    Attributes:\n        url: URL to the document element\n        did: The unique identifier of the document\n        wtype: The type of workspace (w, v, m)\n        wid: The unique identifier of the workspace\n        eid: The unique identifier of the element\n        name: The name of the document\n\n    Methods:\n        from_url: Create a Document instance from an Onshape URL\n\n    Examples:\n        &gt;&gt;&gt; Document(\n        ...     url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n        ...     did=\"a1c1addf75444f54b504f25c\",\n        ...     wtype=\"w\",\n        ...     wid=\"0d17b8ebb2a4c76be9fff3c7\",\n        ...     eid=\"a86aaf34d2f4353288df8812\"\n        ... )\n        Document(\n            url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n            did=\"a1c1addf75444f54b504f25c\",\n            wtype=\"w\",\n            wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            eid=\"a86aaf34d2f4353288df8812\"\n        )\n    \"\"\"\n\n    url: Union[str, None] = Field(None, description=\"URL to the document element\")\n    base_url: str = Field(BASE_URL, description=\"Base URL of the document\")\n    did: str = Field(..., description=\"The unique identifier of the document\")\n    wtype: str = Field(..., description=\"The type of workspace (w, v, m)\")\n    wid: str = Field(..., description=\"The unique identifier of the workspace\")\n    eid: str = Field(..., description=\"The unique identifier of the element\")\n    name: str = Field(None, description=\"The name of the document\")\n\n    def __init__(self, **data):\n        super().__init__(**data)\n        if self.url is None:\n            self.url = generate_url(self.base_url, self.did, self.wtype, self.wid, self.eid)\n\n    @field_validator(\"did\", \"wid\", \"eid\")\n    def check_ids(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the document, workspace, and element IDs\n\n        Args:\n            value: The ID to validate\n\n        Returns:\n            value: The validated ID\n\n        Raises:\n            ValueError: If the ID is empty or not 24 characters long\n        \"\"\"\n        if not value:\n            raise ValueError(\"ID cannot be empty, please check the URL\")\n        if not len(value) == 24:\n            raise ValueError(\"ID must be 24 characters long, please check the URL\")\n        return value\n\n    @field_validator(\"wtype\")\n    def check_wtype(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the workspace type\n\n        Args:\n            value: The workspace type to validate\n\n        Returns:\n            value: The validated workspace type\n\n        Raises:\n            ValueError: If the workspace type is empty or not one of the valid values\n        \"\"\"\n        if not value:\n            raise ValueError(\"Workspace type cannot be empty, please check the URL\")\n\n        if value not in WorkspaceType.__members__.values():\n            raise ValueError(\n                f\"Invalid workspace type. Must be one of {WorkspaceType.__members__.values()}, please check the URL\"\n            )\n\n        return value\n\n    @classmethod\n    def from_url(cls, url: str) -&gt; \"Document\":\n        \"\"\"\n        Create a Document instance from an Onshape URL\n\n        Args:\n            url: URL to the document element\n\n        Returns:\n            Document: The Document instance created from the URL\n\n        Raises:\n            ValueError: If the URL does not match the expected pattern\n\n        Examples:\n            &gt;&gt;&gt; Document.from_url(\n            ...     \"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n            ... )\n            Document(\n                url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n                base_url=\"https://cad.onshape.com\",\n                did=\"a1c1addf75444f54b504f25c\",\n                wtype=\"w\",\n                wid=\"0d17b8ebb2a4c76be9fff3c7\",\n                eid=\"a86aaf34d2f4353288df8812\"\n            )\n        \"\"\"\n        base_url, did, wtype, wid, eid = parse_url(url)\n        return cls(url=url, base_url=base_url, did=did, wtype=wtype, wid=wid, eid=eid)\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.Document.check_ids","title":"<code>check_ids(value)</code>","text":"<p>Validate the document, workspace, and element IDs</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The ID to validate</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>The validated ID</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the ID is empty or not 24 characters long</p> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>@field_validator(\"did\", \"wid\", \"eid\")\ndef check_ids(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the document, workspace, and element IDs\n\n    Args:\n        value: The ID to validate\n\n    Returns:\n        value: The validated ID\n\n    Raises:\n        ValueError: If the ID is empty or not 24 characters long\n    \"\"\"\n    if not value:\n        raise ValueError(\"ID cannot be empty, please check the URL\")\n    if not len(value) == 24:\n        raise ValueError(\"ID must be 24 characters long, please check the URL\")\n    return value\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.Document.check_wtype","title":"<code>check_wtype(value)</code>","text":"<p>Validate the workspace type</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The workspace type to validate</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>The validated workspace type</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the workspace type is empty or not one of the valid values</p> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>@field_validator(\"wtype\")\ndef check_wtype(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the workspace type\n\n    Args:\n        value: The workspace type to validate\n\n    Returns:\n        value: The validated workspace type\n\n    Raises:\n        ValueError: If the workspace type is empty or not one of the valid values\n    \"\"\"\n    if not value:\n        raise ValueError(\"Workspace type cannot be empty, please check the URL\")\n\n    if value not in WorkspaceType.__members__.values():\n        raise ValueError(\n            f\"Invalid workspace type. Must be one of {WorkspaceType.__members__.values()}, please check the URL\"\n        )\n\n    return value\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.Document.from_url","title":"<code>from_url(url)</code>  <code>classmethod</code>","text":"<p>Create a Document instance from an Onshape URL</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to the document element</p> required <p>Returns:</p> Name Type Description <code>Document</code> <code>Document</code> <p>The Document instance created from the URL</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL does not match the expected pattern</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Document.from_url(\n...     \"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n... )\nDocument(\n    url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n    base_url=\"https://cad.onshape.com\",\n    did=\"a1c1addf75444f54b504f25c\",\n    wtype=\"w\",\n    wid=\"0d17b8ebb2a4c76be9fff3c7\",\n    eid=\"a86aaf34d2f4353288df8812\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>@classmethod\ndef from_url(cls, url: str) -&gt; \"Document\":\n    \"\"\"\n    Create a Document instance from an Onshape URL\n\n    Args:\n        url: URL to the document element\n\n    Returns:\n        Document: The Document instance created from the URL\n\n    Raises:\n        ValueError: If the URL does not match the expected pattern\n\n    Examples:\n        &gt;&gt;&gt; Document.from_url(\n        ...     \"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n        ... )\n        Document(\n            url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\",\n            base_url=\"https://cad.onshape.com\",\n            did=\"a1c1addf75444f54b504f25c\",\n            wtype=\"w\",\n            wid=\"0d17b8ebb2a4c76be9fff3c7\",\n            eid=\"a86aaf34d2f4353288df8812\"\n        )\n    \"\"\"\n    base_url, did, wtype, wid, eid = parse_url(url)\n    return cls(url=url, base_url=base_url, did=did, wtype=wtype, wid=wid, eid=eid)\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.DocumentMetaData","title":"<code>DocumentMetaData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents metadata of an Onshape document, containing the default workspace information and name.</p> JSON <pre><code>{\n    \"defaultWorkspace\": {\n        \"id\": \"739221fb10c88c2bebb456e8\",\n        \"type\": \"workspace\"\n    },\n    \"name\": \"Document Name\",\n    \"id\": \"a1c1addf75444f54b504f25c\"\n}\n</code></pre> <p>Attributes:</p> Name Type Description <code>defaultWorkspace</code> <code>DefaultWorkspace</code> <p>Default workspace information</p> <code>name</code> <code>str</code> <p>The name of the document</p> <code>id</code> <code>str</code> <p>The unique identifier of the document</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DocumentMetaData(\n...     defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n...     name=\"Document Name\",\n...     id=\"a1c1addf75444f54b504f25c\"\n... )\nDocumentMetaData(\n    defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n    name=\"Document Name\",\n    id=\"a1c1addf75444f54b504f25c\"\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>class DocumentMetaData(BaseModel):\n    \"\"\"\n    Represents metadata of an Onshape document, containing the default workspace information and name.\n\n    JSON:\n        ```json\n        {\n            \"defaultWorkspace\": {\n                \"id\": \"739221fb10c88c2bebb456e8\",\n                \"type\": \"workspace\"\n            },\n            \"name\": \"Document Name\",\n            \"id\": \"a1c1addf75444f54b504f25c\"\n        }\n        ```\n\n    Attributes:\n        defaultWorkspace: Default workspace information\n        name: The name of the document\n        id: The unique identifier of the document\n\n    Examples:\n        &gt;&gt;&gt; DocumentMetaData(\n        ...     defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n        ...     name=\"Document Name\",\n        ...     id=\"a1c1addf75444f54b504f25c\"\n        ... )\n        DocumentMetaData(\n            defaultWorkspace=DefaultWorkspace(id=\"739221fb10c88c2bebb456e8\", type=\"workspace\"),\n            name=\"Document Name\",\n            id=\"a1c1addf75444f54b504f25c\"\n        )\n    \"\"\"\n\n    defaultWorkspace: DefaultWorkspace = Field(..., description=\"Default workspace information\")\n    name: str = Field(..., description=\"The name of the document\")\n    id: str = Field(..., description=\"The unique identifier of the document\")\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.MetaWorkspaceType","title":"<code>MetaWorkspaceType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible meta workspace types in Onshape</p> <p>Attributes:</p> Name Type Description <code>WORKSPACE</code> <p>workspace</p> <code>VERSION</code> <p>version</p> <code>MICROVERSION</code> <p>microversion</p> Properties <p>shorthand: Shorthand representation of the meta workspace type (first letter)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MetaWorkspaceType.WORKSPACE.shorthand\n\"w\"\n&gt;&gt;&gt; MetaWorkspaceType.VERSION\n\"version\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>class MetaWorkspaceType(str, Enum):\n    \"\"\"\n    Enumerates the possible meta workspace types in Onshape\n\n    Attributes:\n        WORKSPACE: workspace\n        VERSION: version\n        MICROVERSION: microversion\n\n    Properties:\n        shorthand: Shorthand representation of the meta workspace type (first letter)\n\n    Examples:\n        &gt;&gt;&gt; MetaWorkspaceType.WORKSPACE.shorthand\n        \"w\"\n        &gt;&gt;&gt; MetaWorkspaceType.VERSION\n        \"version\"\n    \"\"\"\n\n    WORKSPACE = \"workspace\"\n    VERSION = \"version\"\n    MICROVERSION = \"microversion\"\n\n    @property\n    def shorthand(self) -&gt; str:\n        return self.value[0]\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.WorkspaceType","title":"<code>WorkspaceType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible workspace types in Onshape</p> <p>Attributes:</p> Name Type Description <code>W</code> <code>str</code> <p>Workspace</p> <code>V</code> <code>str</code> <p>Version</p> <code>M</code> <code>str</code> <p>Microversion</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WorkspaceType.W\n\"w\"\n&gt;&gt;&gt; WorkspaceType.M\n\"m\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>class WorkspaceType(str, Enum):\n    \"\"\"\n    Enumerates the possible workspace types in Onshape\n\n    Attributes:\n        W (str): Workspace\n        V (str): Version\n        M (str): Microversion\n\n    Examples:\n        &gt;&gt;&gt; WorkspaceType.W\n        \"w\"\n        &gt;&gt;&gt; WorkspaceType.M\n        \"m\"\n    \"\"\"\n\n    W = \"w\"\n    V = \"v\"\n    M = \"m\"\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.generate_url","title":"<code>generate_url(base_url, did, wtype, wid, eid)</code>","text":"<p>Generate Onshape URL from document ID, workspace type, workspace ID, and element ID</p> <p>Parameters:</p> Name Type Description Default <code>did</code> <code>str</code> <p>The unique identifier of the document</p> required <code>wtype</code> <code>str</code> <p>The type of workspace (w, v, m)</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace</p> required <code>eid</code> <code>str</code> <p>The unique identifier of the element</p> required <p>Returns:</p> Name Type Description <code>url</code> <code>str</code> <p>URL to the Onshape document element</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; generate_url(\"a1c1addf75444f54b504f25c\", \"w\", \"0d17b8ebb2a4c76be9fff3c7\", \"a86aaf34d2f4353288df8812\")\n\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>def generate_url(base_url: str, did: str, wtype: str, wid: str, eid: str) -&gt; str:\n    \"\"\"\n    Generate Onshape URL from document ID, workspace type, workspace ID, and element ID\n\n    Args:\n        did: The unique identifier of the document\n        wtype: The type of workspace (w, v, m)\n        wid: The unique identifier of the workspace\n        eid: The unique identifier of the element\n\n    Returns:\n        url: URL to the Onshape document element\n\n    Examples:\n        &gt;&gt;&gt; generate_url(\"a1c1addf75444f54b504f25c\", \"w\", \"0d17b8ebb2a4c76be9fff3c7\", \"a86aaf34d2f4353288df8812\")\n        \"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n    \"\"\"\n    return f\"{base_url}/documents/{did}/{wtype}/{wid}/e/{eid}\"\n</code></pre>"},{"location":"api/document/#onshape_robotics_toolkit.models.document.parse_url","title":"<code>parse_url(url)</code>","text":"<p>Parse Onshape URL and return document ID, workspace type, workspace ID, and element ID</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to an Onshape document element</p> required <p>Returns:</p> Name Type Description <code>did</code> <code>str</code> <p>The unique identifier of the document</p> <code>wtype</code> <code>str</code> <p>The type of workspace (w, v, m)</p> <code>wid</code> <code>str</code> <p>The unique identifier of the workspace</p> <code>eid</code> <code>str</code> <p>The unique identifier of the element</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL does not match the expected pattern</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_url(\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\")\n(\"a1c1addf75444f54b504f25c\", \"w\", \"0d17b8ebb2a4c76be9fff3c7\", \"a86aaf34d2f4353288df8812\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\document.py</code> <pre><code>def parse_url(url: str) -&gt; str:\n    \"\"\"\n    Parse Onshape URL and return document ID, workspace type, workspace ID, and element ID\n\n    Args:\n        url: URL to an Onshape document element\n\n    Returns:\n        did: The unique identifier of the document\n        wtype: The type of workspace (w, v, m)\n        wid: The unique identifier of the workspace\n        eid: The unique identifier of the element\n\n    Raises:\n        ValueError: If the URL does not match the expected pattern\n\n    Examples:\n        &gt;&gt;&gt; parse_url(\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\")\n        (\"a1c1addf75444f54b504f25c\", \"w\", \"0d17b8ebb2a4c76be9fff3c7\", \"a86aaf34d2f4353288df8812\")\n    \"\"\"\n    pattern = re.match(\n        DOCUMENT_PATTERN,\n        url,\n    )\n\n    if not pattern:\n        raise ValueError(\"Invalid Onshape URL\")\n\n    base_url = pattern.group(1)\n    did = pattern.group(2)\n    wtype = cast(WorkspaceType, pattern.group(3))\n    wid = pattern.group(4)\n    eid = pattern.group(5)\n\n    return base_url, did, wtype, wid, eid\n</code></pre>"},{"location":"api/element/","title":"Element","text":"<p>This module defines data model for elements retrieved from Onshape REST API responses.</p> <p>The data models are implemented as Pydantic BaseModel classes, which are used to</p> <pre><code>1. Parse JSON responses from the API into Python objects.\n2. Validate the structure and types of the JSON responses.\n3. Provide type hints for better code clarity and autocompletion.\n</code></pre> <p>These models ensure that the data received from the API adheres to the expected format and types, facilitating easier and safer manipulation of the data within the application.</p> Models <ul> <li>Element: Represents an Onshape element, containing the element ID, name, type, and microversion ID.</li> </ul> Enum <ul> <li>ElementType: Enumerates the possible element types in Onshape (PARTSTUDIO, ASSEMBLY, DRAWING, etc.).</li> </ul>"},{"location":"api/element/#onshape_robotics_toolkit.models.element.Element","title":"<code>Element</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an Onshape element, containing the element ID, name, type, and microversion ID.</p> JSON <pre><code>    {\n        \"name\": \"wheelAndFork\",\n        \"id\": \"0b0c209535554345432581fe\",\n        \"type\": \"Part Studio\",\n        \"elementType\": \"PARTSTUDIO\",\n        \"dataType\": \"onshape/partstudio\",\n        \"microversionId\": \"9b3be6165c7a2b1f6dd61305\",\n        \"lengthUnits\": \"millimeter\",\n        \"angleUnits\": \"degree\",\n        \"massUnits\": \"kilogram\",\n        \"timeUnits\": \"second\",\n        \"forceUnits\": \"newton\",\n        \"pressureUnits\": \"pascal\",\n        \"momentUnits\": \"newtonMeter\",\n        \"accelerationUnits\": \"meterPerSecondSquared\",\n        \"angularVelocityUnits\": \"degreePerSecond\",\n        \"energyUnits\": \"footPoundForce\",\n        \"areaUnits\": \"squareMillimeter\",\n        \"volumeUnits\": \"cubicMillimeter\",\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The unique identifier of the element.</p> <code>name</code> <code>str</code> <p>The name of the element.</p> <code>elementType</code> <code>str</code> <p>The type of the element (e.g., PARTSTUDIO, ASSEMBLY, DRAWING).</p> <code>microversionId</code> <code>str</code> <p>The unique identifier of the microversion of the element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = Element(id=\"0b0c209535554345432581fe\", name=\"wheelAndFork\", elementType=\"PARTSTUDIO\",\n...                   microversionId=\"9b3be6165c7a2b1f6dd61305\")\n&gt;&gt;&gt; element\nElement(id='0b0c209535554345432581fe', name='wheelAndFork', elementType='PARTSTUDIO',\n        microversionId='9b3be6165c7a2b1f6dd61305')\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\element.py</code> <pre><code>class Element(BaseModel):\n    \"\"\"\n    Represents an Onshape element, containing the element ID, name, type, and microversion ID.\n\n    JSON:\n        ```json\n            {\n                \"name\": \"wheelAndFork\",\n                \"id\": \"0b0c209535554345432581fe\",\n                \"type\": \"Part Studio\",\n                \"elementType\": \"PARTSTUDIO\",\n                \"dataType\": \"onshape/partstudio\",\n                \"microversionId\": \"9b3be6165c7a2b1f6dd61305\",\n                \"lengthUnits\": \"millimeter\",\n                \"angleUnits\": \"degree\",\n                \"massUnits\": \"kilogram\",\n                \"timeUnits\": \"second\",\n                \"forceUnits\": \"newton\",\n                \"pressureUnits\": \"pascal\",\n                \"momentUnits\": \"newtonMeter\",\n                \"accelerationUnits\": \"meterPerSecondSquared\",\n                \"angularVelocityUnits\": \"degreePerSecond\",\n                \"energyUnits\": \"footPoundForce\",\n                \"areaUnits\": \"squareMillimeter\",\n                \"volumeUnits\": \"cubicMillimeter\",\n            }\n        ```\n\n    Attributes:\n        id (str): The unique identifier of the element.\n        name (str): The name of the element.\n        elementType (str): The type of the element (e.g., PARTSTUDIO, ASSEMBLY, DRAWING).\n        microversionId (str): The unique identifier of the microversion of the element.\n\n    Examples:\n        &gt;&gt;&gt; element = Element(id=\"0b0c209535554345432581fe\", name=\"wheelAndFork\", elementType=\"PARTSTUDIO\",\n        ...                   microversionId=\"9b3be6165c7a2b1f6dd61305\")\n        &gt;&gt;&gt; element\n        Element(id='0b0c209535554345432581fe', name='wheelAndFork', elementType='PARTSTUDIO',\n                microversionId='9b3be6165c7a2b1f6dd61305')\n    \"\"\"\n\n    id: str = Field(..., description=\"The unique identifier of the element\")\n    name: str = Field(..., description=\"The name of the element\")\n    elementType: str = Field(..., description=\"The type of the element\")\n    microversionId: str = Field(..., description=\"The unique identifier of the microversion of the element\")\n\n    @field_validator(\"elementType\")\n    def validate_type(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the element type.\n\n        Args:\n            value: The element type to validate.\n\n        Returns:\n            The validated element type.\n\n        Raises:\n            ValueError: If the element type is not one of the valid types.\n        \"\"\"\n\n        if value not in ElementType.__members__.values():\n            raise ValueError(f\"Invalid element type: {value}\")\n\n        return value\n\n    @field_validator(\"id\")\n    def validate_id(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the element ID.\n\n        Args:\n            value: The element ID to validate.\n\n        Returns:\n            The validated element ID.\n\n        Raises:\n            ValueError: If the element ID is not 24 characters long.\n        \"\"\"\n\n        if len(value) != 24:\n            raise ValueError(f\"Invalid element ID: {value}, must be 24 characters long\")\n\n        return value\n\n    @field_validator(\"microversionId\")\n    def validate_mid(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the microversion ID.\n\n        Args:\n            value: The microversion ID to validate.\n\n        Returns:\n            The validated microversion ID.\n\n        Raises:\n            ValueError: If the microversion ID is not 24 characters long.\n        \"\"\"\n\n        if len(value) != 24:\n            raise ValueError(f\"Invalid microversion ID: {value}, must be 24 characters long\")\n\n        return value\n</code></pre>"},{"location":"api/element/#onshape_robotics_toolkit.models.element.Element.validate_id","title":"<code>validate_id(value)</code>","text":"<p>Validate the element ID.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The element ID to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated element ID.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the element ID is not 24 characters long.</p> Source code in <code>onshape_robotics_toolkit\\models\\element.py</code> <pre><code>@field_validator(\"id\")\ndef validate_id(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the element ID.\n\n    Args:\n        value: The element ID to validate.\n\n    Returns:\n        The validated element ID.\n\n    Raises:\n        ValueError: If the element ID is not 24 characters long.\n    \"\"\"\n\n    if len(value) != 24:\n        raise ValueError(f\"Invalid element ID: {value}, must be 24 characters long\")\n\n    return value\n</code></pre>"},{"location":"api/element/#onshape_robotics_toolkit.models.element.Element.validate_mid","title":"<code>validate_mid(value)</code>","text":"<p>Validate the microversion ID.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The microversion ID to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated microversion ID.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the microversion ID is not 24 characters long.</p> Source code in <code>onshape_robotics_toolkit\\models\\element.py</code> <pre><code>@field_validator(\"microversionId\")\ndef validate_mid(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the microversion ID.\n\n    Args:\n        value: The microversion ID to validate.\n\n    Returns:\n        The validated microversion ID.\n\n    Raises:\n        ValueError: If the microversion ID is not 24 characters long.\n    \"\"\"\n\n    if len(value) != 24:\n        raise ValueError(f\"Invalid microversion ID: {value}, must be 24 characters long\")\n\n    return value\n</code></pre>"},{"location":"api/element/#onshape_robotics_toolkit.models.element.Element.validate_type","title":"<code>validate_type(value)</code>","text":"<p>Validate the element type.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The element type to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated element type.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the element type is not one of the valid types.</p> Source code in <code>onshape_robotics_toolkit\\models\\element.py</code> <pre><code>@field_validator(\"elementType\")\ndef validate_type(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the element type.\n\n    Args:\n        value: The element type to validate.\n\n    Returns:\n        The validated element type.\n\n    Raises:\n        ValueError: If the element type is not one of the valid types.\n    \"\"\"\n\n    if value not in ElementType.__members__.values():\n        raise ValueError(f\"Invalid element type: {value}\")\n\n    return value\n</code></pre>"},{"location":"api/element/#onshape_robotics_toolkit.models.element.ElementType","title":"<code>ElementType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible element types in Onshape</p> <p>Attributes:</p> Name Type Description <code>PARTSTUDIO</code> <code>str</code> <p>Part Studio</p> <code>ASSEMBLY</code> <code>str</code> <p>Assembly</p> <code>VARIABLESTUDIO</code> <code>str</code> <p>Variable Studio</p> <code>DRAWING</code> <code>str</code> <p>Drawing</p> <code>BILLOFMATERIALS</code> <code>str</code> <p>Bill of Materials</p> <code>APPLICATION</code> <code>str</code> <p>Application</p> <code>BLOB</code> <code>str</code> <p>Blob</p> <code>FEATURESTUDIO</code> <code>str</code> <p>Feature Studio</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ElementType.PARTSTUDIO\n'PARTSTUDIO'\n&gt;&gt;&gt; ElementType.ASSEMBLY\n'ASSEMBLY'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\element.py</code> <pre><code>class ElementType(str, Enum):\n    \"\"\"\n    Enumerates the possible element types in Onshape\n\n    Attributes:\n        PARTSTUDIO (str): Part Studio\n        ASSEMBLY (str): Assembly\n        VARIABLESTUDIO (str): Variable Studio\n        DRAWING (str): Drawing\n        BILLOFMATERIALS (str): Bill of Materials\n        APPLICATION (str): Application\n        BLOB (str): Blob\n        FEATURESTUDIO (str): Feature Studio\n\n    Examples:\n        &gt;&gt;&gt; ElementType.PARTSTUDIO\n        'PARTSTUDIO'\n        &gt;&gt;&gt; ElementType.ASSEMBLY\n        'ASSEMBLY'\n    \"\"\"\n\n    PARTSTUDIO = \"PARTSTUDIO\"\n    ASSEMBLY = \"ASSEMBLY\"\n    VARIABLESTUDIO = \"VARIABLESTUDIO\"\n    DRAWING = \"DRAWING\"\n    BILLOFMATERIALS = \"BILLOFMATERIALS\"\n    APPLICATION = \"APPLICATION\"\n    BLOB = \"BLOB\"\n    FEATURESTUDIO = \"FEATURESTUDIO\"\n</code></pre>"},{"location":"api/geometry/","title":"Geometry","text":"<p>This module contains classes for representing geometry in Onshape.</p> Class <ul> <li>BaseGeometry: Abstract base class for geometry objects.</li> <li>BoxGeometry: Represents a box geometry.</li> <li>CylinderGeometry: Represents a cylinder geometry.</li> <li>SphereGeometry: Represents a sphere geometry.</li> <li>MeshGeometry: Represents a mesh geometry.</li> </ul>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.BaseGeometry","title":"<code>BaseGeometry</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for geometry objects.</p> Abstract Methods <p>to_xml: Converts the geometry object to an XML element.</p> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@dataclass\nclass BaseGeometry(ABC):\n    \"\"\"\n    Abstract base class for geometry objects.\n\n    Abstract Methods:\n        to_xml: Converts the geometry object to an XML element.\n    \"\"\"\n\n    @abstractmethod\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element: ...\n\n    @abstractmethod\n    def to_mjcf(self, root: ET.Element) -&gt; None: ...\n\n    @classmethod\n    @abstractmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"BaseGeometry\": ...\n\n    @property\n    @abstractmethod\n    def geometry_type(self) -&gt; str: ...\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.BoxGeometry","title":"<code>BoxGeometry</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseGeometry</code></p> <p>Represents a box geometry.</p> <p>Attributes:</p> Name Type Description <code>size</code> <code>tuple[float, float, float]</code> <p>The size of the box in the x, y, and z dimensions.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the box geometry to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n&gt;&gt;&gt; box.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@dataclass\nclass BoxGeometry(BaseGeometry):\n    \"\"\"\n    Represents a box geometry.\n\n    Attributes:\n        size (tuple[float, float, float]): The size of the box in the x, y, and z dimensions.\n\n    Methods:\n        to_xml: Converts the box geometry to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n        &gt;&gt;&gt; box.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    size: tuple[float, float, float]\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the box geometry to an XML element.\n\n        Args:\n            root: The root element to append the box geometry to.\n\n        Returns:\n            The XML element representing the box geometry.\n\n        Examples:\n            &gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n            &gt;&gt;&gt; box.to_xml()\n            &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n        ET.SubElement(geometry, \"box\", size=\" \".join(format_number(v) for v in self.size))\n        return geometry\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the box geometry to an MJCF element.\n\n        Args:\n            root: The root element to append the box geometry to.\n\n        Returns:\n            The MJCF element representing the box geometry.\n\n        Examples:\n            &gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n            &gt;&gt;&gt; box.to_mjcf()\n            &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geom = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        geom.set(\"type\", GeometryType.BOX)\n        geom.set(\"size\", \" \".join(format_number(v) for v in self.size))\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"BoxGeometry\":\n        \"\"\"\n        Create a box geometry from an XML element.\n\n        Args:\n            element: The XML element to create the box geometry from.\n\n        Returns:\n            The box geometry created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"geometry\")\n            &gt;&gt;&gt; ET.SubElement(element, \"box\", size=\"1.0 2.0 3.0\")\n            &gt;&gt;&gt; BoxGeometry.from_xml(element)\n            BoxGeometry(size=(1.0, 2.0, 3.0))\n        \"\"\"\n        size = tuple(float(v) for v in element.find(\"box\").attrib[\"size\"].split())\n        return cls(size)\n\n    @property\n    def geometry_type(self) -&gt; str:\n        return GeometryType.BOX\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.BoxGeometry.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a box geometry from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the box geometry from.</p> required <p>Returns:</p> Type Description <code>BoxGeometry</code> <p>The box geometry created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"geometry\")\n&gt;&gt;&gt; ET.SubElement(element, \"box\", size=\"1.0 2.0 3.0\")\n&gt;&gt;&gt; BoxGeometry.from_xml(element)\nBoxGeometry(size=(1.0, 2.0, 3.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"BoxGeometry\":\n    \"\"\"\n    Create a box geometry from an XML element.\n\n    Args:\n        element: The XML element to create the box geometry from.\n\n    Returns:\n        The box geometry created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"geometry\")\n        &gt;&gt;&gt; ET.SubElement(element, \"box\", size=\"1.0 2.0 3.0\")\n        &gt;&gt;&gt; BoxGeometry.from_xml(element)\n        BoxGeometry(size=(1.0, 2.0, 3.0))\n    \"\"\"\n    size = tuple(float(v) for v in element.find(\"box\").attrib[\"size\"].split())\n    return cls(size)\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.BoxGeometry.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the box geometry to an MJCF element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the box geometry to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The MJCF element representing the box geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n&gt;&gt;&gt; box.to_mjcf()\n&lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the box geometry to an MJCF element.\n\n    Args:\n        root: The root element to append the box geometry to.\n\n    Returns:\n        The MJCF element representing the box geometry.\n\n    Examples:\n        &gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n        &gt;&gt;&gt; box.to_mjcf()\n        &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geom = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    geom.set(\"type\", GeometryType.BOX)\n    geom.set(\"size\", \" \".join(format_number(v) for v in self.size))\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.BoxGeometry.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the box geometry to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the box geometry to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the box geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n&gt;&gt;&gt; box.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the box geometry to an XML element.\n\n    Args:\n        root: The root element to append the box geometry to.\n\n    Returns:\n        The XML element representing the box geometry.\n\n    Examples:\n        &gt;&gt;&gt; box = BoxGeometry(size=(1.0, 2.0, 3.0))\n        &gt;&gt;&gt; box.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n    ET.SubElement(geometry, \"box\", size=\" \".join(format_number(v) for v in self.size))\n    return geometry\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.CylinderGeometry","title":"<code>CylinderGeometry</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseGeometry</code></p> <p>Represents a cylinder geometry.</p> <p>Attributes:</p> Name Type Description <code>radius</code> <code>float</code> <p>The radius of the cylinder.</p> <code>length</code> <code>float</code> <p>The length of the cylinder.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the cylinder geometry to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n&gt;&gt;&gt; cylinder.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@dataclass\nclass CylinderGeometry(BaseGeometry):\n    \"\"\"\n    Represents a cylinder geometry.\n\n    Attributes:\n        radius (float): The radius of the cylinder.\n        length (float): The length of the cylinder.\n\n    Methods:\n        to_xml: Converts the cylinder geometry to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n        &gt;&gt;&gt; cylinder.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    radius: float\n    length: float\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the cylinder geometry to an XML element.\n\n        Args:\n            root: The root element to append the cylinder geometry to.\n\n        Returns:\n            The XML element representing the cylinder geometry.\n\n        Examples:\n            &gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n            &gt;&gt;&gt; cylinder.to_xml()\n            &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n        ET.SubElement(\n            geometry,\n            \"cylinder\",\n            radius=format_number(self.radius),\n            length=format_number(self.length),\n        )\n        return geometry\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the cylinder geometry to an MJCF element.\n\n        Args:\n            root: The root element to append the cylinder geometry to.\n\n        Returns:\n            The MJCF element representing the cylinder geometry.\n\n        Examples:\n            &gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n            &gt;&gt;&gt; cylinder.to_mjcf()\n            &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        geom.set(\"type\", GeometryType.CYLINDER)\n        geom.set(\"size\", f\"{format_number(self.radius)} {format_number(self.length)}\")\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"CylinderGeometry\":\n        \"\"\"\n        Create a cylinder geometry from an XML element.\n\n        Args:\n            element: The XML element to create the cylinder geometry from.\n\n        Returns:\n            The cylinder geometry created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"geometry\")\n            &gt;&gt;&gt; ET.SubElement(element, \"cylinder\", radius=\"1.0\", length=\"2.0\")\n            &gt;&gt;&gt; CylinderGeometry.from_xml(element)\n            CylinderGeometry(radius=1.0, length=2.0)\n        \"\"\"\n        radius = float(element.find(\"cylinder\").attrib[\"radius\"])\n        length = float(element.find(\"cylinder\").attrib[\"length\"])\n        return cls(radius, length)\n\n    @property\n    def geometry_type(self) -&gt; str:\n        return GeometryType.CYLINDER\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.CylinderGeometry.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a cylinder geometry from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the cylinder geometry from.</p> required <p>Returns:</p> Type Description <code>CylinderGeometry</code> <p>The cylinder geometry created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"geometry\")\n&gt;&gt;&gt; ET.SubElement(element, \"cylinder\", radius=\"1.0\", length=\"2.0\")\n&gt;&gt;&gt; CylinderGeometry.from_xml(element)\nCylinderGeometry(radius=1.0, length=2.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"CylinderGeometry\":\n    \"\"\"\n    Create a cylinder geometry from an XML element.\n\n    Args:\n        element: The XML element to create the cylinder geometry from.\n\n    Returns:\n        The cylinder geometry created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"geometry\")\n        &gt;&gt;&gt; ET.SubElement(element, \"cylinder\", radius=\"1.0\", length=\"2.0\")\n        &gt;&gt;&gt; CylinderGeometry.from_xml(element)\n        CylinderGeometry(radius=1.0, length=2.0)\n    \"\"\"\n    radius = float(element.find(\"cylinder\").attrib[\"radius\"])\n    length = float(element.find(\"cylinder\").attrib[\"length\"])\n    return cls(radius, length)\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.CylinderGeometry.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the cylinder geometry to an MJCF element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the cylinder geometry to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The MJCF element representing the cylinder geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n&gt;&gt;&gt; cylinder.to_mjcf()\n&lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the cylinder geometry to an MJCF element.\n\n    Args:\n        root: The root element to append the cylinder geometry to.\n\n    Returns:\n        The MJCF element representing the cylinder geometry.\n\n    Examples:\n        &gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n        &gt;&gt;&gt; cylinder.to_mjcf()\n        &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    geom.set(\"type\", GeometryType.CYLINDER)\n    geom.set(\"size\", f\"{format_number(self.radius)} {format_number(self.length)}\")\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.CylinderGeometry.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the cylinder geometry to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the cylinder geometry to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the cylinder geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n&gt;&gt;&gt; cylinder.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the cylinder geometry to an XML element.\n\n    Args:\n        root: The root element to append the cylinder geometry to.\n\n    Returns:\n        The XML element representing the cylinder geometry.\n\n    Examples:\n        &gt;&gt;&gt; cylinder = CylinderGeometry(radius=1.0, length=2.0)\n        &gt;&gt;&gt; cylinder.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n    ET.SubElement(\n        geometry,\n        \"cylinder\",\n        radius=format_number(self.radius),\n        length=format_number(self.length),\n    )\n    return geometry\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.GeometryType","title":"<code>GeometryType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible geometry types in Onshape.</p> <p>Attributes:</p> Name Type Description <code>BOX</code> <code>str</code> <p>Box geometry.</p> <code>CYLINDER</code> <code>str</code> <p>Cylinder geometry.</p> <code>SPHERE</code> <code>str</code> <p>Sphere geometry.</p> <code>MESH</code> <code>str</code> <p>Mesh geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; GeometryType.BOX\n'BOX'\n&gt;&gt;&gt; GeometryType.CYLINDER\n'CYLINDER'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>class GeometryType(str, Enum):\n    \"\"\"\n    Enumerates the possible geometry types in Onshape.\n\n    Attributes:\n        BOX (str): Box geometry.\n        CYLINDER (str): Cylinder geometry.\n        SPHERE (str): Sphere geometry.\n        MESH (str): Mesh geometry.\n\n    Examples:\n        &gt;&gt;&gt; GeometryType.BOX\n        'BOX'\n        &gt;&gt;&gt; GeometryType.CYLINDER\n        'CYLINDER'\n    \"\"\"\n\n    BOX = \"box\"\n    CYLINDER = \"cylinder\"\n    SPHERE = \"sphere\"\n    MESH = \"mesh\"\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.MeshGeometry","title":"<code>MeshGeometry</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseGeometry</code></p> <p>Represents a mesh geometry.</p> <p>Attributes:</p> Name Type Description <code>filename</code> <code>str</code> <p>The filename of the mesh.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the mesh geometry to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n&gt;&gt;&gt; mesh.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@dataclass\nclass MeshGeometry(BaseGeometry):\n    \"\"\"\n    Represents a mesh geometry.\n\n    Attributes:\n        filename (str): The filename of the mesh.\n\n    Methods:\n        to_xml: Converts the mesh geometry to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n        &gt;&gt;&gt; mesh.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    filename: str\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the mesh geometry to an XML element.\n\n        Args:\n            root: The root element to append the mesh geometry to.\n\n        Returns:\n            The XML element representing the mesh geometry.\n\n        Examples:\n            &gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n            &gt;&gt;&gt; mesh.to_xml()\n            &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n        ET.SubElement(geometry, \"mesh\", filename=self.filename)\n        return geometry\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the mesh geometry to an MJCF element.\n\n        Args:\n            root: The root element to append the mesh geometry to.\n\n        Returns:\n            The MJCF element representing the mesh geometry.\n\n        Examples:\n            &gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n            &gt;&gt;&gt; mesh.to_mjcf()\n            &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        geom.set(\"type\", GeometryType.MESH)\n        geom.set(\"mesh\", self.mesh_name)\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"MeshGeometry\":\n        \"\"\"\n        Create a mesh geometry from an XML element.\n\n        Args:\n            element: The XML element to create the mesh geometry from.\n\n        Returns:\n            The mesh geometry created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"geometry\")\n            &gt;&gt;&gt; ET.SubElement(element, \"mesh\", filename=\"mesh.stl\")\n            &gt;&gt;&gt; MeshGeometry.from_xml(element)\n            MeshGeometry(filename=\"mesh.stl\")\n        \"\"\"\n        filename = element.find(\"mesh\").attrib[\"filename\"]\n        return cls(filename)\n\n    def __post_init__(self) -&gt; None:\n        self.filename = xml_escape(self.filename)\n\n    @property\n    def geometry_type(self) -&gt; str:\n        return GeometryType.MESH\n\n    @property\n    def mesh_name(self) -&gt; str:\n        file_name_w_ext = os.path.basename(self.filename)\n        return os.path.splitext(file_name_w_ext)[0]\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.MeshGeometry.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a mesh geometry from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the mesh geometry from.</p> required <p>Returns:</p> Type Description <code>MeshGeometry</code> <p>The mesh geometry created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"geometry\")\n&gt;&gt;&gt; ET.SubElement(element, \"mesh\", filename=\"mesh.stl\")\n&gt;&gt;&gt; MeshGeometry.from_xml(element)\nMeshGeometry(filename=\"mesh.stl\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"MeshGeometry\":\n    \"\"\"\n    Create a mesh geometry from an XML element.\n\n    Args:\n        element: The XML element to create the mesh geometry from.\n\n    Returns:\n        The mesh geometry created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"geometry\")\n        &gt;&gt;&gt; ET.SubElement(element, \"mesh\", filename=\"mesh.stl\")\n        &gt;&gt;&gt; MeshGeometry.from_xml(element)\n        MeshGeometry(filename=\"mesh.stl\")\n    \"\"\"\n    filename = element.find(\"mesh\").attrib[\"filename\"]\n    return cls(filename)\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.MeshGeometry.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the mesh geometry to an MJCF element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the mesh geometry to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The MJCF element representing the mesh geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n&gt;&gt;&gt; mesh.to_mjcf()\n&lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the mesh geometry to an MJCF element.\n\n    Args:\n        root: The root element to append the mesh geometry to.\n\n    Returns:\n        The MJCF element representing the mesh geometry.\n\n    Examples:\n        &gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n        &gt;&gt;&gt; mesh.to_mjcf()\n        &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    geom.set(\"type\", GeometryType.MESH)\n    geom.set(\"mesh\", self.mesh_name)\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.MeshGeometry.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the mesh geometry to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the mesh geometry to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the mesh geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n&gt;&gt;&gt; mesh.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the mesh geometry to an XML element.\n\n    Args:\n        root: The root element to append the mesh geometry to.\n\n    Returns:\n        The XML element representing the mesh geometry.\n\n    Examples:\n        &gt;&gt;&gt; mesh = MeshGeometry(filename=\"mesh.stl\")\n        &gt;&gt;&gt; mesh.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n    ET.SubElement(geometry, \"mesh\", filename=self.filename)\n    return geometry\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.SphereGeometry","title":"<code>SphereGeometry</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseGeometry</code></p> <p>Represents a sphere geometry.</p> <p>Attributes:</p> Name Type Description <code>radius</code> <code>float</code> <p>The radius of the sphere.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the sphere geometry to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n&gt;&gt;&gt; sphere.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@dataclass\nclass SphereGeometry(BaseGeometry):\n    \"\"\"\n    Represents a sphere geometry.\n\n    Attributes:\n        radius (float): The radius of the sphere.\n\n    Methods:\n        to_xml: Converts the sphere geometry to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n        &gt;&gt;&gt; sphere.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    radius: float\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the sphere geometry to an XML element.\n\n        Args:\n            root: The root element to append the sphere geometry to.\n\n        Returns:\n            The XML element representing the sphere geometry.\n\n        Examples:\n            &gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n            &gt;&gt;&gt; sphere.to_xml()\n            &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n        ET.SubElement(geometry, \"sphere\", radius=format_number(self.radius))\n        return geometry\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the sphere geometry to an MJCF element.\n\n        Args:\n            root: The root element to append the sphere geometry to.\n\n        Returns:\n            The MJCF element representing the sphere geometry.\n\n        Examples:\n            &gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n            &gt;&gt;&gt; sphere.to_mjcf()\n            &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        geom.set(\"type\", GeometryType.SPHERE)\n        geom.set(\"size\", format_number(self.radius))\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"SphereGeometry\":\n        \"\"\"\n        Create a sphere geometry from an XML element.\n\n        Args:\n            element: The XML element to create the sphere geometry from.\n\n        Returns:\n            The sphere geometry created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"geometry\")\n            &gt;&gt;&gt; ET.SubElement(element, \"sphere\", radius=\"1.0\")\n            &gt;&gt;&gt; SphereGeometry.from_xml(element)\n            SphereGeometry(radius=1.0)\n        \"\"\"\n        radius = float(element.find(\"sphere\").attrib[\"radius\"])\n        return cls(radius)\n\n    @property\n    def geometry_type(self) -&gt; str:\n        return GeometryType.SPHERE\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.SphereGeometry.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a sphere geometry from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the sphere geometry from.</p> required <p>Returns:</p> Type Description <code>SphereGeometry</code> <p>The sphere geometry created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"geometry\")\n&gt;&gt;&gt; ET.SubElement(element, \"sphere\", radius=\"1.0\")\n&gt;&gt;&gt; SphereGeometry.from_xml(element)\nSphereGeometry(radius=1.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"SphereGeometry\":\n    \"\"\"\n    Create a sphere geometry from an XML element.\n\n    Args:\n        element: The XML element to create the sphere geometry from.\n\n    Returns:\n        The sphere geometry created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"geometry\")\n        &gt;&gt;&gt; ET.SubElement(element, \"sphere\", radius=\"1.0\")\n        &gt;&gt;&gt; SphereGeometry.from_xml(element)\n        SphereGeometry(radius=1.0)\n    \"\"\"\n    radius = float(element.find(\"sphere\").attrib[\"radius\"])\n    return cls(radius)\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.SphereGeometry.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the sphere geometry to an MJCF element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the sphere geometry to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The MJCF element representing the sphere geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n&gt;&gt;&gt; sphere.to_mjcf()\n&lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the sphere geometry to an MJCF element.\n\n    Args:\n        root: The root element to append the sphere geometry to.\n\n    Returns:\n        The MJCF element representing the sphere geometry.\n\n    Examples:\n        &gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n        &gt;&gt;&gt; sphere.to_mjcf()\n        &lt;Element 'geom' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    geom.set(\"type\", GeometryType.SPHERE)\n    geom.set(\"size\", format_number(self.radius))\n</code></pre>"},{"location":"api/geometry/#onshape_robotics_toolkit.models.geometry.SphereGeometry.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the sphere geometry to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the sphere geometry to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the sphere geometry.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n&gt;&gt;&gt; sphere.to_xml()\n&lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\geometry.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the sphere geometry to an XML element.\n\n    Args:\n        root: The root element to append the sphere geometry to.\n\n    Returns:\n        The XML element representing the sphere geometry.\n\n    Examples:\n        &gt;&gt;&gt; sphere = SphereGeometry(radius=1.0)\n        &gt;&gt;&gt; sphere.to_xml()\n        &lt;Element 'geometry' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geometry = ET.Element(\"geometry\") if root is None else ET.SubElement(root, \"geometry\")\n    ET.SubElement(geometry, \"sphere\", radius=format_number(self.radius))\n    return geometry\n</code></pre>"},{"location":"api/graph/","title":"Graph","text":"<p>This module contains functions to create and manipulate graphs from Onshape assembly data.</p>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.add_edges_to_graph","title":"<code>add_edges_to_graph(graph, mates)</code>","text":"<p>Add edges to the graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The graph to add edges to.</p> required <code>mates</code> <code>dict[str, Union[MateFeatureData]]</code> <p>Dictionary of mates in the assembly.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; add_edges_to_graph(graph, mates)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def add_edges_to_graph(graph: nx.Graph, mates: dict[str, Union[MateFeatureData]]) -&gt; None:\n    \"\"\"\n    Add edges to the graph.\n\n    Args:\n        graph: The graph to add edges to.\n        mates: Dictionary of mates in the assembly.\n\n    Examples:\n        &gt;&gt;&gt; add_edges_to_graph(graph, mates)\n    \"\"\"\n    for mate in mates:\n        try:\n            child, parent = mate.split(MATE_JOINER)\n            graph.add_edge(\n                parent,\n                child,\n            )\n        except KeyError:\n            LOGGER.warning(f\"Mate {mate} not found\")\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.add_nodes_to_graph","title":"<code>add_nodes_to_graph(graph, occurrences, instances, parts, use_user_defined_root)</code>","text":"<p>Add nodes to the graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The graph to add nodes to.</p> required <code>occurrences</code> <code>dict[str, Occurrence]</code> <p>Dictionary of occurrences in the assembly.</p> required <code>instances</code> <code>dict[str, Union[PartInstance, AssemblyInstance]]</code> <p>Dictionary of instances in the assembly.</p> required <code>parts</code> <code>dict[str, Part]</code> <p>Dictionary of parts in the assembly.</p> required <code>use_user_defined_root</code> <code>bool</code> <p>Whether to use the user defined root node.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The user defined root node if it exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add_nodes_to_graph(graph, occurrences, instances, parts, use_user_defined_root=True)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def add_nodes_to_graph(\n    graph: nx.Graph,\n    occurrences: dict[str, Occurrence],\n    instances: dict[str, Union[PartInstance, AssemblyInstance]],\n    parts: dict[str, Part],\n    use_user_defined_root: bool,\n) -&gt; str:\n    \"\"\"\n    Add nodes to the graph.\n\n    Args:\n        graph: The graph to add nodes to.\n        occurrences: Dictionary of occurrences in the assembly.\n        instances: Dictionary of instances in the assembly.\n        parts: Dictionary of parts in the assembly.\n        use_user_defined_root: Whether to use the user defined root node.\n\n    Returns:\n        The user defined root node if it exists.\n\n    Examples:\n        &gt;&gt;&gt; add_nodes_to_graph(graph, occurrences, instances, parts, use_user_defined_root=True)\n    \"\"\"\n    user_defined_root = None\n    for occurrence in occurrences:\n        if use_user_defined_root and occurrences[occurrence].fixed:\n            user_defined_root = occurrence\n\n        if instances[occurrence].type == InstanceType.PART:\n            try:\n                if occurrences[occurrence].hidden:\n                    continue\n\n                graph.add_node(occurrence, **parts[occurrence].model_dump())\n            except KeyError:\n                LOGGER.warning(f\"Part {occurrence} not found\")\n    return user_defined_root\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.convert_to_digraph","title":"<code>convert_to_digraph(graph, user_defined_root=None)</code>","text":"<p>Convert a graph to a directed graph and calculate the root node using closeness centrality.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The graph to convert.</p> required <code>user_defined_root</code> <code>Union[str, None]</code> <p>The node to use as the root node.</p> <code>None</code> <p>Returns:</p> Type Description <code>DiGraph</code> <p>The directed graph and the root node of the graph, calculated using closeness centrality.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; graph = nx.Graph()\n&gt;&gt;&gt; convert_to_digraph(graph)\n(digraph, root_node)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def convert_to_digraph(graph: nx.Graph, user_defined_root: Union[str, None] = None) -&gt; nx.DiGraph:\n    \"\"\"\n    Convert a graph to a directed graph and calculate the root node using closeness centrality.\n\n    Args:\n        graph: The graph to convert.\n        user_defined_root: The node to use as the root node.\n\n    Returns:\n        The directed graph and the root node of the graph, calculated using closeness centrality.\n\n    Examples:\n        &gt;&gt;&gt; graph = nx.Graph()\n        &gt;&gt;&gt; convert_to_digraph(graph)\n        (digraph, root_node)\n    \"\"\"\n\n    centrality = nx.closeness_centrality(graph)\n    root_node = user_defined_root if user_defined_root else max(centrality, key=centrality.get)\n\n    bfs_graph = nx.bfs_tree(graph, root_node)\n    di_graph = nx.DiGraph(bfs_graph)\n\n    for u, v, data in graph.edges(data=True):\n        if not di_graph.has_edge(u, v) and not di_graph.has_edge(v, u):\n            # decide which edge to keep\n            if centrality[u] &gt; centrality[v]:\n                di_graph.add_edge(u, v, **data)\n            else:\n                di_graph.add_edge(v, u, **data)\n\n    # TODO: Edges and nodes lose their data during this conversion, fix this\n    return di_graph, root_node\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.create_graph","title":"<code>create_graph(occurrences, instances, parts, mates, directed=True, use_user_defined_root=True)</code>","text":"<p>Create a graph from onshape assembly data.</p> <p>Parameters:</p> Name Type Description Default <code>occurrences</code> <code>dict[str, Occurrence]</code> <p>Dictionary of occurrences in the assembly.</p> required <code>instances</code> <code>dict[str, Union[PartInstance, AssemblyInstance]]</code> <p>Dictionary of instances in the assembly.</p> required <code>parts</code> <code>dict[str, Part]</code> <p>Dictionary of parts in the assembly.</p> required <code>mates</code> <code>dict[str, Union[MateFeatureData]]</code> <p>Dictionary of mates in the assembly.</p> required <p>Returns:</p> Type Description <code>tuple[DiGraph, str]</code> <p>The graph created from the assembly data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; occurrences = get_occurrences(assembly)\n&gt;&gt;&gt; instances = get_instances(assembly)\n&gt;&gt;&gt; parts = get_parts(assembly, client)\n&gt;&gt;&gt; mates = get_mates(assembly)\n&gt;&gt;&gt; create_graph(occurrences, instances, parts, mates, directed=True)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def create_graph(\n    occurrences: dict[str, Occurrence],\n    instances: dict[str, Union[PartInstance, AssemblyInstance]],\n    parts: dict[str, Part],\n    mates: dict[str, Union[MateFeatureData]],\n    directed: bool = True,\n    use_user_defined_root: bool = True,\n) -&gt; tuple[nx.DiGraph, str]:\n    \"\"\"\n    Create a graph from onshape assembly data.\n\n    Args:\n        occurrences: Dictionary of occurrences in the assembly.\n        instances: Dictionary of instances in the assembly.\n        parts: Dictionary of parts in the assembly.\n        mates: Dictionary of mates in the assembly.\n\n    Returns:\n        The graph created from the assembly data.\n\n    Examples:\n        &gt;&gt;&gt; occurrences = get_occurrences(assembly)\n        &gt;&gt;&gt; instances = get_instances(assembly)\n        &gt;&gt;&gt; parts = get_parts(assembly, client)\n        &gt;&gt;&gt; mates = get_mates(assembly)\n        &gt;&gt;&gt; create_graph(occurrences, instances, parts, mates, directed=True)\n    \"\"\"\n\n    graph = nx.Graph()\n    user_defined_root = add_nodes_to_graph(graph, occurrences, instances, parts, use_user_defined_root)\n\n    if user_defined_root and user_defined_root.split(SUBASSEMBLY_JOINER)[0] in parts:\n        # this means that the user defined root is a rigid subassembly\n        user_defined_root = user_defined_root.split(SUBASSEMBLY_JOINER)[0]\n\n    add_edges_to_graph(graph, mates)\n\n    cur_graph = remove_unconnected_subgraphs(graph)\n\n    if directed:\n        output_graph, root_node = convert_to_digraph(cur_graph, user_defined_root)\n    else:\n        output_graph = cur_graph\n        root_node = None\n\n    LOGGER.info(\n        f\"Graph created with {len(output_graph.nodes)} nodes and \"\n        f\"{len(output_graph.edges)} edges with root node: {root_node}\"\n    )\n\n    return output_graph, root_node\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.get_root_node","title":"<code>get_root_node(graph)</code>","text":"<p>Get the root node of a directed graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>DiGraph</code> <p>The directed graph.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The root node of the graph.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; graph = nx.DiGraph()\n&gt;&gt;&gt; get_root_node(graph)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def get_root_node(graph: nx.DiGraph) -&gt; str:\n    \"\"\"\n    Get the root node of a directed graph.\n\n    Args:\n        graph: The directed graph.\n\n    Returns:\n        The root node of the graph.\n\n    Examples:\n        &gt;&gt;&gt; graph = nx.DiGraph()\n        &gt;&gt;&gt; get_root_node(graph)\n    \"\"\"\n    return next(nx.topological_sort(graph))\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.get_topological_order","title":"<code>get_topological_order(graph)</code>","text":"<p>Get the topological order of a directed graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>DiGraph</code> <p>The directed graph.</p> required <p>Returns:</p> Type Description <code>tuple[str]</code> <p>The topological order of the graph.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; graph = nx.DiGraph()\n&gt;&gt;&gt; get_topological_order(graph)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def get_topological_order(graph: nx.DiGraph) -&gt; tuple[str]:\n    \"\"\"\n    Get the topological order of a directed graph.\n\n    Args:\n        graph: The directed graph.\n\n    Returns:\n        The topological order of the graph.\n\n    Examples:\n        &gt;&gt;&gt; graph = nx.DiGraph()\n        &gt;&gt;&gt; get_topological_order(graph)\n    \"\"\"\n    try:\n        order = tuple(nx.topological_sort(graph))\n    except nx.NetworkXUnfeasible:\n        LOGGER.warning(\"Graph has one or more cycles\")\n        order = None\n\n    return order\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.plot_graph","title":"<code>plot_graph(graph, file_name=None)</code>","text":"<p>Display the graph using networkx and matplotlib, or save it as an image file.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Union[Graph, DiGraph]</code> <p>The graph to display or save.</p> required <code>file_name</code> <code>Optional[str]</code> <p>The name of the image file to save. If None, the graph will be displayed.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; graph = nx.Graph()\n&gt;&gt;&gt; plot_graph(graph)\n&gt;&gt;&gt; plot_graph(graph, \"graph.png\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def plot_graph(graph: Union[nx.Graph, nx.DiGraph], file_name: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Display the graph using networkx and matplotlib, or save it as an image file.\n\n    Args:\n        graph: The graph to display or save.\n        file_name: The name of the image file to save. If None, the graph will be displayed.\n\n    Examples:\n        &gt;&gt;&gt; graph = nx.Graph()\n        &gt;&gt;&gt; plot_graph(graph)\n        &gt;&gt;&gt; plot_graph(graph, \"graph.png\")\n    \"\"\"\n    colors = [f\"#{random.randint(0, 0xFFFFFF):06x}\" for _ in range(len(graph.nodes))]  # noqa: S311\n    plt.figure(figsize=(8, 8))\n    pos = nx.shell_layout(graph)\n\n    if file_name:\n        nx.draw(\n            graph,\n            pos,\n            with_labels=True,\n            arrows=True,\n            node_color=colors,\n            edge_color=\"white\",\n            font_color=\"white\",\n        )\n        plt.savefig(file_name, transparent=True)\n        plt.close()\n    else:\n        nx.draw(\n            graph,\n            pos,\n            with_labels=True,\n            arrows=True,\n            node_color=colors,\n        )\n        plt.show()\n</code></pre>"},{"location":"api/graph/#onshape_robotics_toolkit.graph.remove_unconnected_subgraphs","title":"<code>remove_unconnected_subgraphs(graph)</code>","text":"<p>Remove unconnected subgraphs from the graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The graph to remove unconnected subgraphs from.</p> required <p>Returns:</p> Type Description <code>Graph</code> <p>The main connected subgraph of the graph, which is the largest connected subgraph.</p> Source code in <code>onshape_robotics_toolkit\\graph.py</code> <pre><code>def remove_unconnected_subgraphs(graph: nx.Graph) -&gt; nx.Graph:\n    \"\"\"\n    Remove unconnected subgraphs from the graph.\n\n    Args:\n        graph: The graph to remove unconnected subgraphs from.\n\n    Returns:\n        The main connected subgraph of the graph, which is the largest connected subgraph.\n    \"\"\"\n    if not nx.is_connected(graph):\n        LOGGER.warning(\"Graph has one or more unconnected subgraphs\")\n        sub_graphs = list(nx.connected_components(graph))\n        main_graph_nodes = max(sub_graphs, key=len)\n        main_graph = graph.subgraph(main_graph_nodes).copy()\n        LOGGER.warning(f\"Reduced graph nodes from {len(graph.nodes)} to {len(main_graph.nodes)}\")\n        LOGGER.warning(f\"Reduced graph edges from {len(graph.edges)} to {len(main_graph.edges)}\")\n        return main_graph\n    return graph\n</code></pre>"},{"location":"api/joint/","title":"Joint","text":"<p>This module contains classes for defining joints in a URDF robot model.</p> Class <ul> <li>BaseJoint: Abstract base class for joint objects.</li> <li>DummyJoint: Represents a dummy joint.</li> <li>RevoluteJoint: Represents a revolute joint.</li> <li>ContinuousJoint: Represents a continuous joint.</li> <li>PrismaticJoint: Represents a prismatic joint.</li> <li>FixedJoint: Represents a fixed joint.</li> <li>FloatingJoint: Represents a floating joint.</li> <li>PlanarJoint: Represents a planar joint.</li> </ul> Dataclass <ul> <li>JointLimits: Contains the limits for a joint.</li> <li>JointMimic: Contains the mimic information for a joint.</li> <li>JointDynamics: Contains the dynamics information for a joint.</li> <li>Axis: Contains the axis information for a joint.</li> <li>Origin: Contains the origin information for a joint.</li> </ul> Enum <ul> <li>JointType: Enumerates the possible joint types in Onshape (revolute, continuous, prismatic,   fixed, floating, planar).</li> </ul>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.BaseJoint","title":"<code>BaseJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for joint objects.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the joint.</p> <code>parent</code> <code>str</code> <p>The parent link of the joint.</p> <code>child</code> <code>str</code> <p>The child link of the joint.</p> <code>origin</code> <code>Origin</code> <p>The origin of the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the joint to an XML element.</p> Abstract Properties <p>joint_type: Returns the type of the joint.</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass BaseJoint(ABC):\n    \"\"\"\n    Abstract base class for joint objects.\n\n    Attributes:\n        name (str): The name of the joint.\n        parent (str): The parent link of the joint.\n        child (str): The child link of the joint.\n        origin (Origin): The origin of the joint.\n\n    Methods:\n        to_xml: Converts the joint to an XML element.\n\n    Abstract Properties:\n        joint_type: Returns the type of the joint.\n    \"\"\"\n\n    name: str\n    parent: str\n    child: str\n    origin: Origin\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the joint to an XML element.\n\n        Args:\n            root: The root element to append the joint to.\n\n        Returns:\n            The XML element representing the joint.\n        \"\"\"\n\n        joint = ET.Element(\"joint\") if root is None else ET.SubElement(root, \"joint\")\n        joint.set(\"name\", self.name)\n        joint.set(\"type\", self.joint_type)\n        self.origin.to_xml(joint)\n        ET.SubElement(joint, \"parent\", link=self.parent)\n        ET.SubElement(joint, \"child\", link=self.child)\n        return joint\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Converts the joint to an XML element and appends it to the given root element.\n\n        Args:\n            root: The root element to append the joint to.\n        \"\"\"\n\n        joint = ET.SubElement(root, \"joint\", name=self.name, type=MJCF_JOINT_MAP[self.joint_type])\n        joint.set(\"pos\", \" \".join(map(str, self.origin.xyz)))\n\n    @property\n    @abstractmethod\n    def joint_type(self) -&gt; str: ...\n\n    @classmethod\n    @abstractmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"BaseJoint\": ...\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.BaseJoint.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Converts the joint to an XML element and appends it to the given root element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the joint to.</p> required Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Converts the joint to an XML element and appends it to the given root element.\n\n    Args:\n        root: The root element to append the joint to.\n    \"\"\"\n\n    joint = ET.SubElement(root, \"joint\", name=self.name, type=MJCF_JOINT_MAP[self.joint_type])\n    joint.set(\"pos\", \" \".join(map(str, self.origin.xyz)))\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.BaseJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the joint.</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the joint to an XML element.\n\n    Args:\n        root: The root element to append the joint to.\n\n    Returns:\n        The XML element representing the joint.\n    \"\"\"\n\n    joint = ET.Element(\"joint\") if root is None else ET.SubElement(root, \"joint\")\n    joint.set(\"name\", self.name)\n    joint.set(\"type\", self.joint_type)\n    self.origin.to_xml(joint)\n    ET.SubElement(joint, \"parent\", link=self.parent)\n    ET.SubElement(joint, \"child\", link=self.child)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.ContinuousJoint","title":"<code>ContinuousJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a continuous joint.</p> <p>Attributes:</p> Name Type Description <code>mimic</code> <code>JointMimic</code> <p>The mimic information for the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the continuous joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = ContinuousJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass ContinuousJoint(BaseJoint):\n    \"\"\"\n    Represents a continuous joint.\n\n    Attributes:\n        mimic (JointMimic): The mimic information for the joint.\n\n    Methods:\n        to_xml: Converts the continuous joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = ContinuousJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    mimic: JointMimic | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the continuous joint to an XML element.\n\n        Args:\n            root: The root element to append the continuous joint to.\n\n        Returns:\n            The XML element representing the continuous joint.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; joint = ContinuousJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ...     mimic=mimic,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        if self.mimic is not None:\n            self.mimic.to_xml(joint)\n        return joint\n\n    def to_mjcf(self, root):\n        return super().to_mjcf(root)\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"ContinuousJoint\":\n        \"\"\"\n        Create a continuous joint from an XML element.\n\n        Args:\n            element: The XML element to create the continuous joint from.\n\n        Returns:\n            The continuous joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"continuous\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n            &gt;&gt;&gt; ContinuousJoint.from_xml(element)\n\n            ContinuousJoint(\n                name=\"joint1\",\n                parent=\"base_link\",\n                child=\"link1\",\n                origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n                mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            )\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n\n        # Handle mimic\n        mimic_element = element.find(\"mimic\")\n        mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n        return cls(name, parent, child, origin, mimic)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"continuous\".\n        \"\"\"\n\n        return JointType.CONTINUOUS\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.ContinuousJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"continuous\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.ContinuousJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a continuous joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the continuous joint from.</p> required <p>Returns:</p> Type Description <code>ContinuousJoint</code> <p>The continuous joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"continuous\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n&gt;&gt;&gt; ContinuousJoint.from_xml(element)\n</code></pre> <p>ContinuousJoint(     name=\"joint1\",     parent=\"base_link\",     child=\"link1\",     origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),     mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0) )</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"ContinuousJoint\":\n    \"\"\"\n    Create a continuous joint from an XML element.\n\n    Args:\n        element: The XML element to create the continuous joint from.\n\n    Returns:\n        The continuous joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"continuous\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n        &gt;&gt;&gt; ContinuousJoint.from_xml(element)\n\n        ContinuousJoint(\n            name=\"joint1\",\n            parent=\"base_link\",\n            child=\"link1\",\n            origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n            mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        )\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n\n    # Handle mimic\n    mimic_element = element.find(\"mimic\")\n    mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n    return cls(name, parent, child, origin, mimic)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.ContinuousJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the continuous joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the continuous joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the continuous joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = ContinuousJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the continuous joint to an XML element.\n\n    Args:\n        root: The root element to append the continuous joint to.\n\n    Returns:\n        The XML element representing the continuous joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = ContinuousJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    if self.mimic is not None:\n        self.mimic.to_xml(joint)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.DummyJoint","title":"<code>DummyJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a dummy joint.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; joint = DummyJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n... )\n&gt;&gt;&gt; joint.joint_type\n'dummy'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass DummyJoint(BaseJoint):\n    \"\"\"\n    Represents a dummy joint.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; joint = DummyJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ... )\n        &gt;&gt;&gt; joint.joint_type\n        'dummy'\n    \"\"\"\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"DummyJoint\":\n        \"\"\"\n        Create a dummy joint from an XML element.\n\n        Args:\n            element: The XML element to create the dummy joint from.\n\n        Returns:\n            The dummy joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"dummy\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; DummyJoint.from_xml(element)\n            DummyJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)))\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n        return cls(name, parent, child, origin)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"dummy\".\n        \"\"\"\n\n        return \"dummy\"\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.DummyJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"dummy\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.DummyJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a dummy joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the dummy joint from.</p> required <p>Returns:</p> Type Description <code>DummyJoint</code> <p>The dummy joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"dummy\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; DummyJoint.from_xml(element)\nDummyJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"DummyJoint\":\n    \"\"\"\n    Create a dummy joint from an XML element.\n\n    Args:\n        element: The XML element to create the dummy joint from.\n\n    Returns:\n        The dummy joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"dummy\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; DummyJoint.from_xml(element)\n        DummyJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)))\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n    return cls(name, parent, child, origin)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FixedJoint","title":"<code>FixedJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a fixed joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the fixed joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; joint = FixedJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass FixedJoint(BaseJoint):\n    \"\"\"\n    Represents a fixed joint.\n\n    Methods:\n        to_xml: Converts the fixed joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; joint = FixedJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the fixed joint to an XML element.\n\n        Args:\n            root: The root element to append the fixed joint to.\n\n        Returns:\n            The XML element representing the fixed joint.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; joint = FixedJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        return joint\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"FixedJoint\":\n        \"\"\"\n        Create a fixed joint from an XML element.\n\n        Args:\n            element: The XML element to create the fixed joint from.\n\n        Returns:\n            The fixed joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"fixed\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; FixedJoint.from_xml(element)\n\n            FixedJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n        return cls(name, parent, child, origin)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"fixed\".\n        \"\"\"\n\n        return JointType.FIXED\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FixedJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"fixed\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FixedJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a fixed joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the fixed joint from.</p> required <p>Returns:</p> Type Description <code>FixedJoint</code> <p>The fixed joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"fixed\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; FixedJoint.from_xml(element)\n</code></pre> <p>FixedJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"FixedJoint\":\n    \"\"\"\n    Create a fixed joint from an XML element.\n\n    Args:\n        element: The XML element to create the fixed joint from.\n\n    Returns:\n        The fixed joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"fixed\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; FixedJoint.from_xml(element)\n\n        FixedJoint(name=\"joint1\", parent=\"base_link\", child=\"link1\", origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n    return cls(name, parent, child, origin)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FixedJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the fixed joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the fixed joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the fixed joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; joint = FixedJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the fixed joint to an XML element.\n\n    Args:\n        root: The root element to append the fixed joint to.\n\n    Returns:\n        The XML element representing the fixed joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; joint = FixedJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FloatingJoint","title":"<code>FloatingJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a floating joint.</p> <p>Attributes:</p> Name Type Description <code>mimic</code> <code>JointMimic</code> <p>The mimic information for the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the floating joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = FloatingJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass FloatingJoint(BaseJoint):\n    \"\"\"\n    Represents a floating joint.\n\n    Attributes:\n        mimic (JointMimic): The mimic information for the joint.\n\n    Methods:\n        to_xml: Converts the floating joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = FloatingJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    mimic: JointMimic | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the floating joint to an XML element.\n\n        Args:\n            root: The root element to append the floating joint to.\n\n        Returns:\n            The XML element representing the floating joint.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; joint = FloatingJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ...     mimic=mimic,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        if self.mimic is not None:\n            self.mimic.to_xml(joint)\n        return joint\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"FloatingJoint\":\n        \"\"\"\n        Create a floating joint from an XML element.\n\n        Args:\n            element: The XML element to create the floating joint from.\n\n        Returns:\n            The floating joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"floating\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n            &gt;&gt;&gt; FloatingJoint.from_xml(element)\n\n            FloatingJoint(\n                name=\"joint1\",\n                parent=\"base_link\",\n                child=\"link1\",\n                origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n                mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            )\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n\n        mimic_element = element.find(\"mimic\")\n        mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n        return cls(name, parent, child, origin, mimic)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"floating\".\n        \"\"\"\n\n        return JointType.FLOATING\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FloatingJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"floating\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FloatingJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a floating joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the floating joint from.</p> required <p>Returns:</p> Type Description <code>FloatingJoint</code> <p>The floating joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"floating\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n&gt;&gt;&gt; FloatingJoint.from_xml(element)\n</code></pre> <p>FloatingJoint(     name=\"joint1\",     parent=\"base_link\",     child=\"link1\",     origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),     mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0) )</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"FloatingJoint\":\n    \"\"\"\n    Create a floating joint from an XML element.\n\n    Args:\n        element: The XML element to create the floating joint from.\n\n    Returns:\n        The floating joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"floating\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n        &gt;&gt;&gt; FloatingJoint.from_xml(element)\n\n        FloatingJoint(\n            name=\"joint1\",\n            parent=\"base_link\",\n            child=\"link1\",\n            origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n            mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        )\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n\n    mimic_element = element.find(\"mimic\")\n    mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n    return cls(name, parent, child, origin, mimic)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.FloatingJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the floating joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the floating joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the floating joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = FloatingJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the floating joint to an XML element.\n\n    Args:\n        root: The root element to append the floating joint to.\n\n    Returns:\n        The XML element representing the floating joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = FloatingJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    if self.mimic is not None:\n        self.mimic.to_xml(joint)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointDynamics","title":"<code>JointDynamics</code>  <code>dataclass</code>","text":"<p>Represents the dynamics information for a joint.</p> <p>Attributes:</p> Name Type Description <code>damping</code> <code>float</code> <p>The damping coefficient of the joint.</p> <code>friction</code> <code>float</code> <p>The friction coefficient of the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the dynamics information to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; dynamics.to_xml()\n&lt;Element 'dynamics' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass JointDynamics:\n    \"\"\"\n    Represents the dynamics information for a joint.\n\n    Attributes:\n        damping (float): The damping coefficient of the joint.\n        friction (float): The friction coefficient of the joint.\n\n    Methods:\n        to_xml: Converts the dynamics information to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; dynamics.to_xml()\n        &lt;Element 'dynamics' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    damping: float\n    friction: float\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the dynamics information to an XML element.\n\n        Args:\n            root: The root element to append the dynamics information to.\n\n        Returns:\n            The XML element representing the dynamics information.\n\n        Examples:\n            &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n            &gt;&gt;&gt; dynamics.to_xml()\n            &lt;Element 'dynamics' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = ET.Element(\"dynamics\") if root is None else ET.SubElement(root, \"dynamics\")\n        joint.set(\"damping\", format_number(self.damping))\n        joint.set(\"friction\", format_number(self.friction))\n        return joint\n\n    def from_xml(cls, element: ET.Element) -&gt; \"JointDynamics\":\n        \"\"\"\n        Create joint dynamics from an XML element.\n\n        Args:\n            element: The XML element to create the joint dynamics from.\n\n        Returns:\n            The joint dynamics created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"dynamics\")\n            &gt;&gt;&gt; element.set(\"damping\", \"0.0\")\n            &gt;&gt;&gt; element.set(\"friction\", \"0.0\")\n            &gt;&gt;&gt; JointDynamics.from_xml(element)\n            JointDynamics(damping=0.0, friction=0.0)\n        \"\"\"\n\n        damping = float(element.attrib.get(\"damping\", 0))\n        friction = float(element.attrib.get(\"friction\", 0))\n        return cls(damping, friction)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointDynamics.from_xml","title":"<code>from_xml(element)</code>","text":"<p>Create joint dynamics from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the joint dynamics from.</p> required <p>Returns:</p> Type Description <code>JointDynamics</code> <p>The joint dynamics created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"dynamics\")\n&gt;&gt;&gt; element.set(\"damping\", \"0.0\")\n&gt;&gt;&gt; element.set(\"friction\", \"0.0\")\n&gt;&gt;&gt; JointDynamics.from_xml(element)\nJointDynamics(damping=0.0, friction=0.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def from_xml(cls, element: ET.Element) -&gt; \"JointDynamics\":\n    \"\"\"\n    Create joint dynamics from an XML element.\n\n    Args:\n        element: The XML element to create the joint dynamics from.\n\n    Returns:\n        The joint dynamics created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"dynamics\")\n        &gt;&gt;&gt; element.set(\"damping\", \"0.0\")\n        &gt;&gt;&gt; element.set(\"friction\", \"0.0\")\n        &gt;&gt;&gt; JointDynamics.from_xml(element)\n        JointDynamics(damping=0.0, friction=0.0)\n    \"\"\"\n\n    damping = float(element.attrib.get(\"damping\", 0))\n    friction = float(element.attrib.get(\"friction\", 0))\n    return cls(damping, friction)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointDynamics.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the dynamics information to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the dynamics information to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the dynamics information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; dynamics.to_xml()\n&lt;Element 'dynamics' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the dynamics information to an XML element.\n\n    Args:\n        root: The root element to append the dynamics information to.\n\n    Returns:\n        The XML element representing the dynamics information.\n\n    Examples:\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; dynamics.to_xml()\n        &lt;Element 'dynamics' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = ET.Element(\"dynamics\") if root is None else ET.SubElement(root, \"dynamics\")\n    joint.set(\"damping\", format_number(self.damping))\n    joint.set(\"friction\", format_number(self.friction))\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointLimits","title":"<code>JointLimits</code>  <code>dataclass</code>","text":"<p>Represents the limits of a joint.</p> <p>Attributes:</p> Name Type Description <code>effort</code> <code>float</code> <p>The effort limit of the joint.</p> <code>velocity</code> <code>float</code> <p>The velocity limit of the joint.</p> <code>lower</code> <code>float</code> <p>The lower limit of the joint.</p> <code>upper</code> <code>float</code> <p>The upper limit of the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the joint limits to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; limits.to_xml()\n&lt;Element 'limit' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass JointLimits:\n    \"\"\"\n    Represents the limits of a joint.\n\n    Attributes:\n        effort (float): The effort limit of the joint.\n        velocity (float): The velocity limit of the joint.\n        lower (float): The lower limit of the joint.\n        upper (float): The upper limit of the joint.\n\n    Methods:\n        to_xml: Converts the joint limits to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; limits.to_xml()\n        &lt;Element 'limit' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    effort: float\n    velocity: float\n    lower: float\n    upper: float\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the joint limits to an XML element.\n\n        Args:\n            root: The root element to append the joint limits to.\n\n        Returns:\n            The XML element representing the joint limits.\n\n        Examples:\n            &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n            &gt;&gt;&gt; limits.to_xml()\n            &lt;Element 'limit' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        limit = ET.Element(\"limit\") if root is None else ET.SubElement(root, \"limit\")\n        limit.set(\"effort\", format_number(self.effort))\n        limit.set(\"velocity\", format_number(self.velocity))\n        limit.set(\"lower\", format_number(self.lower))\n        limit.set(\"upper\", format_number(self.upper))\n        return limit\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointLimits.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the joint limits to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the joint limits to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the joint limits.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; limits.to_xml()\n&lt;Element 'limit' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the joint limits to an XML element.\n\n    Args:\n        root: The root element to append the joint limits to.\n\n    Returns:\n        The XML element representing the joint limits.\n\n    Examples:\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; limits.to_xml()\n        &lt;Element 'limit' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    limit = ET.Element(\"limit\") if root is None else ET.SubElement(root, \"limit\")\n    limit.set(\"effort\", format_number(self.effort))\n    limit.set(\"velocity\", format_number(self.velocity))\n    limit.set(\"lower\", format_number(self.lower))\n    limit.set(\"upper\", format_number(self.upper))\n    return limit\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointMimic","title":"<code>JointMimic</code>  <code>dataclass</code>","text":"<p>Represents the mimic information for a joint.</p> <p>Attributes:</p> Name Type Description <code>joint</code> <code>str</code> <p>The joint to mimic.</p> <code>multiplier</code> <code>float</code> <p>The multiplier for the mimic.</p> <code>offset</code> <code>float</code> <p>The offset for the mimic.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the mimic information to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; mimic.to_xml()\n&lt;Element 'mimic' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass JointMimic:\n    \"\"\"\n    Represents the mimic information for a joint.\n\n    Attributes:\n        joint (str): The joint to mimic.\n        multiplier (float): The multiplier for the mimic.\n        offset (float): The offset for the mimic.\n\n    Methods:\n        to_xml: Converts the mimic information to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; mimic.to_xml()\n        &lt;Element 'mimic' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint: str\n    multiplier: float = 1.0\n    offset: float = 0.0\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the mimic information to an XML element.\n\n        Args:\n            root: The root element to append the mimic information to.\n\n        Returns:\n            The XML element representing the mimic information.\n\n        Examples:\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; mimic.to_xml()\n            &lt;Element 'mimic' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        mimic = ET.Element(\"mimic\") if root is None else ET.SubElement(root, \"mimic\")\n        mimic.set(\"joint\", self.joint)\n        mimic.set(\"multiplier\", format_number(self.multiplier))\n        mimic.set(\"offset\", format_number(self.offset))\n        return mimic\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"JointMimic\":\n        \"\"\"\n        Create a joint mimic from an XML element.\n\n        Args:\n            element: The XML element to create the joint mimic from.\n\n        Returns:\n            The joint mimic created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"mimic\")\n            &gt;&gt;&gt; element.set(\"joint\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"multiplier\", \"1.0\")\n            &gt;&gt;&gt; element.set(\"offset\", \"0.0\")\n            &gt;&gt;&gt; JointMimic.from_xml(element)\n            JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        \"\"\"\n\n        joint = element.attrib[\"joint\"]\n        multiplier = float(element.attrib.get(\"multiplier\", 1.0))\n        offset = float(element.attrib.get(\"offset\", 0.0))\n        return cls(joint, multiplier, offset)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointMimic.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a joint mimic from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the joint mimic from.</p> required <p>Returns:</p> Type Description <code>JointMimic</code> <p>The joint mimic created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"mimic\")\n&gt;&gt;&gt; element.set(\"joint\", \"joint1\")\n&gt;&gt;&gt; element.set(\"multiplier\", \"1.0\")\n&gt;&gt;&gt; element.set(\"offset\", \"0.0\")\n&gt;&gt;&gt; JointMimic.from_xml(element)\nJointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"JointMimic\":\n    \"\"\"\n    Create a joint mimic from an XML element.\n\n    Args:\n        element: The XML element to create the joint mimic from.\n\n    Returns:\n        The joint mimic created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"mimic\")\n        &gt;&gt;&gt; element.set(\"joint\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"multiplier\", \"1.0\")\n        &gt;&gt;&gt; element.set(\"offset\", \"0.0\")\n        &gt;&gt;&gt; JointMimic.from_xml(element)\n        JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n    \"\"\"\n\n    joint = element.attrib[\"joint\"]\n    multiplier = float(element.attrib.get(\"multiplier\", 1.0))\n    offset = float(element.attrib.get(\"offset\", 0.0))\n    return cls(joint, multiplier, offset)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointMimic.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the mimic information to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the mimic information to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the mimic information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; mimic.to_xml()\n&lt;Element 'mimic' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the mimic information to an XML element.\n\n    Args:\n        root: The root element to append the mimic information to.\n\n    Returns:\n        The XML element representing the mimic information.\n\n    Examples:\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; mimic.to_xml()\n        &lt;Element 'mimic' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    mimic = ET.Element(\"mimic\") if root is None else ET.SubElement(root, \"mimic\")\n    mimic.set(\"joint\", self.joint)\n    mimic.set(\"multiplier\", format_number(self.multiplier))\n    mimic.set(\"offset\", format_number(self.offset))\n    return mimic\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.JointType","title":"<code>JointType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible joint types in Onshape</p> <p>Attributes:</p> Name Type Description <code>REVOLUTE</code> <code>str</code> <p>Revolute joint</p> <code>CONTINUOUS</code> <code>str</code> <p>Continuous joint</p> <code>PRISMATIC</code> <code>str</code> <p>Prismatic joint</p> <code>FIXED</code> <code>str</code> <p>Fixed joint</p> <code>FLOATING</code> <code>str</code> <p>Floating joint</p> <code>PLANAR</code> <code>str</code> <p>Planar joint</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; JointType.REVOLUTE\n'revolute'\n&gt;&gt;&gt; JointType.CONTINUOUS\n'continuous'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>class JointType(str, Enum):\n    \"\"\"\n    Enumerates the possible joint types in Onshape\n\n    Attributes:\n        REVOLUTE (str): Revolute joint\n        CONTINUOUS (str): Continuous joint\n        PRISMATIC (str): Prismatic joint\n        FIXED (str): Fixed joint\n        FLOATING (str): Floating joint\n        PLANAR (str): Planar joint\n\n    Examples:\n        &gt;&gt;&gt; JointType.REVOLUTE\n        'revolute'\n        &gt;&gt;&gt; JointType.CONTINUOUS\n        'continuous'\n    \"\"\"\n\n    REVOLUTE = \"revolute\"\n    CONTINUOUS = \"continuous\"\n    PRISMATIC = \"prismatic\"\n    FIXED = \"fixed\"\n    FLOATING = \"floating\"\n    PLANAR = \"planar\"\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PlanarJoint","title":"<code>PlanarJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a planar joint.</p> <p>Attributes:</p> Name Type Description <code>limits</code> <code>JointLimits</code> <p>The limits of the joint.</p> <code>axis</code> <code>Axis</code> <p>The axis of the joint.</p> <code>mimic</code> <code>JointMimic</code> <p>The mimic information for the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the planar joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = PlanarJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass PlanarJoint(BaseJoint):\n    \"\"\"\n    Represents a planar joint.\n\n    Attributes:\n        limits (JointLimits): The limits of the joint.\n        axis (Axis): The axis of the joint.\n        mimic (JointMimic): The mimic information for the joint.\n\n    Methods:\n        to_xml: Converts the planar joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = PlanarJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    limits: JointLimits\n    axis: Axis\n    mimic: JointMimic | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the planar joint to an XML element.\n\n        Args:\n            root: The root element to append the planar joint to.\n\n        Returns:\n            The XML element representing the planar joint.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n            &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; joint = PlanarJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ...     limits=limits,\n            ...     axis=axis,\n            ...     mimic=mimic,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        self.axis.to_xml(joint)\n        if self.limits is not None:\n            self.limits.to_xml(joint)\n        if self.mimic is not None:\n            self.mimic.to_xml(joint)\n        return joint\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"PlanarJoint\":\n        \"\"\"\n        Create a planar joint from an XML element.\n\n        Args:\n            element: The XML element to create the planar joint from.\n\n        Returns:\n            The planar joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"planar\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n            &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n            &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n            &gt;&gt;&gt; PlanarJoint.from_xml(element)\n\n            PlanarJoint(\n                name=\"joint1\",\n                parent=\"base_link\",\n                child=\"link1\",\n                origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n                limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n                axis=Axis(xyz=(0, 0, 1)),\n                mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            )\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n\n        limit_element = element.find(\"limit\")\n        if limit_element is not None:\n            limits = JointLimits(\n                effort=float(limit_element.attrib.get(\"effort\", 0)),\n                velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n                lower=float(limit_element.attrib.get(\"lower\", 0)),\n                upper=float(limit_element.attrib.get(\"upper\", 0)),\n            )\n        else:\n            limits = None\n\n        axis = Axis.from_xml(element.find(\"axis\"))\n\n        mimic_element = element.find(\"mimic\")\n        mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n        return cls(name, parent, child, origin, limits, axis, mimic)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"planar\".\n        \"\"\"\n\n        return JointType.PLANAR\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PlanarJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"planar\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PlanarJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a planar joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the planar joint from.</p> required <p>Returns:</p> Type Description <code>PlanarJoint</code> <p>The planar joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"planar\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n&gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n&gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n&gt;&gt;&gt; PlanarJoint.from_xml(element)\n</code></pre> <p>PlanarJoint(     name=\"joint1\",     parent=\"base_link\",     child=\"link1\",     origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),     limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),     axis=Axis(xyz=(0, 0, 1)),     mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0) )</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"PlanarJoint\":\n    \"\"\"\n    Create a planar joint from an XML element.\n\n    Args:\n        element: The XML element to create the planar joint from.\n\n    Returns:\n        The planar joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"planar\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n        &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n        &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n        &gt;&gt;&gt; PlanarJoint.from_xml(element)\n\n        PlanarJoint(\n            name=\"joint1\",\n            parent=\"base_link\",\n            child=\"link1\",\n            origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n            limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n            axis=Axis(xyz=(0, 0, 1)),\n            mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        )\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n\n    limit_element = element.find(\"limit\")\n    if limit_element is not None:\n        limits = JointLimits(\n            effort=float(limit_element.attrib.get(\"effort\", 0)),\n            velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n            lower=float(limit_element.attrib.get(\"lower\", 0)),\n            upper=float(limit_element.attrib.get(\"upper\", 0)),\n        )\n    else:\n        limits = None\n\n    axis = Axis.from_xml(element.find(\"axis\"))\n\n    mimic_element = element.find(\"mimic\")\n    mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n    return cls(name, parent, child, origin, limits, axis, mimic)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PlanarJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the planar joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the planar joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the planar joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = PlanarJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the planar joint to an XML element.\n\n    Args:\n        root: The root element to append the planar joint to.\n\n    Returns:\n        The XML element representing the planar joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = PlanarJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    self.axis.to_xml(joint)\n    if self.limits is not None:\n        self.limits.to_xml(joint)\n    if self.mimic is not None:\n        self.mimic.to_xml(joint)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PrismaticJoint","title":"<code>PrismaticJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a prismatic joint.</p> <p>Attributes:</p> Name Type Description <code>limits</code> <code>JointLimits</code> <p>The limits of the joint.</p> <code>axis</code> <code>Axis</code> <p>The axis of the joint.</p> <code>dynamics</code> <code>JointDynamics</code> <p>The dynamics of the joint.</p> <code>mimic</code> <code>JointMimic</code> <p>The mimic information for the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the prismatic joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = PrismaticJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     dynamics=dynamics,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass PrismaticJoint(BaseJoint):\n    \"\"\"\n    Represents a prismatic joint.\n\n    Attributes:\n        limits (JointLimits): The limits of the joint.\n        axis (Axis): The axis of the joint.\n        dynamics (JointDynamics): The dynamics of the joint.\n        mimic (JointMimic): The mimic information for the joint.\n\n    Methods:\n        to_xml: Converts the prismatic joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = PrismaticJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     dynamics=dynamics,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    limits: JointLimits\n    axis: Axis\n    dynamics: JointDynamics | None = None\n    mimic: JointMimic | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the prismatic joint to an XML element.\n\n        Args:\n            root: The root element to append the prismatic joint to.\n\n        Returns:\n            The XML element representing the prismatic joint\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n            &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n            &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; joint = PrismaticJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ...     limits=limits,\n            ...     axis=axis,\n            ...     dynamics=dynamics,\n            ...     mimic=mimic,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        self.axis.to_xml(joint)\n        if self.limits is not None:\n            self.limits.to_xml(joint)\n        if self.dynamics is not None:\n            self.dynamics.to_xml(joint)\n        if self.mimic is not None:\n            self.mimic.to_xml(joint)\n        return joint\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"PrismaticJoint\":\n        \"\"\"\n        Create a prismatic joint from an XML element.\n\n        Args:\n            element: The XML element to create the prismatic joint from.\n\n        Returns:\n            The prismatic joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"prismatic\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n            &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n            &gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n            &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n            &gt;&gt;&gt; PrismaticJoint.from_xml(element)\n\n            PrismaticJoint(\n                name=\"joint1\",\n                parent=\"base_link\",\n                child=\"link1\",\n                origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n                limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n                axis=Axis(xyz=(0, 0, 1)),\n                dynamics=JointDynamics(damping=0.0, friction=0.0),\n                mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            )\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n\n        limit_element = element.find(\"limit\")\n        if limit_element is not None:\n            limits = JointLimits(\n                effort=float(limit_element.attrib.get(\"effort\", 0)),\n                velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n                lower=float(limit_element.attrib.get(\"lower\", 0)),\n                upper=float(limit_element.attrib.get(\"upper\", 0)),\n            )\n        else:\n            limits = None\n\n        axis = Axis.from_xml(element.find(\"axis\"))\n\n        dynamics_element = element.find(\"dynamics\")\n        if dynamics_element is not None:\n            dynamics = JointDynamics(\n                damping=float(dynamics_element.attrib.get(\"damping\", 0)),\n                friction=float(dynamics_element.attrib.get(\"friction\", 0)),\n            )\n        else:\n            dynamics = None\n\n        mimic_element = element.find(\"mimic\")\n        mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n        return cls(name, parent, child, origin, limits, axis, dynamics, mimic)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"prismatic\".\n        \"\"\"\n\n        return JointType.PRISMATIC\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PrismaticJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"prismatic\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PrismaticJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a prismatic joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the prismatic joint from.</p> required <p>Returns:</p> Type Description <code>PrismaticJoint</code> <p>The prismatic joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"prismatic\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n&gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n&gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n&gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n&gt;&gt;&gt; PrismaticJoint.from_xml(element)\n</code></pre> <p>PrismaticJoint(     name=\"joint1\",     parent=\"base_link\",     child=\"link1\",     origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),     limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),     axis=Axis(xyz=(0, 0, 1)),     dynamics=JointDynamics(damping=0.0, friction=0.0),     mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0) )</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"PrismaticJoint\":\n    \"\"\"\n    Create a prismatic joint from an XML element.\n\n    Args:\n        element: The XML element to create the prismatic joint from.\n\n    Returns:\n        The prismatic joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"prismatic\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n        &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n        &gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n        &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n        &gt;&gt;&gt; PrismaticJoint.from_xml(element)\n\n        PrismaticJoint(\n            name=\"joint1\",\n            parent=\"base_link\",\n            child=\"link1\",\n            origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n            limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n            axis=Axis(xyz=(0, 0, 1)),\n            dynamics=JointDynamics(damping=0.0, friction=0.0),\n            mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        )\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n\n    limit_element = element.find(\"limit\")\n    if limit_element is not None:\n        limits = JointLimits(\n            effort=float(limit_element.attrib.get(\"effort\", 0)),\n            velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n            lower=float(limit_element.attrib.get(\"lower\", 0)),\n            upper=float(limit_element.attrib.get(\"upper\", 0)),\n        )\n    else:\n        limits = None\n\n    axis = Axis.from_xml(element.find(\"axis\"))\n\n    dynamics_element = element.find(\"dynamics\")\n    if dynamics_element is not None:\n        dynamics = JointDynamics(\n            damping=float(dynamics_element.attrib.get(\"damping\", 0)),\n            friction=float(dynamics_element.attrib.get(\"friction\", 0)),\n        )\n    else:\n        dynamics = None\n\n    mimic_element = element.find(\"mimic\")\n    mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n    return cls(name, parent, child, origin, limits, axis, dynamics, mimic)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.PrismaticJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the prismatic joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the prismatic joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the prismatic joint</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = PrismaticJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     dynamics=dynamics,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the prismatic joint to an XML element.\n\n    Args:\n        root: The root element to append the prismatic joint to.\n\n    Returns:\n        The XML element representing the prismatic joint\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = PrismaticJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     dynamics=dynamics,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    self.axis.to_xml(joint)\n    if self.limits is not None:\n        self.limits.to_xml(joint)\n    if self.dynamics is not None:\n        self.dynamics.to_xml(joint)\n    if self.mimic is not None:\n        self.mimic.to_xml(joint)\n    return joint\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.RevoluteJoint","title":"<code>RevoluteJoint</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseJoint</code></p> <p>Represents a revolute joint.</p> <p>Attributes:</p> Name Type Description <code>limits</code> <code>JointLimits</code> <p>The limits of the joint.</p> <code>axis</code> <code>Axis</code> <p>The axis of the joint.</p> <code>dynamics</code> <code>JointDynamics</code> <p>The dynamics of the joint.</p> <code>mimic</code> <code>JointMimic</code> <p>The mimic information for the joint.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the revolute joint to an XML element.</p> Properties <p>joint_type: The type of the joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = RevoluteJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     dynamics=dynamics,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@dataclass\nclass RevoluteJoint(BaseJoint):\n    \"\"\"\n    Represents a revolute joint.\n\n    Attributes:\n        limits (JointLimits): The limits of the joint.\n        axis (Axis): The axis of the joint.\n        dynamics (JointDynamics): The dynamics of the joint.\n        mimic (JointMimic): The mimic information for the joint.\n\n    Methods:\n        to_xml: Converts the revolute joint to an XML element.\n\n    Properties:\n        joint_type: The type of the joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = RevoluteJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     dynamics=dynamics,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    limits: JointLimits\n    axis: Axis\n    dynamics: JointDynamics | None = None\n    mimic: JointMimic | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the revolute joint to an XML element.\n\n        Args:\n            root: The root element to append the revolute joint to.\n\n        Returns:\n            The XML element representing the revolute joint.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n            &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n            &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n            &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            &gt;&gt;&gt; joint = RevoluteJoint(\n            ...     name=\"joint1\",\n            ...     parent=\"base_link\",\n            ...     child=\"link1\",\n            ...     origin=origin,\n            ...     limits=limits,\n            ...     axis=axis,\n            ...     dynamics=dynamics,\n            ...     mimic=mimic,\n            ... )\n            &gt;&gt;&gt; joint.to_xml()\n            &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        joint = super().to_xml(root)\n        self.axis.to_xml(joint)\n        if self.limits is not None:\n            self.limits.to_xml(joint)\n        if self.dynamics is not None:\n            self.dynamics.to_xml(joint)\n        if self.mimic is not None:\n            self.mimic.to_xml(joint)\n        return joint\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Converts the revolute joint to an XML element and appends it to the given root element.\n\n        Args:\n            root: The root element to append the revolute joint to.\n        \"\"\"\n\n        joint = ET.SubElement(root, \"joint\", name=self.name, type=MJCF_JOINT_MAP[self.joint_type])\n        joint.set(\"pos\", \" \".join(map(str, self.origin.xyz)))\n\n        self.axis.to_mjcf(joint)\n        joint.set(\"range\", \" \".join(map(str, [self.limits.lower, self.limits.upper])))\n\n        if self.dynamics:\n            joint.set(\"damping\", str(self.dynamics.damping))\n            joint.set(\"frictionloss\", str(self.dynamics.friction))\n\n    @classmethod\n    def from_xml(cls, element: ET.Element) -&gt; \"RevoluteJoint\":\n        \"\"\"\n        Create a revolute joint from an XML element.\n\n        Args:\n            element: The XML element to create the revolute joint from.\n\n        Returns:\n            The revolute joint created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; element = ET.Element(\"joint\")\n            &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n            &gt;&gt;&gt; element.set(\"type\", \"revolute\")\n            &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n            &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n            &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n            &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n            &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n            &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n            &gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n            &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n            &gt;&gt;&gt; RevoluteJoint.from_xml(element)\n\n            RevoluteJoint(\n                name=\"joint1\",\n                parent=\"base_link\",\n                child=\"link1\",\n                origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n                limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n                axis=Axis(xyz=(0, 0, 1)),\n                dynamics=JointDynamics(damping=0.0, friction=0.0),\n                mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n            )\n        \"\"\"\n\n        name = element.attrib[\"name\"]\n        parent = element.find(\"parent\").attrib[\"link\"]\n        child = element.find(\"child\").attrib[\"link\"]\n        origin = Origin.from_xml(element.find(\"origin\"))\n        # Handle limits\n        limit_element = element.find(\"limit\")\n        if limit_element is not None:\n            limits = JointLimits(\n                effort=float(limit_element.attrib.get(\"effort\", 0)),\n                velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n                lower=float(limit_element.attrib.get(\"lower\", 0)),\n                upper=float(limit_element.attrib.get(\"upper\", 0)),\n            )\n        else:\n            limits = None\n\n        # Handle axis\n        axis = Axis.from_xml(element.find(\"axis\"))\n\n        # Handle dynamics\n        dynamics_element = element.find(\"dynamics\")\n        if dynamics_element is not None:\n            dynamics = JointDynamics(\n                damping=float(dynamics_element.attrib.get(\"damping\", 0)),\n                friction=float(dynamics_element.attrib.get(\"friction\", 0)),\n            )\n        else:\n            dynamics = None\n\n        # Handle mimic\n        mimic_element = element.find(\"mimic\")\n        mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n        return cls(name, parent, child, origin, limits, axis, dynamics, mimic)\n\n    @property\n    def joint_type(self) -&gt; str:\n        \"\"\"\n        The type of the joint.\n\n        Returns:\n            The type of the joint: \"revolute\".\n        \"\"\"\n\n        return JointType.REVOLUTE\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.RevoluteJoint.joint_type","title":"<code>joint_type: str</code>  <code>property</code>","text":"<p>The type of the joint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the joint: \"revolute\".</p>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.RevoluteJoint.from_xml","title":"<code>from_xml(element)</code>  <code>classmethod</code>","text":"<p>Create a revolute joint from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element to create the revolute joint from.</p> required <p>Returns:</p> Type Description <code>RevoluteJoint</code> <p>The revolute joint created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\")\n&gt;&gt;&gt; element.set(\"name\", \"joint1\")\n&gt;&gt;&gt; element.set(\"type\", \"revolute\")\n&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n&gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n&gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n&gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n&gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n&gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n&gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n&gt;&gt;&gt; RevoluteJoint.from_xml(element)\n</code></pre> <p>RevoluteJoint(     name=\"joint1\",     parent=\"base_link\",     child=\"link1\",     origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),     limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),     axis=Axis(xyz=(0, 0, 1)),     dynamics=JointDynamics(damping=0.0, friction=0.0),     mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0) )</p> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>@classmethod\ndef from_xml(cls, element: ET.Element) -&gt; \"RevoluteJoint\":\n    \"\"\"\n    Create a revolute joint from an XML element.\n\n    Args:\n        element: The XML element to create the revolute joint from.\n\n    Returns:\n        The revolute joint created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\")\n        &gt;&gt;&gt; element.set(\"name\", \"joint1\")\n        &gt;&gt;&gt; element.set(\"type\", \"revolute\")\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; ET.SubElement(element, \"origin\", xyz=\"0 0 0\", rpy=\"0 0 0\")\n        &gt;&gt;&gt; ET.SubElement(element, \"parent\", link=\"base_link\")\n        &gt;&gt;&gt; ET.SubElement(element, \"child\", link=\"link1\")\n        &gt;&gt;&gt; limits = ET.SubElement(element, \"limit\", effort=\"10.0\", velocity=\"1.0\", lower=\"-1.0\", upper=\"1.0\")\n        &gt;&gt;&gt; axis = ET.SubElement(element, \"axis\", xyz=\"0 0 1\")\n        &gt;&gt;&gt; dynamics = ET.SubElement(element, \"dynamics\", damping=\"0.0\", friction=\"0.0\")\n        &gt;&gt;&gt; mimic = ET.SubElement(element, \"mimic\", joint=\"joint1\", multiplier=\"1.0\", offset=\"0.0\")\n        &gt;&gt;&gt; RevoluteJoint.from_xml(element)\n\n        RevoluteJoint(\n            name=\"joint1\",\n            parent=\"base_link\",\n            child=\"link1\",\n            origin=Origin(xyz=(0, 0, 0), rpy=(0, 0, 0)),\n            limits=JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0),\n            axis=Axis(xyz=(0, 0, 1)),\n            dynamics=JointDynamics(damping=0.0, friction=0.0),\n            mimic=JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        )\n    \"\"\"\n\n    name = element.attrib[\"name\"]\n    parent = element.find(\"parent\").attrib[\"link\"]\n    child = element.find(\"child\").attrib[\"link\"]\n    origin = Origin.from_xml(element.find(\"origin\"))\n    # Handle limits\n    limit_element = element.find(\"limit\")\n    if limit_element is not None:\n        limits = JointLimits(\n            effort=float(limit_element.attrib.get(\"effort\", 0)),\n            velocity=float(limit_element.attrib.get(\"velocity\", 0)),\n            lower=float(limit_element.attrib.get(\"lower\", 0)),\n            upper=float(limit_element.attrib.get(\"upper\", 0)),\n        )\n    else:\n        limits = None\n\n    # Handle axis\n    axis = Axis.from_xml(element.find(\"axis\"))\n\n    # Handle dynamics\n    dynamics_element = element.find(\"dynamics\")\n    if dynamics_element is not None:\n        dynamics = JointDynamics(\n            damping=float(dynamics_element.attrib.get(\"damping\", 0)),\n            friction=float(dynamics_element.attrib.get(\"friction\", 0)),\n        )\n    else:\n        dynamics = None\n\n    # Handle mimic\n    mimic_element = element.find(\"mimic\")\n    mimic = JointMimic.from_xml(mimic_element) if mimic_element is not None else None\n\n    return cls(name, parent, child, origin, limits, axis, dynamics, mimic)\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.RevoluteJoint.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Converts the revolute joint to an XML element and appends it to the given root element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the revolute joint to.</p> required Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Converts the revolute joint to an XML element and appends it to the given root element.\n\n    Args:\n        root: The root element to append the revolute joint to.\n    \"\"\"\n\n    joint = ET.SubElement(root, \"joint\", name=self.name, type=MJCF_JOINT_MAP[self.joint_type])\n    joint.set(\"pos\", \" \".join(map(str, self.origin.xyz)))\n\n    self.axis.to_mjcf(joint)\n    joint.set(\"range\", \" \".join(map(str, [self.limits.lower, self.limits.upper])))\n\n    if self.dynamics:\n        joint.set(\"damping\", str(self.dynamics.damping))\n        joint.set(\"frictionloss\", str(self.dynamics.friction))\n</code></pre>"},{"location":"api/joint/#onshape_robotics_toolkit.models.joint.RevoluteJoint.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the revolute joint to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the revolute joint to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the revolute joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n&gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n&gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n&gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n&gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n&gt;&gt;&gt; joint = RevoluteJoint(\n...     name=\"joint1\",\n...     parent=\"base_link\",\n...     child=\"link1\",\n...     origin=origin,\n...     limits=limits,\n...     axis=axis,\n...     dynamics=dynamics,\n...     mimic=mimic,\n... )\n&gt;&gt;&gt; joint.to_xml()\n&lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\joint.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the revolute joint to an XML element.\n\n    Args:\n        root: The root element to append the revolute joint to.\n\n    Returns:\n        The XML element representing the revolute joint.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(0, 0, 0), rpy=(0, 0, 0))\n        &gt;&gt;&gt; limits = JointLimits(effort=10.0, velocity=1.0, lower=-1.0, upper=1.0)\n        &gt;&gt;&gt; axis = Axis(xyz=(0, 0, 1))\n        &gt;&gt;&gt; dynamics = JointDynamics(damping=0.0, friction=0.0)\n        &gt;&gt;&gt; mimic = JointMimic(joint=\"joint1\", multiplier=1.0, offset=0.0)\n        &gt;&gt;&gt; joint = RevoluteJoint(\n        ...     name=\"joint1\",\n        ...     parent=\"base_link\",\n        ...     child=\"link1\",\n        ...     origin=origin,\n        ...     limits=limits,\n        ...     axis=axis,\n        ...     dynamics=dynamics,\n        ...     mimic=mimic,\n        ... )\n        &gt;&gt;&gt; joint.to_xml()\n        &lt;Element 'joint' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    joint = super().to_xml(root)\n    self.axis.to_xml(joint)\n    if self.limits is not None:\n        self.limits.to_xml(joint)\n    if self.dynamics is not None:\n        self.dynamics.to_xml(joint)\n    if self.mimic is not None:\n        self.mimic.to_xml(joint)\n    return joint\n</code></pre>"},{"location":"api/link/","title":"Link","text":"<p>This module contains dataclasses for creating a link in a URDF robot model.</p> Dataclass <ul> <li>Origin: Represents the origin of a link in the robot model.</li> <li>Axis: Represents the axis of a link in the robot model.</li> <li>Inertia: Represents the inertia properties of a link in the robot model.</li> <li>Material: Represents the material properties of a link in the robot model.</li> <li>InertialLink: Represents the inertial properties of a link in the robot model.</li> <li>VisualLink: Represents the visual properties of a link in the robot model.</li> <li>CollisionLink: Represents the collision properties of a link in the robot model.</li> <li>Link: Represents a link in the robot model.</li> </ul> Enum <ul> <li>Colors: Enumerates the possible colors for a link in the robot model.</li> </ul>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Axis","title":"<code>Axis</code>  <code>dataclass</code>","text":"<p>Represents the axis of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>xyz</code> <code>tuple[float, float, float]</code> <p>The x, y, z coordinates of the axis.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the axis to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n&gt;&gt;&gt; axis.to_xml()\n&lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass Axis:\n    \"\"\"\n    Represents the axis of a link in the robot model.\n\n    Attributes:\n        xyz (tuple[float, float, float]): The x, y, z coordinates of the axis.\n\n    Methods:\n        to_xml: Converts the axis to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n        &gt;&gt;&gt; axis.to_xml()\n        &lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    xyz: tuple[float, float, float]\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the axis to an XML element.\n\n        Args:\n            root: The root element to append the axis to.\n\n        Returns:\n            The XML element representing the axis.\n\n        Examples:\n            &gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n            &gt;&gt;&gt; axis.to_xml()\n            &lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        axis = ET.Element(\"axis\") if root is None else ET.SubElement(root, \"axis\")\n        axis.set(\"xyz\", \" \".join(format_number(v) for v in self.xyz))\n        return axis\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the axis to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the axis to.\n\n        Returns:\n            The XML element representing the axis.\n\n        Examples:\n            &gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n            &gt;&gt;&gt; axis.to_mjcf()\n            &lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        root.set(\"axis\", \" \".join(format_number(v) for v in self.xyz))\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"Axis\":\n        \"\"\"\n        Create an axis from an XML element.\n\n        Args:\n            xml: The XML element to create the axis from.\n\n        Returns:\n            The axis created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('axis')\n            &gt;&gt;&gt; Axis.from_xml(xml)\n            Axis(xyz=(0.0, 0.0, 0.0))\n        \"\"\"\n        xyz = tuple(map(float, xml.get(\"xyz\").split()))\n        return cls(xyz)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Axis.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create an axis from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the axis from.</p> required <p>Returns:</p> Type Description <code>Axis</code> <p>The axis created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('axis')\n&gt;&gt;&gt; Axis.from_xml(xml)\nAxis(xyz=(0.0, 0.0, 0.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"Axis\":\n    \"\"\"\n    Create an axis from an XML element.\n\n    Args:\n        xml: The XML element to create the axis from.\n\n    Returns:\n        The axis created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('axis')\n        &gt;&gt;&gt; Axis.from_xml(xml)\n        Axis(xyz=(0.0, 0.0, 0.0))\n    \"\"\"\n    xyz = tuple(map(float, xml.get(\"xyz\").split()))\n    return cls(xyz)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Axis.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the axis to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the axis to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the axis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n&gt;&gt;&gt; axis.to_mjcf()\n&lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the axis to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the axis to.\n\n    Returns:\n        The XML element representing the axis.\n\n    Examples:\n        &gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n        &gt;&gt;&gt; axis.to_mjcf()\n        &lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    root.set(\"axis\", \" \".join(format_number(v) for v in self.xyz))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Axis.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the axis to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the axis to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the axis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n&gt;&gt;&gt; axis.to_xml()\n&lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the axis to an XML element.\n\n    Args:\n        root: The root element to append the axis to.\n\n    Returns:\n        The XML element representing the axis.\n\n    Examples:\n        &gt;&gt;&gt; axis = Axis(xyz=(1.0, 0.0, 0.0))\n        &gt;&gt;&gt; axis.to_xml()\n        &lt;Element 'axis' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    axis = ET.Element(\"axis\") if root is None else ET.SubElement(root, \"axis\")\n    axis.set(\"xyz\", \" \".join(format_number(v) for v in self.xyz))\n    return axis\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.CollisionLink","title":"<code>CollisionLink</code>  <code>dataclass</code>","text":"<p>Represents the collision properties of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>origin</code> <code>Origin</code> <p>The origin of the link.</p> <code>geometry</code> <code>BaseGeometry</code> <p>The geometry of the link.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the collision properties to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n&gt;&gt;&gt; collision.to_xml()\n&lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass CollisionLink:\n    \"\"\"\n    Represents the collision properties of a link in the robot model.\n\n    Attributes:\n        origin (Origin): The origin of the link.\n        geometry (BaseGeometry): The geometry of the link.\n\n    Methods:\n        to_xml: Converts the collision properties to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n        &gt;&gt;&gt; collision.to_xml()\n        &lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    name: str\n    origin: Origin\n    geometry: BaseGeometry\n\n    friction: Optional[tuple[float, float, float]] = None\n\n    def transform(self, transformation_matrix: np.ndarray) -&gt; None:\n        \"\"\"\n        Apply a transformation to the visual link's origin.\n\n        Args:\n            transformation_matrix (np.ndarray): A 4x4 transformation matrix (homogeneous).\n        \"\"\"\n        # Apply translation and rotation to the origin position\n        pos = np.array([self.origin.xyz[0], self.origin.xyz[1], self.origin.xyz[2], 1])\n        new_pos = transformation_matrix @ pos\n        self.origin.xyz = tuple(new_pos[:3])  # Update position\n\n        # Extract the rotation from the transformation matrix\n        rotation_matrix = transformation_matrix[:3, :3]\n        current_rotation = R.from_euler(\"xyz\", self.origin.rpy)\n        new_rotation = R.from_matrix(rotation_matrix @ current_rotation.as_matrix())\n        self.origin.rpy = new_rotation.as_euler(\"xyz\").tolist()\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the collision properties to an XML element.\n\n        Args:\n            root: The root element to append the collision properties to.\n\n        Returns:\n            The XML element representing the collision properties.\n\n        Examples:\n            &gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n            &gt;&gt;&gt; collision.to_xml()\n            &lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        collision = ET.Element(\"collision\") if root is None else ET.SubElement(root, \"collision\")\n        collision.set(\"name\", self.name)\n        self.origin.to_xml(collision)\n        self.geometry.to_xml(collision)\n        return collision\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the collision properties to an MuJoCo compatible XML element.\n\n        Example XML:\n        ```xml\n              &lt;geom name=\"Assembly-2-1-SUB-Part-5-1-collision\"\n                    pos=\"0.0994445 -0.000366963 0.0171076\"\n                    quat=\"-0.92388 -4.28774e-08 0.382683 0\"\n                    type=\"mesh\"\n                    rgba=\"1 0.5 0 1\"\n                    mesh=\"Assembly-2-1-SUB-Part-5-1\"\n                    contype=\"1\"\n                    conaffinity=\"0\"\n                    density=\"0\"\n                    group=\"1\"/&gt;\n        ```\n        Args:\n            root: The root element to append the collision properties to.\n\n        Returns:\n            The XML element representing the collision properties.\n\n        Examples:\n            &gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n            &gt;&gt;&gt; collision.to_mjcf()\n            &lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        collision = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        collision.set(\"name\", self.name)\n        collision.set(\"contype\", \"1\")\n        collision.set(\"conaffinity\", \"1\")\n        self.origin.to_mjcf(collision)\n\n        if self.geometry:\n            self.geometry.to_mjcf(collision)\n\n        collision.set(\"group\", \"0\")\n\n        if self.friction:\n            collision.set(\"friction\", \" \".join(format_number(v) for v in self.friction))\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"CollisionLink\":\n        \"\"\"\n        Create a collision link from an XML element.\n\n        Args:\n            xml: The XML element to create the collision link from.\n\n        Returns:\n            The collision link created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('collision')\n            &gt;&gt;&gt; CollisionLink.from_xml(xml)\n            CollisionLink(name='collision', origin=None, geometry=None)\n        \"\"\"\n        name = xml.get(\"name\")\n\n        origin_element = xml.find(\"origin\")\n        origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n        geometry_element = xml.find(\"geometry\")\n        geometry = set_geometry_from_xml(geometry_element) if geometry_element is not None else None\n\n        return cls(name=name, origin=origin, geometry=geometry)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.CollisionLink.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create a collision link from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the collision link from.</p> required <p>Returns:</p> Type Description <code>CollisionLink</code> <p>The collision link created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('collision')\n&gt;&gt;&gt; CollisionLink.from_xml(xml)\nCollisionLink(name='collision', origin=None, geometry=None)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"CollisionLink\":\n    \"\"\"\n    Create a collision link from an XML element.\n\n    Args:\n        xml: The XML element to create the collision link from.\n\n    Returns:\n        The collision link created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('collision')\n        &gt;&gt;&gt; CollisionLink.from_xml(xml)\n        CollisionLink(name='collision', origin=None, geometry=None)\n    \"\"\"\n    name = xml.get(\"name\")\n\n    origin_element = xml.find(\"origin\")\n    origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n    geometry_element = xml.find(\"geometry\")\n    geometry = set_geometry_from_xml(geometry_element) if geometry_element is not None else None\n\n    return cls(name=name, origin=origin, geometry=geometry)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.CollisionLink.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the collision properties to an MuJoCo compatible XML element.</p> <p>Example XML: <pre><code>      &lt;geom name=\"Assembly-2-1-SUB-Part-5-1-collision\"\n            pos=\"0.0994445 -0.000366963 0.0171076\"\n            quat=\"-0.92388 -4.28774e-08 0.382683 0\"\n            type=\"mesh\"\n            rgba=\"1 0.5 0 1\"\n            mesh=\"Assembly-2-1-SUB-Part-5-1\"\n            contype=\"1\"\n            conaffinity=\"0\"\n            density=\"0\"\n            group=\"1\"/&gt;\n</code></pre> Args:     root: The root element to append the collision properties to.</p> <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the collision properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n&gt;&gt;&gt; collision.to_mjcf()\n&lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the collision properties to an MuJoCo compatible XML element.\n\n    Example XML:\n    ```xml\n          &lt;geom name=\"Assembly-2-1-SUB-Part-5-1-collision\"\n                pos=\"0.0994445 -0.000366963 0.0171076\"\n                quat=\"-0.92388 -4.28774e-08 0.382683 0\"\n                type=\"mesh\"\n                rgba=\"1 0.5 0 1\"\n                mesh=\"Assembly-2-1-SUB-Part-5-1\"\n                contype=\"1\"\n                conaffinity=\"0\"\n                density=\"0\"\n                group=\"1\"/&gt;\n    ```\n    Args:\n        root: The root element to append the collision properties to.\n\n    Returns:\n        The XML element representing the collision properties.\n\n    Examples:\n        &gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n        &gt;&gt;&gt; collision.to_mjcf()\n        &lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    collision = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    collision.set(\"name\", self.name)\n    collision.set(\"contype\", \"1\")\n    collision.set(\"conaffinity\", \"1\")\n    self.origin.to_mjcf(collision)\n\n    if self.geometry:\n        self.geometry.to_mjcf(collision)\n\n    collision.set(\"group\", \"0\")\n\n    if self.friction:\n        collision.set(\"friction\", \" \".join(format_number(v) for v in self.friction))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.CollisionLink.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the collision properties to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the collision properties to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the collision properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n&gt;&gt;&gt; collision.to_xml()\n&lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the collision properties to an XML element.\n\n    Args:\n        root: The root element to append the collision properties to.\n\n    Returns:\n        The XML element representing the collision properties.\n\n    Examples:\n        &gt;&gt;&gt; collision = CollisionLink(origin=Origin(...), geometry=BoxGeometry(...))\n        &gt;&gt;&gt; collision.to_xml()\n        &lt;Element 'collision' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    collision = ET.Element(\"collision\") if root is None else ET.SubElement(root, \"collision\")\n    collision.set(\"name\", self.name)\n    self.origin.to_xml(collision)\n    self.geometry.to_xml(collision)\n    return collision\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.CollisionLink.transform","title":"<code>transform(transformation_matrix)</code>","text":"<p>Apply a transformation to the visual link's origin.</p> <p>Parameters:</p> Name Type Description Default <code>transformation_matrix</code> <code>ndarray</code> <p>A 4x4 transformation matrix (homogeneous).</p> required Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def transform(self, transformation_matrix: np.ndarray) -&gt; None:\n    \"\"\"\n    Apply a transformation to the visual link's origin.\n\n    Args:\n        transformation_matrix (np.ndarray): A 4x4 transformation matrix (homogeneous).\n    \"\"\"\n    # Apply translation and rotation to the origin position\n    pos = np.array([self.origin.xyz[0], self.origin.xyz[1], self.origin.xyz[2], 1])\n    new_pos = transformation_matrix @ pos\n    self.origin.xyz = tuple(new_pos[:3])  # Update position\n\n    # Extract the rotation from the transformation matrix\n    rotation_matrix = transformation_matrix[:3, :3]\n    current_rotation = R.from_euler(\"xyz\", self.origin.rpy)\n    new_rotation = R.from_matrix(rotation_matrix @ current_rotation.as_matrix())\n    self.origin.rpy = new_rotation.as_euler(\"xyz\").tolist()\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Colors","title":"<code>Colors</code>","text":"<p>               Bases: <code>tuple[float, float, float]</code>, <code>Enum</code></p> <p>Enumerates the possible colors in RGBA format for a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>RED</code> <code>tuple[float, float, float]</code> <p>Color red.</p> <code>GREEN</code> <code>tuple[float, float, float]</code> <p>Color green.</p> <code>BLUE</code> <code>tuple[float, float, float]</code> <p>Color blue.</p> <code>YELLOW</code> <code>tuple[float, float, float]</code> <p>Color yellow.</p> <code>CYAN</code> <code>tuple[float, float, float]</code> <p>Color cyan.</p> <code>MAGENTA</code> <code>tuple[float, float, float]</code> <p>Color magenta.</p> <code>WHITE</code> <code>tuple[float, float, float]</code> <p>Color white.</p> <code>BLACK</code> <code>tuple[float, float, float]</code> <p>Color black.</p> <code>ORANGE</code> <code>tuple[float, float, float]</code> <p>Color orange.</p> <code>PINK</code> <code>tuple[float, float, float]</code> <p>Color pink.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Colors.RED\n&lt;Colors.RED: (1.0, 0.0, 0.0)&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>class Colors(tuple[float, float, float], Enum):\n    \"\"\"\n    Enumerates the possible colors in RGBA format for a link in the robot model.\n\n    Attributes:\n        RED (tuple[float, float, float]): Color red.\n        GREEN (tuple[float, float, float]): Color green.\n        BLUE (tuple[float, float, float]): Color blue.\n        YELLOW (tuple[float, float, float]): Color yellow.\n        CYAN (tuple[float, float, float]): Color cyan.\n        MAGENTA (tuple[float, float, float]): Color magenta.\n        WHITE (tuple[float, float, float]): Color white.\n        BLACK (tuple[float, float, float]): Color black.\n        ORANGE (tuple[float, float, float]): Color orange.\n        PINK (tuple[float, float, float]): Color pink.\n\n    Examples:\n        &gt;&gt;&gt; Colors.RED\n        &lt;Colors.RED: (1.0, 0.0, 0.0)&gt;\n    \"\"\"\n\n    RED = (1.0, 0.0, 0.0, 1.0)\n    GREEN = (0.0, 1.0, 0.0, 1.0)\n    BLUE = (0.0, 0.0, 1.0, 1.0)\n    YELLOW = (1.0, 1.0, 0.0, 1.0)\n    CYAN = (0.0, 1.0, 1.0, 1.0)\n    MAGENTA = (1.0, 0.0, 1.0, 1.0)\n    WHITE = (1.0, 1.0, 1.0, 1.0)\n    BLACK = (0.0, 0.0, 0.0, 1.0)\n    ORANGE = (1.0, 0.5, 0.0, 1.0)\n    PINK = (1.0, 0.0, 0.5, 1.0)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Inertia","title":"<code>Inertia</code>  <code>dataclass</code>","text":"<p>Represents the inertia tensor of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>ixx</code> <code>float</code> <p>The inertia tensor element Ixx.</p> <code>iyy</code> <code>float</code> <p>The inertia tensor element Iyy.</p> <code>izz</code> <code>float</code> <p>The inertia tensor element Izz.</p> <code>ixy</code> <code>float</code> <p>The inertia tensor element Ixy.</p> <code>ixz</code> <code>float</code> <p>The inertia tensor element Ixz.</p> <code>iyz</code> <code>float</code> <p>The inertia tensor element Iyz.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the inertia tensor to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n&gt;&gt;&gt; inertia.to_xml()\n&lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass Inertia:\n    \"\"\"\n    Represents the inertia tensor of a link in the robot model.\n\n    Attributes:\n        ixx (float): The inertia tensor element Ixx.\n        iyy (float): The inertia tensor element Iyy.\n        izz (float): The inertia tensor element Izz.\n        ixy (float): The inertia tensor element Ixy.\n        ixz (float): The inertia tensor element Ixz.\n        iyz (float): The inertia tensor element Iyz.\n\n    Methods:\n        to_xml: Converts the inertia tensor to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n        &gt;&gt;&gt; inertia.to_xml()\n        &lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    ixx: float\n    iyy: float\n    izz: float\n    ixy: float\n    ixz: float\n    iyz: float\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the inertia tensor to an XML element.\n\n        Args:\n            root: The root element to append the inertia tensor to.\n\n        Returns:\n            The XML element representing the inertia tensor.\n\n        Examples:\n            &gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n            &gt;&gt;&gt; inertia.to_xml()\n            &lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        inertia = ET.Element(\"inertia\") if root is None else ET.SubElement(root, \"inertia\")\n        inertia.set(\"ixx\", format_number(self.ixx))\n        inertia.set(\"iyy\", format_number(self.iyy))\n        inertia.set(\"izz\", format_number(self.izz))\n        inertia.set(\"ixy\", format_number(self.ixy))\n        inertia.set(\"ixz\", format_number(self.ixz))\n        inertia.set(\"iyz\", format_number(self.iyz))\n        return inertia\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the inertia tensor to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the inertia tensor to.\n\n        Returns:\n            The XML element representing the inertia tensor.\n\n        Examples:\n            &gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n            &gt;&gt;&gt; inertia.to_mjcf()\n            &lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        inertial = root if root.tag == \"inertial\" else ET.SubElement(root, \"inertial\")\n        inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in [self.ixx, self.iyy, self.izz]))\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"Inertia\":\n        \"\"\"\n        Create an inertia tensor from an XML element.\n\n        Args:\n            xml: The XML element to create the inertia tensor from.\n\n        Returns:\n            The inertia tensor created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('inertia')\n            &gt;&gt;&gt; Inertia.from_xml(xml)\n            Inertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n        \"\"\"\n        ixx = float(xml.get(\"ixx\"))\n        iyy = float(xml.get(\"iyy\"))\n        izz = float(xml.get(\"izz\"))\n        ixy = float(xml.get(\"ixy\"))\n        ixz = float(xml.get(\"ixz\"))\n        iyz = float(xml.get(\"iyz\"))\n        return cls(ixx, iyy, izz, ixy, ixz, iyz)\n\n    @classmethod\n    def zero_inertia(cls) -&gt; \"Inertia\":\n        \"\"\"\n        Create an inertia tensor with zero values.\n\n        Returns:\n            The inertia tensor with zero values.\n\n        Examples:\n            &gt;&gt;&gt; Inertia.zero_inertia()\n            Inertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n        \"\"\"\n        return cls(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Inertia.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create an inertia tensor from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the inertia tensor from.</p> required <p>Returns:</p> Type Description <code>Inertia</code> <p>The inertia tensor created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('inertia')\n&gt;&gt;&gt; Inertia.from_xml(xml)\nInertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"Inertia\":\n    \"\"\"\n    Create an inertia tensor from an XML element.\n\n    Args:\n        xml: The XML element to create the inertia tensor from.\n\n    Returns:\n        The inertia tensor created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('inertia')\n        &gt;&gt;&gt; Inertia.from_xml(xml)\n        Inertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n    \"\"\"\n    ixx = float(xml.get(\"ixx\"))\n    iyy = float(xml.get(\"iyy\"))\n    izz = float(xml.get(\"izz\"))\n    ixy = float(xml.get(\"ixy\"))\n    ixz = float(xml.get(\"ixz\"))\n    iyz = float(xml.get(\"iyz\"))\n    return cls(ixx, iyy, izz, ixy, ixz, iyz)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Inertia.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the inertia tensor to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the inertia tensor to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the inertia tensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n&gt;&gt;&gt; inertia.to_mjcf()\n&lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the inertia tensor to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the inertia tensor to.\n\n    Returns:\n        The XML element representing the inertia tensor.\n\n    Examples:\n        &gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n        &gt;&gt;&gt; inertia.to_mjcf()\n        &lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    inertial = root if root.tag == \"inertial\" else ET.SubElement(root, \"inertial\")\n    inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in [self.ixx, self.iyy, self.izz]))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Inertia.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the inertia tensor to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the inertia tensor to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the inertia tensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n&gt;&gt;&gt; inertia.to_xml()\n&lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the inertia tensor to an XML element.\n\n    Args:\n        root: The root element to append the inertia tensor to.\n\n    Returns:\n        The XML element representing the inertia tensor.\n\n    Examples:\n        &gt;&gt;&gt; inertia = Inertia(ixx=1.0, iyy=2.0, izz=3.0, ixy=0.0, ixz=0.0, iyz=0.0)\n        &gt;&gt;&gt; inertia.to_xml()\n        &lt;Element 'inertia' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    inertia = ET.Element(\"inertia\") if root is None else ET.SubElement(root, \"inertia\")\n    inertia.set(\"ixx\", format_number(self.ixx))\n    inertia.set(\"iyy\", format_number(self.iyy))\n    inertia.set(\"izz\", format_number(self.izz))\n    inertia.set(\"ixy\", format_number(self.ixy))\n    inertia.set(\"ixz\", format_number(self.ixz))\n    inertia.set(\"iyz\", format_number(self.iyz))\n    return inertia\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Inertia.zero_inertia","title":"<code>zero_inertia()</code>  <code>classmethod</code>","text":"<p>Create an inertia tensor with zero values.</p> <p>Returns:</p> Type Description <code>Inertia</code> <p>The inertia tensor with zero values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Inertia.zero_inertia()\nInertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef zero_inertia(cls) -&gt; \"Inertia\":\n    \"\"\"\n    Create an inertia tensor with zero values.\n\n    Returns:\n        The inertia tensor with zero values.\n\n    Examples:\n        &gt;&gt;&gt; Inertia.zero_inertia()\n        Inertia(ixx=0.0, iyy=0.0, izz=0.0, ixy=0.0, ixz=0.0, iyz=0.0)\n    \"\"\"\n    return cls(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.InertialLink","title":"<code>InertialLink</code>  <code>dataclass</code>","text":"<p>Represents the inertial properties of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>mass</code> <code>float</code> <p>The mass of the link.</p> <code>inertia</code> <code>Inertia</code> <p>The inertia properties of the link.</p> <code>origin</code> <code>Origin</code> <p>The origin of the link.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the inertial properties to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; inertial = InertialLink(mass=1.0, inertia=Inertia(...), origin=Origin(...))\n&gt;&gt;&gt; inertial.to_xml()\n&lt;Element 'inertial' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass InertialLink:\n    \"\"\"\n    Represents the inertial properties of a link in the robot model.\n\n    Attributes:\n        mass (float): The mass of the link.\n        inertia (Inertia): The inertia properties of the link.\n        origin (Origin): The origin of the link.\n\n    Methods:\n        to_xml: Converts the inertial properties to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; inertial = InertialLink(mass=1.0, inertia=Inertia(...), origin=Origin(...))\n        &gt;&gt;&gt; inertial.to_xml()\n        &lt;Element 'inertial' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    mass: float\n    inertia: Inertia\n    origin: Origin\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the inertial properties to an XML element.\n\n        Args:\n            root: The root element to append the inertial properties to.\n\n        Returns:\n            The XML element representing the inertial properties.\n\n        Examples:\n            &gt;&gt;&gt; inertial = InertialLink(mass=1.0, inertia=Inertia(...), origin=Origin(...))\n            &gt;&gt;&gt; inertial.to_xml()\n            &lt;Element 'inertial' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        inertial = ET.Element(\"inertial\") if root is None else ET.SubElement(root, \"inertial\")\n        ET.SubElement(inertial, \"mass\", value=format_number(self.mass))\n        self.inertia.to_xml(inertial)\n        self.origin.to_xml(inertial)\n        return inertial\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the inertial properties to an MuJoCo compatible XML element.\n\n        Example XML:\n        ```xml\n        &lt;inertial pos=\"0 0 -0.0075\" euler=\"0.5 0.5 -0.5\" mass=\"0.624\"\n                  diaginertia=\"0.073541512 0.07356916 0.073543931\" /&gt;\n        ```\n        Args:\n            root: The root element to append the inertial properties to.\n        \"\"\"\n        inertial = root if root.tag == \"inertial\" else ET.SubElement(root, \"inertial\")\n        inertial.set(\"mass\", format_number(self.mass))\n        self.origin.to_mjcf(inertial)\n        self.inertia.to_mjcf(inertial)\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"InertialLink\":\n        \"\"\"\n        Create inertial properties from an XML element.\n\n        Args:\n            xml: The XML element to create the inertial properties from.\n\n        Returns:\n            The inertial properties created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('inertial')\n            &gt;&gt;&gt; InertialLink.from_xml(xml)\n            InertialLink(mass=0.0, inertia=None, origin=None)\n        \"\"\"\n        mass = float(xml.find(\"mass\").get(\"value\"))\n\n        inertia_element = xml.find(\"inertia\")\n        inertia = Inertia.from_xml(inertia_element) if inertia_element is not None else None\n\n        origin_element = xml.find(\"origin\")\n        origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n        return cls(mass=mass, inertia=inertia, origin=origin)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.InertialLink.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create inertial properties from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the inertial properties from.</p> required <p>Returns:</p> Type Description <code>InertialLink</code> <p>The inertial properties created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('inertial')\n&gt;&gt;&gt; InertialLink.from_xml(xml)\nInertialLink(mass=0.0, inertia=None, origin=None)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"InertialLink\":\n    \"\"\"\n    Create inertial properties from an XML element.\n\n    Args:\n        xml: The XML element to create the inertial properties from.\n\n    Returns:\n        The inertial properties created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('inertial')\n        &gt;&gt;&gt; InertialLink.from_xml(xml)\n        InertialLink(mass=0.0, inertia=None, origin=None)\n    \"\"\"\n    mass = float(xml.find(\"mass\").get(\"value\"))\n\n    inertia_element = xml.find(\"inertia\")\n    inertia = Inertia.from_xml(inertia_element) if inertia_element is not None else None\n\n    origin_element = xml.find(\"origin\")\n    origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n    return cls(mass=mass, inertia=inertia, origin=origin)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.InertialLink.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the inertial properties to an MuJoCo compatible XML element.</p> <p>Example XML: <pre><code>&lt;inertial pos=\"0 0 -0.0075\" euler=\"0.5 0.5 -0.5\" mass=\"0.624\"\n          diaginertia=\"0.073541512 0.07356916 0.073543931\" /&gt;\n</code></pre> Args:     root: The root element to append the inertial properties to.</p> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the inertial properties to an MuJoCo compatible XML element.\n\n    Example XML:\n    ```xml\n    &lt;inertial pos=\"0 0 -0.0075\" euler=\"0.5 0.5 -0.5\" mass=\"0.624\"\n              diaginertia=\"0.073541512 0.07356916 0.073543931\" /&gt;\n    ```\n    Args:\n        root: The root element to append the inertial properties to.\n    \"\"\"\n    inertial = root if root.tag == \"inertial\" else ET.SubElement(root, \"inertial\")\n    inertial.set(\"mass\", format_number(self.mass))\n    self.origin.to_mjcf(inertial)\n    self.inertia.to_mjcf(inertial)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.InertialLink.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the inertial properties to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the inertial properties to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the inertial properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; inertial = InertialLink(mass=1.0, inertia=Inertia(...), origin=Origin(...))\n&gt;&gt;&gt; inertial.to_xml()\n&lt;Element 'inertial' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the inertial properties to an XML element.\n\n    Args:\n        root: The root element to append the inertial properties to.\n\n    Returns:\n        The XML element representing the inertial properties.\n\n    Examples:\n        &gt;&gt;&gt; inertial = InertialLink(mass=1.0, inertia=Inertia(...), origin=Origin(...))\n        &gt;&gt;&gt; inertial.to_xml()\n        &lt;Element 'inertial' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    inertial = ET.Element(\"inertial\") if root is None else ET.SubElement(root, \"inertial\")\n    ET.SubElement(inertial, \"mass\", value=format_number(self.mass))\n    self.inertia.to_xml(inertial)\n    self.origin.to_xml(inertial)\n    return inertial\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Link","title":"<code>Link</code>  <code>dataclass</code>","text":"<p>Represents a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the link.</p> <code>visual</code> <code>VisualLink</code> <p>The visual properties of the link.</p> <code>collision</code> <code>CollisionLink</code> <p>The collision properties of the link.</p> <code>inertial</code> <code>InertialLink</code> <p>The inertial properties of the link.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the link to an XML element.</p> Class Methods <p>from_xml: Creates a link from an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; link = Link(name=\"link\", visual=VisualLink(...), collision=CollisionLink(...), inertial=InertialLink(...))\n&gt;&gt;&gt; link.to_xml()\n&lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; part = Part(...)\n&gt;&gt;&gt; Link.from_part(part)\nLink(name='partId', visual=None, collision=None, inertial=None)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass Link:\n    \"\"\"\n    Represents a link in the robot model.\n\n    Attributes:\n        name (str): The name of the link.\n        visual (VisualLink): The visual properties of the link.\n        collision (CollisionLink): The collision properties of the link.\n        inertial (InertialLink): The inertial properties of the link.\n\n    Methods:\n        to_xml: Converts the link to an XML element.\n\n    Class Methods:\n        from_xml: Creates a link from an XML element.\n\n    Examples:\n        &gt;&gt;&gt; link = Link(name=\"link\", visual=VisualLink(...), collision=CollisionLink(...), inertial=InertialLink(...))\n        &gt;&gt;&gt; link.to_xml()\n        &lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n\n        &gt;&gt;&gt; part = Part(...)\n        &gt;&gt;&gt; Link.from_part(part)\n        Link(name='partId', visual=None, collision=None, inertial=None)\n    \"\"\"\n\n    name: str\n    visual: VisualLink | None = None\n    collision: CollisionLink | None = None\n    inertial: InertialLink | None = None\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the link to an XML element.\n\n        Args:\n            root: The root element to append the link to.\n\n        Returns:\n            The XML element representing the link.\n\n        Examples:\n            &gt;&gt;&gt; link = Link(\n            ...     name=\"link\",\n            ...     visual=VisualLink(...),\n            ...     collision=CollisionLink(...),\n            ...     inertial=InertialLink(...),\n            ... )\n            &gt;&gt;&gt; link.to_xml()\n            &lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        link = ET.Element(\"link\") if root is None else ET.SubElement(root, \"link\")\n        link.set(\"name\", self.name)\n        if self.visual is not None:\n            self.visual.to_xml(link)\n        if self.collision is not None:\n            self.collision.to_xml(link)\n        if self.inertial is not None:\n            self.inertial.to_xml(link)\n        return link\n\n    def to_mjcf(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the link to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the link to.\n\n        Returns:\n            The XML element representing the link.\n\n        Examples:\n            &gt;&gt;&gt; link = Link(\n            ...     name=\"link\",\n            ...     visual=VisualLink(...),\n            ...     collision=CollisionLink(...),\n            ...     inertial=InertialLink(...),\n            ... )\n            &gt;&gt;&gt; link.to_mjcf()\n            &lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        link = ET.Element(\"body\") if root is None else ET.SubElement(root, \"body\")\n        link.set(\"name\", self.name)\n\n        if self.visual:\n            link.set(\"pos\", \" \".join(map(str, self.visual.origin.xyz)))\n            link.set(\"euler\", \" \".join(map(str, self.visual.origin.rpy)))\n\n        if self.collision:\n            self.collision.to_mjcf(link)\n\n        if self.visual:\n            self.visual.to_mjcf(link)\n\n        if self.inertial:\n            self.inertial.to_mjcf(link)\n\n        return link\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"Link\":\n        \"\"\"\n        Create a link from an XML element.\n\n        Args:\n            xml: The XML element to create the link from.\n\n        Returns:\n            The link created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('link')\n            &gt;&gt;&gt; Link.from_xml(xml)\n            Link(name='link', visual=None, collision=None, inertial=None)\n        \"\"\"\n        name = xml.get(\"name\")\n\n        visual_element = xml.find(\"visual\")\n        visual = VisualLink.from_xml(visual_element) if visual_element is not None else None\n\n        collision_element = xml.find(\"collision\")\n        collision = CollisionLink.from_xml(collision_element) if collision_element is not None else None\n\n        inertial_element = xml.find(\"inertial\")\n        inertial = InertialLink.from_xml(inertial_element) if inertial_element is not None else None\n\n        return cls(name=name, visual=visual, collision=collision, inertial=inertial)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Link.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create a link from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the link from.</p> required <p>Returns:</p> Type Description <code>Link</code> <p>The link created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('link')\n&gt;&gt;&gt; Link.from_xml(xml)\nLink(name='link', visual=None, collision=None, inertial=None)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"Link\":\n    \"\"\"\n    Create a link from an XML element.\n\n    Args:\n        xml: The XML element to create the link from.\n\n    Returns:\n        The link created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('link')\n        &gt;&gt;&gt; Link.from_xml(xml)\n        Link(name='link', visual=None, collision=None, inertial=None)\n    \"\"\"\n    name = xml.get(\"name\")\n\n    visual_element = xml.find(\"visual\")\n    visual = VisualLink.from_xml(visual_element) if visual_element is not None else None\n\n    collision_element = xml.find(\"collision\")\n    collision = CollisionLink.from_xml(collision_element) if collision_element is not None else None\n\n    inertial_element = xml.find(\"inertial\")\n    inertial = InertialLink.from_xml(inertial_element) if inertial_element is not None else None\n\n    return cls(name=name, visual=visual, collision=collision, inertial=inertial)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Link.to_mjcf","title":"<code>to_mjcf(root=None)</code>","text":"<p>Convert the link to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the link to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the link.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; link = Link(\n...     name=\"link\",\n...     visual=VisualLink(...),\n...     collision=CollisionLink(...),\n...     inertial=InertialLink(...),\n... )\n&gt;&gt;&gt; link.to_mjcf()\n&lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the link to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the link to.\n\n    Returns:\n        The XML element representing the link.\n\n    Examples:\n        &gt;&gt;&gt; link = Link(\n        ...     name=\"link\",\n        ...     visual=VisualLink(...),\n        ...     collision=CollisionLink(...),\n        ...     inertial=InertialLink(...),\n        ... )\n        &gt;&gt;&gt; link.to_mjcf()\n        &lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    link = ET.Element(\"body\") if root is None else ET.SubElement(root, \"body\")\n    link.set(\"name\", self.name)\n\n    if self.visual:\n        link.set(\"pos\", \" \".join(map(str, self.visual.origin.xyz)))\n        link.set(\"euler\", \" \".join(map(str, self.visual.origin.rpy)))\n\n    if self.collision:\n        self.collision.to_mjcf(link)\n\n    if self.visual:\n        self.visual.to_mjcf(link)\n\n    if self.inertial:\n        self.inertial.to_mjcf(link)\n\n    return link\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Link.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the link to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the link to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the link.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; link = Link(\n...     name=\"link\",\n...     visual=VisualLink(...),\n...     collision=CollisionLink(...),\n...     inertial=InertialLink(...),\n... )\n&gt;&gt;&gt; link.to_xml()\n&lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the link to an XML element.\n\n    Args:\n        root: The root element to append the link to.\n\n    Returns:\n        The XML element representing the link.\n\n    Examples:\n        &gt;&gt;&gt; link = Link(\n        ...     name=\"link\",\n        ...     visual=VisualLink(...),\n        ...     collision=CollisionLink(...),\n        ...     inertial=InertialLink(...),\n        ... )\n        &gt;&gt;&gt; link.to_xml()\n        &lt;Element 'link' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    link = ET.Element(\"link\") if root is None else ET.SubElement(root, \"link\")\n    link.set(\"name\", self.name)\n    if self.visual is not None:\n        self.visual.to_xml(link)\n    if self.collision is not None:\n        self.collision.to_xml(link)\n    if self.inertial is not None:\n        self.inertial.to_xml(link)\n    return link\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Material","title":"<code>Material</code>  <code>dataclass</code>","text":"<p>Represents the material properties of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the material.</p> <code>color</code> <code>tuple[float, float, float, float]</code> <p>The color of the material in RGBA format.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the material properties to an XML element.</p> Class Methods <p>from_color: Creates a material from a color.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n&gt;&gt;&gt; material.to_xml()\n&lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; Material.from_color(name=\"material\", color=Colors.RED)\nMaterial(name='material', color=(1.0, 0.0, 0.0, 1.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass Material:\n    \"\"\"\n    Represents the material properties of a link in the robot model.\n\n    Attributes:\n        name (str): The name of the material.\n        color (tuple[float, float, float, float]): The color of the material in RGBA format.\n\n    Methods:\n        to_xml: Converts the material properties to an XML element.\n\n    Class Methods:\n        from_color: Creates a material from a color.\n\n    Examples:\n        &gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n        &gt;&gt;&gt; material.to_xml()\n        &lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n\n        &gt;&gt;&gt; Material.from_color(name=\"material\", color=Colors.RED)\n        Material(name='material', color=(1.0, 0.0, 0.0, 1.0))\n    \"\"\"\n\n    name: str\n    color: tuple[float, float, float, float]\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the material properties to an XML element.\n\n        Args:\n            root: The root element to append the material properties to.\n\n        Returns:\n            The XML element representing the material properties.\n\n        Examples:\n            &gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n            &gt;&gt;&gt; material.to_xml()\n            &lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        material = ET.Element(\"material\") if root is None else ET.SubElement(root, \"material\")\n        material.set(\"name\", self.name)\n        ET.SubElement(material, \"color\", rgba=\" \".join(format_number(v) for v in self.color))\n        return material\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the material properties to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the material properties to.\n\n        Returns:\n            The XML element representing the material properties.\n\n        Examples:\n            &gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n            &gt;&gt;&gt; material.to_mjcf()\n            &lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        geom.set(\"rgba\", \" \".join(format_number(v) for v in self.color))\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"Material\":\n        \"\"\"\n        Create a material from an XML element.\n\n        Args:\n            xml: The XML element to create the material from.\n\n        Returns:\n            The material created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('material')\n            &gt;&gt;&gt; Material.from_xml(xml)\n            Material(name='material', color=(1.0, 0.0, 0.0, 1.0))\n        \"\"\"\n\n        name = xml.get(\"name\")\n        color = tuple(map(float, xml.find(\"color\").get(\"rgba\").split()))\n        return cls(name, color)\n\n    @classmethod\n    def from_color(cls, name: str, color: Colors) -&gt; \"Material\":\n        \"\"\"\n        Create a material from a color.\n\n        Args:\n            name: The name of the material.\n            color: The color of the material.\n\n        Returns:\n            The material created from the color.\n\n        Examples:\n            &gt;&gt;&gt; Material.from_color(name=\"material\", color=Colors.RED)\n            Material(name='material', color=(1.0, 0.0, 0.0, 1.0))\n        \"\"\"\n        return cls(name, color)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Material.from_color","title":"<code>from_color(name, color)</code>  <code>classmethod</code>","text":"<p>Create a material from a color.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the material.</p> required <code>color</code> <code>Colors</code> <p>The color of the material.</p> required <p>Returns:</p> Type Description <code>Material</code> <p>The material created from the color.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Material.from_color(name=\"material\", color=Colors.RED)\nMaterial(name='material', color=(1.0, 0.0, 0.0, 1.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_color(cls, name: str, color: Colors) -&gt; \"Material\":\n    \"\"\"\n    Create a material from a color.\n\n    Args:\n        name: The name of the material.\n        color: The color of the material.\n\n    Returns:\n        The material created from the color.\n\n    Examples:\n        &gt;&gt;&gt; Material.from_color(name=\"material\", color=Colors.RED)\n        Material(name='material', color=(1.0, 0.0, 0.0, 1.0))\n    \"\"\"\n    return cls(name, color)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Material.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create a material from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the material from.</p> required <p>Returns:</p> Type Description <code>Material</code> <p>The material created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('material')\n&gt;&gt;&gt; Material.from_xml(xml)\nMaterial(name='material', color=(1.0, 0.0, 0.0, 1.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"Material\":\n    \"\"\"\n    Create a material from an XML element.\n\n    Args:\n        xml: The XML element to create the material from.\n\n    Returns:\n        The material created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('material')\n        &gt;&gt;&gt; Material.from_xml(xml)\n        Material(name='material', color=(1.0, 0.0, 0.0, 1.0))\n    \"\"\"\n\n    name = xml.get(\"name\")\n    color = tuple(map(float, xml.find(\"color\").get(\"rgba\").split()))\n    return cls(name, color)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Material.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the material properties to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the material properties to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the material properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n&gt;&gt;&gt; material.to_mjcf()\n&lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the material properties to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the material properties to.\n\n    Returns:\n        The XML element representing the material properties.\n\n    Examples:\n        &gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n        &gt;&gt;&gt; material.to_mjcf()\n        &lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    geom = root if root is not None and root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    geom.set(\"rgba\", \" \".join(format_number(v) for v in self.color))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Material.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the material properties to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the material properties to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the material properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n&gt;&gt;&gt; material.to_xml()\n&lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the material properties to an XML element.\n\n    Args:\n        root: The root element to append the material properties to.\n\n    Returns:\n        The XML element representing the material properties.\n\n    Examples:\n        &gt;&gt;&gt; material = Material(name=\"material\", color=(1.0, 0.0, 0.0, 1.0))\n        &gt;&gt;&gt; material.to_xml()\n        &lt;Element 'material' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    material = ET.Element(\"material\") if root is None else ET.SubElement(root, \"material\")\n    material.set(\"name\", self.name)\n    ET.SubElement(material, \"color\", rgba=\" \".join(format_number(v) for v in self.color))\n    return material\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin","title":"<code>Origin</code>  <code>dataclass</code>","text":"<p>Represents the origin of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>xyz</code> <code>tuple[float, float, float]</code> <p>The x, y, z coordinates of the origin.</p> <code>rpy</code> <code>tuple[float, float, float]</code> <p>The roll, pitch, yaw angles of the origin.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the origin to an XML element.</p> Class Methods <p>from_matrix: Creates an origin from a transformation matrix. zero_origin: Creates an origin at the origin (0, 0, 0) with no rotation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n&gt;&gt;&gt; origin.to_xml()\n&lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; matrix = np.matrix([\n...     [1, 0, 0, 0],\n...     [0, 1, 0, 0],\n...     [0, 0, 1, 0],\n...     [0, 0, 0, 1],\n... ])\n&gt;&gt;&gt; Origin.from_matrix(matrix)\nOrigin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n</code></pre> <pre><code>&gt;&gt;&gt; Origin.zero_origin()\nOrigin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass Origin:\n    \"\"\"\n    Represents the origin of a link in the robot model.\n\n    Attributes:\n        xyz (tuple[float, float, float]): The x, y, z coordinates of the origin.\n        rpy (tuple[float, float, float]): The roll, pitch, yaw angles of the origin.\n\n    Methods:\n        to_xml: Converts the origin to an XML element.\n\n    Class Methods:\n        from_matrix: Creates an origin from a transformation matrix.\n        zero_origin: Creates an origin at the origin (0, 0, 0) with no rotation.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n        &gt;&gt;&gt; origin.to_xml()\n        &lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n\n        &gt;&gt;&gt; matrix = np.matrix([\n        ...     [1, 0, 0, 0],\n        ...     [0, 1, 0, 0],\n        ...     [0, 0, 1, 0],\n        ...     [0, 0, 0, 1],\n        ... ])\n        &gt;&gt;&gt; Origin.from_matrix(matrix)\n        Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n\n        &gt;&gt;&gt; Origin.zero_origin()\n        Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n    \"\"\"\n\n    xyz: tuple[float, float, float]\n    rpy: tuple[float, float, float]\n\n    def transform(self, matrix: np.matrix, inplace: bool = False) -&gt; Union[\"Origin\", None]:\n        \"\"\"\n        Apply a transformation matrix to the origin.\n\n        Args:\n            matrix: The transformation matrix to apply to the origin.\n            inplace: Whether to apply the transformation in place.\n\n        Returns:\n            The origin with the transformation applied.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n            &gt;&gt;&gt; matrix = np.eye(4)\n            &gt;&gt;&gt; origin.transform(matrix)\n        \"\"\"\n        new_xyz = np.dot(matrix[:3, :3], np.array(self.xyz)) + matrix[:3, 3]\n        current_rotation_matrix = Rotation.from_euler(\"xyz\", self.rpy).as_matrix()\n\n        new_rotation_matrix = np.dot(matrix[:3, :3], current_rotation_matrix)\n        new_rpy = Rotation.from_matrix(new_rotation_matrix).as_euler(\"xyz\")\n        if inplace:\n            self.xyz = tuple(new_xyz)\n            self.rpy = tuple(new_rpy)\n            return None\n\n        return Origin(new_xyz, new_rpy)\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the origin to an XML element.\n\n        Args:\n            root: The root element to append the origin to.\n\n        Returns:\n            The XML element representing the origin.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n            &gt;&gt;&gt; origin.to_xml()\n            &lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n\n        origin = ET.Element(\"origin\") if root is None else ET.SubElement(root, \"origin\")\n        origin.set(\"xyz\", \" \".join(format_number(v) for v in self.xyz))\n        origin.set(\"rpy\", \" \".join(format_number(v) for v in self.rpy))\n        return origin\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the origin to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the origin to.\n\n        Returns:\n            The XML element representing the origin.\n\n        Examples:\n            &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n            &gt;&gt;&gt; origin.to_mjcf()\n            &lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        root.set(\"pos\", \" \".join(format_number(v) for v in self.xyz))\n        root.set(\"euler\", \" \".join(format_number(v) for v in self.rpy))\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"Origin\":\n        \"\"\"\n        Create an origin from an XML element.\n\n        Args:\n            xml: The XML element to create the origin from.\n\n        Returns:\n            The origin created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('origin')\n            &gt;&gt;&gt; Origin.from_xml(xml)\n            Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n        \"\"\"\n\n        xyz = tuple(map(float, xml.get(\"xyz\").split()))\n        rpy = tuple(map(float, xml.get(\"rpy\").split()))\n        return cls(xyz, rpy)\n\n    def quat(self, sequence: str = \"xyz\") -&gt; str:\n        \"\"\"\n        Convert the origin to a quaternion.\n\n        Args:\n            sequence: The sequence of the Euler angles.\n\n        Returns:\n            The quaternion representing the origin.\n        \"\"\"\n        return Rotation.from_euler(sequence, self.rpy).as_quat()\n\n    @classmethod\n    def from_matrix(cls, matrix: np.matrix) -&gt; \"Origin\":\n        \"\"\"\n        Create an origin from a transformation matrix.\n\n        Args:\n            matrix: The transformation matrix.\n\n        Returns:\n            The origin created from the transformation matrix.\n\n        Examples:\n            &gt;&gt;&gt; matrix = np.matrix([\n            ...     [1, 0, 0, 0],\n            ...     [0, 1, 0, 0],\n            ...     [0, 0, 1, 0],\n            ...     [0, 0, 0, 1],\n            ... ])\n            &gt;&gt;&gt; Origin.from_matrix(matrix)\n            Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n        \"\"\"\n\n        x = float(matrix[0, 3])\n        y = float(matrix[1, 3])\n        z = float(matrix[2, 3])\n        roll, pitch, yaw = Rotation.from_matrix(matrix[:3, :3]).as_euler(\"xyz\")\n        return cls((x, y, z), (roll, pitch, yaw))\n\n    @classmethod\n    def zero_origin(cls) -&gt; \"Origin\":\n        \"\"\"\n        Create an origin at the origin (0, 0, 0) with no rotation.\n\n        Returns:\n            The origin at the origin (0, 0, 0) with no rotation.\n\n        Examples:\n            &gt;&gt;&gt; Origin.zero_origin()\n            Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n        \"\"\"\n\n        return cls((0.0, 0.0, 0.0), (0.0, 0.0, 0.0))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.from_matrix","title":"<code>from_matrix(matrix)</code>  <code>classmethod</code>","text":"<p>Create an origin from a transformation matrix.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>matrix</code> <p>The transformation matrix.</p> required <p>Returns:</p> Type Description <code>Origin</code> <p>The origin created from the transformation matrix.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; matrix = np.matrix([\n...     [1, 0, 0, 0],\n...     [0, 1, 0, 0],\n...     [0, 0, 1, 0],\n...     [0, 0, 0, 1],\n... ])\n&gt;&gt;&gt; Origin.from_matrix(matrix)\nOrigin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_matrix(cls, matrix: np.matrix) -&gt; \"Origin\":\n    \"\"\"\n    Create an origin from a transformation matrix.\n\n    Args:\n        matrix: The transformation matrix.\n\n    Returns:\n        The origin created from the transformation matrix.\n\n    Examples:\n        &gt;&gt;&gt; matrix = np.matrix([\n        ...     [1, 0, 0, 0],\n        ...     [0, 1, 0, 0],\n        ...     [0, 0, 1, 0],\n        ...     [0, 0, 0, 1],\n        ... ])\n        &gt;&gt;&gt; Origin.from_matrix(matrix)\n        Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n    \"\"\"\n\n    x = float(matrix[0, 3])\n    y = float(matrix[1, 3])\n    z = float(matrix[2, 3])\n    roll, pitch, yaw = Rotation.from_matrix(matrix[:3, :3]).as_euler(\"xyz\")\n    return cls((x, y, z), (roll, pitch, yaw))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create an origin from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the origin from.</p> required <p>Returns:</p> Type Description <code>Origin</code> <p>The origin created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('origin')\n&gt;&gt;&gt; Origin.from_xml(xml)\nOrigin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"Origin\":\n    \"\"\"\n    Create an origin from an XML element.\n\n    Args:\n        xml: The XML element to create the origin from.\n\n    Returns:\n        The origin created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('origin')\n        &gt;&gt;&gt; Origin.from_xml(xml)\n        Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n    \"\"\"\n\n    xyz = tuple(map(float, xml.get(\"xyz\").split()))\n    rpy = tuple(map(float, xml.get(\"rpy\").split()))\n    return cls(xyz, rpy)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.quat","title":"<code>quat(sequence='xyz')</code>","text":"<p>Convert the origin to a quaternion.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>str</code> <p>The sequence of the Euler angles.</p> <code>'xyz'</code> <p>Returns:</p> Type Description <code>str</code> <p>The quaternion representing the origin.</p> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def quat(self, sequence: str = \"xyz\") -&gt; str:\n    \"\"\"\n    Convert the origin to a quaternion.\n\n    Args:\n        sequence: The sequence of the Euler angles.\n\n    Returns:\n        The quaternion representing the origin.\n    \"\"\"\n    return Rotation.from_euler(sequence, self.rpy).as_quat()\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the origin to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the origin to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the origin.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n&gt;&gt;&gt; origin.to_mjcf()\n&lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the origin to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the origin to.\n\n    Returns:\n        The XML element representing the origin.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n        &gt;&gt;&gt; origin.to_mjcf()\n        &lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    root.set(\"pos\", \" \".join(format_number(v) for v in self.xyz))\n    root.set(\"euler\", \" \".join(format_number(v) for v in self.rpy))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the origin to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the origin to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the origin.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n&gt;&gt;&gt; origin.to_xml()\n&lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the origin to an XML element.\n\n    Args:\n        root: The root element to append the origin to.\n\n    Returns:\n        The XML element representing the origin.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n        &gt;&gt;&gt; origin.to_xml()\n        &lt;Element 'origin' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    origin = ET.Element(\"origin\") if root is None else ET.SubElement(root, \"origin\")\n    origin.set(\"xyz\", \" \".join(format_number(v) for v in self.xyz))\n    origin.set(\"rpy\", \" \".join(format_number(v) for v in self.rpy))\n    return origin\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.transform","title":"<code>transform(matrix, inplace=False)</code>","text":"<p>Apply a transformation matrix to the origin.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>matrix</code> <p>The transformation matrix to apply to the origin.</p> required <code>inplace</code> <code>bool</code> <p>Whether to apply the transformation in place.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[Origin, None]</code> <p>The origin with the transformation applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n&gt;&gt;&gt; matrix = np.eye(4)\n&gt;&gt;&gt; origin.transform(matrix)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def transform(self, matrix: np.matrix, inplace: bool = False) -&gt; Union[\"Origin\", None]:\n    \"\"\"\n    Apply a transformation matrix to the origin.\n\n    Args:\n        matrix: The transformation matrix to apply to the origin.\n        inplace: Whether to apply the transformation in place.\n\n    Returns:\n        The origin with the transformation applied.\n\n    Examples:\n        &gt;&gt;&gt; origin = Origin(xyz=(1.0, 2.0, 3.0), rpy=(0.0, 0.0, 0.0))\n        &gt;&gt;&gt; matrix = np.eye(4)\n        &gt;&gt;&gt; origin.transform(matrix)\n    \"\"\"\n    new_xyz = np.dot(matrix[:3, :3], np.array(self.xyz)) + matrix[:3, 3]\n    current_rotation_matrix = Rotation.from_euler(\"xyz\", self.rpy).as_matrix()\n\n    new_rotation_matrix = np.dot(matrix[:3, :3], current_rotation_matrix)\n    new_rpy = Rotation.from_matrix(new_rotation_matrix).as_euler(\"xyz\")\n    if inplace:\n        self.xyz = tuple(new_xyz)\n        self.rpy = tuple(new_rpy)\n        return None\n\n    return Origin(new_xyz, new_rpy)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.Origin.zero_origin","title":"<code>zero_origin()</code>  <code>classmethod</code>","text":"<p>Create an origin at the origin (0, 0, 0) with no rotation.</p> <p>Returns:</p> Type Description <code>Origin</code> <p>The origin at the origin (0, 0, 0) with no rotation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Origin.zero_origin()\nOrigin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef zero_origin(cls) -&gt; \"Origin\":\n    \"\"\"\n    Create an origin at the origin (0, 0, 0) with no rotation.\n\n    Returns:\n        The origin at the origin (0, 0, 0) with no rotation.\n\n    Examples:\n        &gt;&gt;&gt; Origin.zero_origin()\n        Origin(xyz=(0.0, 0.0, 0.0), rpy=(0.0, 0.0, 0.0))\n    \"\"\"\n\n    return cls((0.0, 0.0, 0.0), (0.0, 0.0, 0.0))\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.VisualLink","title":"<code>VisualLink</code>  <code>dataclass</code>","text":"<p>Represents the visual properties of a link in the robot model.</p> <p>Attributes:</p> Name Type Description <code>origin</code> <code>Origin</code> <p>The origin of the link.</p> <code>geometry</code> <code>BaseGeometry</code> <p>The geometry of the link.</p> <code>material</code> <code>Material</code> <p>The material properties of the link.</p> <p>Methods:</p> Name Description <code>to_xml</code> <p>Converts the visual properties to an XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n&gt;&gt;&gt; visual.to_xml()\n&lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@dataclass\nclass VisualLink:\n    \"\"\"\n    Represents the visual properties of a link in the robot model.\n\n    Attributes:\n        origin (Origin): The origin of the link.\n        geometry (BaseGeometry): The geometry of the link.\n        material (Material): The material properties of the link.\n\n    Methods:\n        to_xml: Converts the visual properties to an XML element.\n\n    Examples:\n        &gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n        &gt;&gt;&gt; visual.to_xml()\n        &lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n\n    name: str\n    origin: Origin\n    geometry: BaseGeometry\n    material: Material\n\n    def transform(self, transformation_matrix: np.ndarray) -&gt; None:\n        \"\"\"\n        Apply a transformation to the visual link's origin.\n\n        Args:\n            transformation_matrix (np.ndarray): A 4x4 transformation matrix (homogeneous).\n        \"\"\"\n        # Apply translation and rotation to the origin position\n        pos = np.array([self.origin.xyz[0], self.origin.xyz[1], self.origin.xyz[2], 1])\n        new_pos = transformation_matrix @ pos\n        self.origin.xyz = tuple(new_pos[:3])  # Update position\n\n        # Extract the rotation from the transformation matrix\n        rotation_matrix = transformation_matrix[:3, :3]\n        current_rotation = R.from_euler(\"xyz\", self.origin.rpy)\n        new_rotation = R.from_matrix(rotation_matrix @ current_rotation.as_matrix())\n        self.origin.rpy = new_rotation.as_euler(\"xyz\").tolist()\n\n    def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n        \"\"\"\n        Convert the visual properties to an XML element.\n\n        Args:\n            root: The root element to append the visual properties to.\n\n        Returns:\n            The XML element representing the visual properties.\n\n        Examples:\n            &gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n            &gt;&gt;&gt; visual.to_xml()\n            &lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        visual = ET.Element(\"visual\") if root is None else ET.SubElement(root, \"visual\")\n        visual.set(\"name\", self.name)\n        self.origin.to_xml(visual)\n        self.geometry.to_xml(visual)\n        self.material.to_xml(visual)\n        return visual\n\n    def to_mjcf(self, root: ET.Element) -&gt; None:\n        \"\"\"\n        Convert the visual properties to an MuJoCo compatible XML element.\n\n        Args:\n            root: The root element to append the visual properties to.\n\n        Returns:\n            The XML element representing the visual properties.\n\n        Examples:\n            &gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n            &gt;&gt;&gt; visual.to_mjcf()\n            &lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n        \"\"\"\n        visual = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n        visual.set(\"name\", self.name)\n        # TODO: Parent body uses visual origin, these share the same?\n        self.origin.to_mjcf(visual)\n\n        if self.geometry:\n            self.geometry.to_mjcf(visual)\n\n        self.material.to_mjcf(visual)\n\n        visual.set(\"conaffinity\", \"0\")\n        visual.set(\"condim\", \"1\")\n        visual.set(\"contype\", \"0\")\n        visual.set(\"density\", \"0\")\n        visual.set(\"group\", \"1\")\n\n    @classmethod\n    def from_xml(cls, xml: ET.Element) -&gt; \"VisualLink\":\n        \"\"\"\n        Create a visual link from an XML element.\n\n        Args:\n            xml: The XML element to create the visual link from.\n\n        Returns:\n            The visual link created from the XML element.\n\n        Examples:\n            &gt;&gt;&gt; xml = ET.Element('visual')\n            &gt;&gt;&gt; VisualLink.from_xml(xml)\n            VisualLink(name='visual', origin=None, geometry=None, material=None)\n        \"\"\"\n        name = xml.get(\"name\")\n\n        origin_element = xml.find(\"origin\")\n        origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n        geometry_element = xml.find(\"geometry\")\n        geometry = set_geometry_from_xml(geometry_element) if geometry_element is not None else None\n\n        material_element = xml.find(\"material\")\n        material = Material.from_xml(material_element) if material_element is not None else None\n        return cls(name=name, origin=origin, geometry=geometry, material=material)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.VisualLink.from_xml","title":"<code>from_xml(xml)</code>  <code>classmethod</code>","text":"<p>Create a visual link from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>xml</code> <code>Element</code> <p>The XML element to create the visual link from.</p> required <p>Returns:</p> Type Description <code>VisualLink</code> <p>The visual link created from the XML element.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml = ET.Element('visual')\n&gt;&gt;&gt; VisualLink.from_xml(xml)\nVisualLink(name='visual', origin=None, geometry=None, material=None)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>@classmethod\ndef from_xml(cls, xml: ET.Element) -&gt; \"VisualLink\":\n    \"\"\"\n    Create a visual link from an XML element.\n\n    Args:\n        xml: The XML element to create the visual link from.\n\n    Returns:\n        The visual link created from the XML element.\n\n    Examples:\n        &gt;&gt;&gt; xml = ET.Element('visual')\n        &gt;&gt;&gt; VisualLink.from_xml(xml)\n        VisualLink(name='visual', origin=None, geometry=None, material=None)\n    \"\"\"\n    name = xml.get(\"name\")\n\n    origin_element = xml.find(\"origin\")\n    origin = Origin.from_xml(origin_element) if origin_element is not None else None\n\n    geometry_element = xml.find(\"geometry\")\n    geometry = set_geometry_from_xml(geometry_element) if geometry_element is not None else None\n\n    material_element = xml.find(\"material\")\n    material = Material.from_xml(material_element) if material_element is not None else None\n    return cls(name=name, origin=origin, geometry=geometry, material=material)\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.VisualLink.to_mjcf","title":"<code>to_mjcf(root)</code>","text":"<p>Convert the visual properties to an MuJoCo compatible XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Element</code> <p>The root element to append the visual properties to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The XML element representing the visual properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n&gt;&gt;&gt; visual.to_mjcf()\n&lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_mjcf(self, root: ET.Element) -&gt; None:\n    \"\"\"\n    Convert the visual properties to an MuJoCo compatible XML element.\n\n    Args:\n        root: The root element to append the visual properties to.\n\n    Returns:\n        The XML element representing the visual properties.\n\n    Examples:\n        &gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n        &gt;&gt;&gt; visual.to_mjcf()\n        &lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    visual = root if root.tag == \"geom\" else ET.SubElement(root, \"geom\")\n    visual.set(\"name\", self.name)\n    # TODO: Parent body uses visual origin, these share the same?\n    self.origin.to_mjcf(visual)\n\n    if self.geometry:\n        self.geometry.to_mjcf(visual)\n\n    self.material.to_mjcf(visual)\n\n    visual.set(\"conaffinity\", \"0\")\n    visual.set(\"condim\", \"1\")\n    visual.set(\"contype\", \"0\")\n    visual.set(\"density\", \"0\")\n    visual.set(\"group\", \"1\")\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.VisualLink.to_xml","title":"<code>to_xml(root=None)</code>","text":"<p>Convert the visual properties to an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Element]</code> <p>The root element to append the visual properties to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Element</code> <p>The XML element representing the visual properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n&gt;&gt;&gt; visual.to_xml()\n&lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def to_xml(self, root: Optional[ET.Element] = None) -&gt; ET.Element:\n    \"\"\"\n    Convert the visual properties to an XML element.\n\n    Args:\n        root: The root element to append the visual properties to.\n\n    Returns:\n        The XML element representing the visual properties.\n\n    Examples:\n        &gt;&gt;&gt; visual = VisualLink(origin=Origin(...), geometry=BoxGeometry(...), material=Material(...))\n        &gt;&gt;&gt; visual.to_xml()\n        &lt;Element 'visual' at 0x7f8b3c0b4c70&gt;\n    \"\"\"\n    visual = ET.Element(\"visual\") if root is None else ET.SubElement(root, \"visual\")\n    visual.set(\"name\", self.name)\n    self.origin.to_xml(visual)\n    self.geometry.to_xml(visual)\n    self.material.to_xml(visual)\n    return visual\n</code></pre>"},{"location":"api/link/#onshape_robotics_toolkit.models.link.VisualLink.transform","title":"<code>transform(transformation_matrix)</code>","text":"<p>Apply a transformation to the visual link's origin.</p> <p>Parameters:</p> Name Type Description Default <code>transformation_matrix</code> <code>ndarray</code> <p>A 4x4 transformation matrix (homogeneous).</p> required Source code in <code>onshape_robotics_toolkit\\models\\link.py</code> <pre><code>def transform(self, transformation_matrix: np.ndarray) -&gt; None:\n    \"\"\"\n    Apply a transformation to the visual link's origin.\n\n    Args:\n        transformation_matrix (np.ndarray): A 4x4 transformation matrix (homogeneous).\n    \"\"\"\n    # Apply translation and rotation to the origin position\n    pos = np.array([self.origin.xyz[0], self.origin.xyz[1], self.origin.xyz[2], 1])\n    new_pos = transformation_matrix @ pos\n    self.origin.xyz = tuple(new_pos[:3])  # Update position\n\n    # Extract the rotation from the transformation matrix\n    rotation_matrix = transformation_matrix[:3, :3]\n    current_rotation = R.from_euler(\"xyz\", self.origin.rpy)\n    new_rotation = R.from_matrix(rotation_matrix @ current_rotation.as_matrix())\n    self.origin.rpy = new_rotation.as_euler(\"xyz\").tolist()\n</code></pre>"},{"location":"api/log/","title":"Log","text":"<p>This module provides a custom logger class that extends the built-in Python logger.</p> <p>The custom logger class provides additional functionality for tracking and logging variables to a CSV file. This can be useful for monitoring the values of variables during program execution, especially in long-running or complex applications. The logger class also supports different log levels and log formatting options.</p> <p>The custom logger class is implemented as a singleton, ensuring that only one instance of the logger is created and used throughout the application. This helps to maintain a consistent logging configuration and avoid conflicts between multiple logger instances.</p> Class <ul> <li>Logger: Custom logger class that extends the built-in Python logger.</li> </ul> Enum <ul> <li>LogLevel: Enumerates the possible log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL).</li> </ul> Globals <ul> <li>LOGGER: Global instance of the custom logger class available for use throughout the library</li> <li>LOG_LEVEL: Dictionary mapping log level names to their corresponding integer values.</li> </ul>"},{"location":"api/log/#onshape_robotics_toolkit.log.LogLevel","title":"<code>LogLevel</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enumerates the possible log levels.</p> <p>Attributes:</p> Name Type Description <code>DEBUG</code> <code>int</code> <p>Debug log level</p> <code>INFO</code> <code>int</code> <p>Info log level</p> <code>WARNING</code> <code>int</code> <p>Warning log level</p> <code>ERROR</code> <code>int</code> <p>Error log level</p> <code>CRITICAL</code> <code>int</code> <p>Critical log level</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; LogLevel.DEBUG\n10\n&gt;&gt;&gt; LogLevel.INFO\n20\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>class LogLevel(Enum):\n    \"\"\"\n    Enumerates the possible log levels.\n\n    Attributes:\n        DEBUG (int): Debug log level\n        INFO (int): Info log level\n        WARNING (int): Warning log level\n        ERROR (int): Error log level\n        CRITICAL (int): Critical log level\n\n    Examples:\n        &gt;&gt;&gt; LogLevel.DEBUG\n        10\n        &gt;&gt;&gt; LogLevel.INFO\n        20\n    \"\"\"\n\n    DEBUG = logging.DEBUG\n    INFO = logging.INFO\n    WARNING = logging.WARNING\n    ERROR = logging.ERROR\n    CRITICAL = logging.CRITICAL\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger","title":"<code>Logger</code>","text":"<p>               Bases: <code>Logger</code></p> <p>Represents a custom singleton logger class that extends the built-in Python logger. The logger provides additional functionality for tracking and logging variables to a CSV file. It supports different log levels and log formatting options.</p> <p>Parameters:</p> Name Type Description Default <code>log_path</code> <code>str</code> <p>The path to save log files.</p> <code>'./'</code> <code>log_format</code> <code>str</code> <p>The log message format.</p> <code>'[%(asctime)s] %(levelname)s: %(message)s'</code> <code>file_level</code> <code>LogLevel</code> <p>The log level for file output.</p> <code>DEBUG</code> <code>stream_level</code> <code>LogLevel</code> <p>The log level for console output.</p> <code>INFO</code> <code>file_max_bytes</code> <code>int</code> <p>The maximum size of the log file in bytes before rotation.</p> <code>0</code> <code>file_backup_count</code> <code>int</code> <p>The number of backup log files to keep.</p> <code>5</code> <code>file_name</code> <code>Union[str, None]</code> <p>The base name for the log file.</p> <code>None</code> <code>buffer_size</code> <code>int</code> <p>The maximum number of log entries to buffer before writing to the CSV file.</p> <code>1000</code> Properties <ul> <li>file_path: The path to the log file.</li> <li>buffer_size: The maximum number of log entries to buffer.</li> <li>file_level: The log level for file output.</li> <li>stream_level: The log level for console output.</li> <li>file_max_bytes: The maximum size of the log file in bytes before rotation.</li> <li>file_backup_count: The number of backup log files to keep.</li> </ul> <p>Methods:</p> Name Description <code>- **track_variable**</code> <p>Track a variable for logging.</p> <code>- **untrack_variable**</code> <p>Stop tracking a variable.</p> <code>- **flush_buffer**</code> <p>Write the buffered log entries to the CSV file.</p> <code>- **reset**</code> <p>Reset the logger state.</p> <code>- **close**</code> <p>Close the logger and flush any remaining log entries.</p> <code>- **debug**</code> <p>Log a debug message.</p> <code>- **info**</code> <p>Log an info message.</p> <code>- **warning**</code> <p>Log a warning message.</p> <code>- **error**</code> <p>Log an error message.</p> <code>- **critical**</code> <p>Log a critical message.</p> <code>- **log**</code> <p>Log a message at a specific log level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; logger = Logger()\n&gt;&gt;&gt; logger.info(\"This is an info message\")\n[2022-01-01 12:00:00] INFO: This is an info message\n&gt;&gt;&gt; logger.debug(\"This is a debug message\")\n[2022-01-01 12:00:00] DEBUG: This is a debug message\n</code></pre> <pre><code>&gt;&gt;&gt; logger.track_variable(lambda: 42, \"answer\")\n&gt;&gt;&gt; logger.update()\n&gt;&gt;&gt; logger.flush_buffer()\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>class Logger(logging.Logger):\n    \"\"\"\n    Represents a custom singleton logger class that extends the built-in Python logger. The logger provides additional\n    functionality for tracking and logging variables to a CSV file. It supports different log levels and log formatting\n    options.\n\n    Args:\n        log_path (str): The path to save log files.\n        log_format (str): The log message format.\n        file_level (LogLevel): The log level for file output.\n        stream_level (LogLevel): The log level for console output.\n        file_max_bytes (int): The maximum size of the log file in bytes before rotation.\n        file_backup_count (int): The number of backup log files to keep.\n        file_name (Union[str, None]): The base name for the log file.\n        buffer_size (int): The maximum number of log entries to buffer before writing to the CSV file.\n\n    Properties:\n        - **file_path**: The path to the log file.\n        - **buffer_size**: The maximum number of log entries to buffer.\n        - **file_level**: The log level for file output.\n        - **stream_level**: The log level for console output.\n        - **file_max_bytes**: The maximum size of the log file in bytes before rotation.\n        - **file_backup_count**: The number of backup log files to keep.\n\n    Methods:\n        - **track_variable**: Track a variable for logging.\n        - **untrack_variable**: Stop tracking a variable.\n        - **flush_buffer**: Write the buffered log entries to the CSV file.\n        - **reset**: Reset the logger state.\n        - **close**: Close the logger and flush any remaining log entries.\n        - **debug**: Log a debug message.\n        - **info**: Log an info message.\n        - **warning**: Log a warning message.\n        - **error**: Log an error message.\n        - **critical**: Log a critical message.\n        - **log**: Log a message at a specific log level.\n\n    Examples:\n        &gt;&gt;&gt; logger = Logger()\n        &gt;&gt;&gt; logger.info(\"This is an info message\")\n        [2022-01-01 12:00:00] INFO: This is an info message\n        &gt;&gt;&gt; logger.debug(\"This is a debug message\")\n        [2022-01-01 12:00:00] DEBUG: This is a debug message\n\n        &gt;&gt;&gt; logger.track_variable(lambda: 42, \"answer\")\n        &gt;&gt;&gt; logger.update()\n        &gt;&gt;&gt; logger.flush_buffer()\n\n    \"\"\"\n\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        else:\n            print(f\"Reusing existing Logger instance: {id(cls._instance)}\")\n        return cls._instance\n\n    def __init__(\n        self,\n        log_path: str = \"./\",\n        log_format: str = \"[%(asctime)s] %(levelname)s: %(message)s\",\n        file_level: LogLevel = LogLevel.DEBUG,\n        stream_level: LogLevel = LogLevel.INFO,\n        file_max_bytes: int = 0,\n        file_backup_count: int = 5,\n        file_name: Union[str, None] = None,\n        buffer_size: int = 1000,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the custom logger with the specified configuration.\n\n        Args:\n            log_path: The path to save log files.\n            log_format: The log message format.\n            file_level: The log level for file output.\n            stream_level: The log level for console output.\n            file_max_bytes: The maximum size of the log file in bytes before rotation.\n            file_backup_count: The number of backup log files to keep.\n            file_name: The base name for the log file.\n            buffer_size: The maximum number of log entries to buffer before writing to the CSV file.\n        \"\"\"\n        if not hasattr(self, \"_initialized\"):\n            super().__init__(__name__)\n            self._log_path = log_path\n            self._log_format = log_format\n            self._file_level = file_level\n            self._stream_level = stream_level\n            self._file_max_bytes = file_max_bytes\n            self._file_backup_count = file_backup_count\n            self._user_file_name = file_name\n\n            self._file_path: str = \"\"\n            self._csv_path: str = \"\"\n            self._file: Optional[Any] = None\n            self._writer = None\n            self._is_logging = False\n            self._header_written = False\n\n            self._tracked_vars: dict[int, Callable[[], Any]] = {}\n            self._var_names: dict[int, str] = {}\n            self._buffer: deque[list[str]] = deque(maxlen=buffer_size)\n            self._buffer_size: int = buffer_size\n\n            self._setup_logging()\n            self._initialized: bool = True\n        else:\n            self.set_file_name(file_name)\n            self.set_file_level(file_level)\n            self.set_stream_level(stream_level)\n            self.set_format(log_format)\n            self._file_max_bytes = file_max_bytes\n            self._file_backup_count = file_backup_count\n            self.set_buffer_size(buffer_size)\n\n            self._log_path = log_path\n\n    def _setup_logging(self) -&gt; None:\n        if not hasattr(self, \"_stream_handler\"):  # Prevent duplicate handlers\n            self.setLevel(level=self._file_level.value)\n            self._std_formatter = logging.Formatter(self._log_format)\n\n            self._stream_handler = logging.StreamHandler()\n            self._stream_handler.setLevel(level=self._stream_level.value)\n            self._stream_handler.setFormatter(fmt=self._std_formatter)\n            self.addHandler(hdlr=self._stream_handler)\n\n    def _setup_file_handler(self) -&gt; None:\n        if not hasattr(self, \"_file_handler\"):  # Ensure file handler is added only once\n            self._generate_file_paths()\n\n            self._file_handler = RotatingFileHandler(\n                filename=self._file_path,\n                mode=\"w\",\n                maxBytes=self._file_max_bytes,\n                backupCount=self._file_backup_count,\n                encoding=\"utf-8\",\n            )\n            self._file_handler.setLevel(level=self._file_level.value)\n            self._file_handler.setFormatter(fmt=self._std_formatter)\n            self.addHandler(hdlr=self._file_handler)\n\n    def _ensure_file_handler(self):\n        if not hasattr(self, \"_file_handler\"):\n            self._setup_file_handler()\n\n    def track_variable(self, var_func: Callable[[], Any], name: str) -&gt; None:\n        \"\"\"\n        Record the value of a variable and log it to a CSV file.\n\n        Args:\n            var_func: A function that returns the value of the variable.\n            name: The name of the variable.\n\n        Examples:\n            &gt;&gt;&gt; class MyClass:\n            ...     def __init__(self):\n            ...         self.value = 42\n            &gt;&gt;&gt; obj = MyClass()\n            &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n            &gt;&gt;&gt; LOGGER.update()\n            &gt;&gt;&gt; LOGGER.flush_buffer()\n        \"\"\"\n\n        var_id = id(var_func)\n        self._tracked_vars[var_id] = var_func\n        self._var_names[var_id] = name\n\n    def untrack_variable(self, var_func: Callable[[], Any]) -&gt; None:\n        \"\"\"\n        Stop tracking a variable and remove it from the logger buffer.\n\n        Args:\n            var_func: The function used to track the variable.\n\n        Examples:\n            &gt;&gt;&gt; class MyClass:\n            ...     def __init__(self):\n            ...         self.value = 42\n            &gt;&gt;&gt; obj = MyClass()\n            &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n            &gt;&gt;&gt; LOGGER.update()\n            &gt;&gt;&gt; LOGGER.flush_buffer()\n            &gt;&gt;&gt; LOGGER.untrack_variable(lambda: obj.value)\n        \"\"\"\n        var_id = id(var_func)\n        self._tracked_vars.pop(var_id, None)\n        self._var_names.pop(var_id, None)\n\n    def __repr__(self) -&gt; str:\n        return f\"Logger(file_path={self._file_path})\"\n\n    def set_file_name(self, file_name: Union[str, None]) -&gt; None:\n        \"\"\"\n        Set the base name for the log file.\n\n        Args:\n            file_name: The base name for the log file.\n\n        Examples:\n            &gt;&gt;&gt; LOGGER.set_file_name(\"my_log_file\")\n            &gt;&gt;&gt; LOGGER.file_path\n            \"./my_log_file.log\"\n        \"\"\"\n        # if filename has an extension, remove it\n        if file_name is not None and \".\" in file_name:\n            file_name = file_name.split(\".\")[0]\n\n        self._user_file_name = file_name\n        self._file_path = \"\"\n        self._csv_path = \"\"\n\n    def set_file_level(self, level: LogLevel) -&gt; None:\n        \"\"\"\n        Set the log level for file output.\n\n        Args:\n            level: The log level for file output.\n\n        Examples:\n            &gt;&gt;&gt; LOGGER.set_file_level(LogLevel.INFO)\n            &gt;&gt;&gt; LOGGER.file_level\n            LogLevel.INFO\n            &gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be logged\")\n        \"\"\"\n        self._file_level = level\n        if hasattr(self, \"_file_handler\"):\n            self._file_handler.setLevel(level=level.value)\n\n    def set_stream_level(self, level: LogLevel) -&gt; None:\n        \"\"\"\n        Set the log level for console output.\n\n        Args:\n            level: The log level for console output.\n\n        Examples:\n            &gt;&gt;&gt; LOGGER.set_stream_level(LogLevel.INFO)\n            &gt;&gt;&gt; LOGGER.stream_level\n            LogLevel.INFO\n            &gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be streamed\")\n        \"\"\"\n        self._stream_level = level\n        self._stream_handler.setLevel(level=level.value)\n\n    def set_format(self, log_format: str) -&gt; None:\n        \"\"\"\n        Set the log message format. The format string uses the same syntax as the built-in Python logging module.\n\n        Args:\n            log_format: The log message format.\n\n        Examples:\n            &gt;&gt;&gt; LOGGER.set_format(\"[%(asctime)s] %(levelname)s: %(message)s\")\n            &gt;&gt;&gt; LOGGER.info(\"This is an info message\")\n            [2022-01-01 12:00:00] INFO: This is an info message\n        \"\"\"\n        self._log_format = log_format\n        self._std_formatter = logging.Formatter(log_format)\n        if hasattr(self, \"_file_handler\"):\n            self._file_handler.setFormatter(fmt=self._std_formatter)\n        self._stream_handler.setFormatter(fmt=self._std_formatter)\n\n    def set_buffer_size(self, buffer_size: int) -&gt; None:\n        \"\"\"\n        Set the maximum number of log entries to buffer before writing to the CSV file.\n\n        Args:\n            buffer_size: The maximum number of log entries to buffer.\n        \"\"\"\n        self._buffer_size = buffer_size\n        self._buffer = deque(self._buffer, maxlen=buffer_size)\n\n    def update(self) -&gt; None:\n        \"\"\"\n        Update the logger by logging the current values of tracked variables to the buffer.\n\n        Examples:\n            &gt;&gt;&gt; class MyClass:\n            ...     def __init__(self):\n            ...         self.value = 42\n            &gt;&gt;&gt; obj = MyClass()\n            &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n            &gt;&gt;&gt; LOGGER.update()\n        \"\"\"\n        if not self._tracked_vars:\n            return\n\n        data = []\n        for _var_id, get_value in self._tracked_vars.items():\n            value = get_value()\n            data.append(str(value))\n\n        self._buffer.append(data)\n\n        if len(self._buffer) &gt;= self._buffer_size:\n            self.flush_buffer()\n\n    def flush_buffer(self) -&gt; None:\n        \"\"\"\n        Write the buffered log entries to the CSV file.\n        \"\"\"\n        if not self._buffer:\n            return\n\n        self._ensure_file_handler()\n\n        if self._file is None:\n            self._file = open(self._csv_path, \"w\", newline=\"\")\n            self._writer = csv.writer(self._file)\n\n        if not self._header_written:\n            self._write_header()\n\n        self._writer.writerows(self._buffer)\n        self._buffer.clear()\n        self._file.flush()\n\n    def _write_header(self) -&gt; None:\n        header = list(self._var_names.values())\n\n        self._writer.writerow(header)  # type: ignore[assignment]\n        self._header_written = True\n\n    def _generate_file_paths(self) -&gt; None:\n        now = datetime.now()\n        timestamp = now.strftime(\"%Y%m%d_%H%M%S\")\n        script_name = os.path.basename(__file__).split(\".\")[0]\n\n        base_name = self._user_file_name if self._user_file_name else f\"{script_name}_{timestamp}\"\n\n        file_path = os.path.join(self._log_path, base_name)\n        self._file_path = file_path + \".log\"\n        self._csv_path = file_path + \".csv\"\n\n    def __enter__(self) -&gt; \"Logger\":\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb) -&gt; None:\n        self.close()\n\n    def reset(self) -&gt; None:\n        \"\"\"\n        Reset the logger state.\n        \"\"\"\n        self._buffer.clear()\n        self._tracked_vars.clear()\n        self._var_names.clear()\n        self._header_written = False\n        if hasattr(self, \"_file_handler\"):\n            self._file_handler.close()\n            del self._file_handler\n\n    def close(self) -&gt; None:\n        \"\"\"\n        Close the logger and flush any remaining log entries.\n\n        Examples:\n            &gt;&gt;&gt; LOGGER.close()\n            &gt;&gt;&gt; LOGGER.info(\"This message will not be logged\")\n        \"\"\"\n        self.flush_buffer()\n        if self._file:\n            self._file.close()\n            self._file = None\n            self._writer = None\n\n    def debug(self, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().debug(msg, *args, **kwargs)\n\n    def info(self, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().info(msg, *args, **kwargs)\n\n    def warning(self, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().warning(msg, *args, **kwargs)\n\n    def error(self, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().error(msg, *args, **kwargs)\n\n    def critical(self, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().critical(msg, *args, **kwargs)\n\n    def log(self, level, msg, *args, **kwargs):\n        self._ensure_file_handler()\n        super().log(level, msg, *args, **kwargs)\n\n    @property\n    def file_path(self) -&gt; str:\n        \"\"\"\n        Get the path to the log file.\n        \"\"\"\n        if self._file_path == \"\":\n            self._generate_file_paths()\n        return self._file_path\n\n    @property\n    def buffer_size(self) -&gt; int:\n        \"\"\"\n        Get the maximum number of log entries to buffer before writing to the CSV file.\n        \"\"\"\n        return self._buffer_size\n\n    @property\n    def file_level(self) -&gt; LogLevel:\n        \"\"\"\n        Get the log level for file output (.log).\n        \"\"\"\n        return self._file_level\n\n    @property\n    def stream_level(self) -&gt; LogLevel:\n        \"\"\"\n        Get the log level for console output.\n        \"\"\"\n        return self._stream_level\n\n    @property\n    def file_max_bytes(self) -&gt; int:\n        \"\"\"\n        Get the maximum size of the log file in bytes before rotation.\n        \"\"\"\n        return self._file_max_bytes\n\n    @property\n    def file_backup_count(self) -&gt; int:\n        \"\"\"\n        Get the number of backup log files to keep.\n        \"\"\"\n        return self._file_backup_count\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.buffer_size","title":"<code>buffer_size: int</code>  <code>property</code>","text":"<p>Get the maximum number of log entries to buffer before writing to the CSV file.</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.file_backup_count","title":"<code>file_backup_count: int</code>  <code>property</code>","text":"<p>Get the number of backup log files to keep.</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.file_level","title":"<code>file_level: LogLevel</code>  <code>property</code>","text":"<p>Get the log level for file output (.log).</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.file_max_bytes","title":"<code>file_max_bytes: int</code>  <code>property</code>","text":"<p>Get the maximum size of the log file in bytes before rotation.</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.file_path","title":"<code>file_path: str</code>  <code>property</code>","text":"<p>Get the path to the log file.</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.stream_level","title":"<code>stream_level: LogLevel</code>  <code>property</code>","text":"<p>Get the log level for console output.</p>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.__init__","title":"<code>__init__(log_path='./', log_format='[%(asctime)s] %(levelname)s: %(message)s', file_level=LogLevel.DEBUG, stream_level=LogLevel.INFO, file_max_bytes=0, file_backup_count=5, file_name=None, buffer_size=1000)</code>","text":"<p>Initialize the custom logger with the specified configuration.</p> <p>Parameters:</p> Name Type Description Default <code>log_path</code> <code>str</code> <p>The path to save log files.</p> <code>'./'</code> <code>log_format</code> <code>str</code> <p>The log message format.</p> <code>'[%(asctime)s] %(levelname)s: %(message)s'</code> <code>file_level</code> <code>LogLevel</code> <p>The log level for file output.</p> <code>DEBUG</code> <code>stream_level</code> <code>LogLevel</code> <p>The log level for console output.</p> <code>INFO</code> <code>file_max_bytes</code> <code>int</code> <p>The maximum size of the log file in bytes before rotation.</p> <code>0</code> <code>file_backup_count</code> <code>int</code> <p>The number of backup log files to keep.</p> <code>5</code> <code>file_name</code> <code>Union[str, None]</code> <p>The base name for the log file.</p> <code>None</code> <code>buffer_size</code> <code>int</code> <p>The maximum number of log entries to buffer before writing to the CSV file.</p> <code>1000</code> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def __init__(\n    self,\n    log_path: str = \"./\",\n    log_format: str = \"[%(asctime)s] %(levelname)s: %(message)s\",\n    file_level: LogLevel = LogLevel.DEBUG,\n    stream_level: LogLevel = LogLevel.INFO,\n    file_max_bytes: int = 0,\n    file_backup_count: int = 5,\n    file_name: Union[str, None] = None,\n    buffer_size: int = 1000,\n) -&gt; None:\n    \"\"\"\n    Initialize the custom logger with the specified configuration.\n\n    Args:\n        log_path: The path to save log files.\n        log_format: The log message format.\n        file_level: The log level for file output.\n        stream_level: The log level for console output.\n        file_max_bytes: The maximum size of the log file in bytes before rotation.\n        file_backup_count: The number of backup log files to keep.\n        file_name: The base name for the log file.\n        buffer_size: The maximum number of log entries to buffer before writing to the CSV file.\n    \"\"\"\n    if not hasattr(self, \"_initialized\"):\n        super().__init__(__name__)\n        self._log_path = log_path\n        self._log_format = log_format\n        self._file_level = file_level\n        self._stream_level = stream_level\n        self._file_max_bytes = file_max_bytes\n        self._file_backup_count = file_backup_count\n        self._user_file_name = file_name\n\n        self._file_path: str = \"\"\n        self._csv_path: str = \"\"\n        self._file: Optional[Any] = None\n        self._writer = None\n        self._is_logging = False\n        self._header_written = False\n\n        self._tracked_vars: dict[int, Callable[[], Any]] = {}\n        self._var_names: dict[int, str] = {}\n        self._buffer: deque[list[str]] = deque(maxlen=buffer_size)\n        self._buffer_size: int = buffer_size\n\n        self._setup_logging()\n        self._initialized: bool = True\n    else:\n        self.set_file_name(file_name)\n        self.set_file_level(file_level)\n        self.set_stream_level(stream_level)\n        self.set_format(log_format)\n        self._file_max_bytes = file_max_bytes\n        self._file_backup_count = file_backup_count\n        self.set_buffer_size(buffer_size)\n\n        self._log_path = log_path\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.close","title":"<code>close()</code>","text":"<p>Close the logger and flush any remaining log entries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOGGER.close()\n&gt;&gt;&gt; LOGGER.info(\"This message will not be logged\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close the logger and flush any remaining log entries.\n\n    Examples:\n        &gt;&gt;&gt; LOGGER.close()\n        &gt;&gt;&gt; LOGGER.info(\"This message will not be logged\")\n    \"\"\"\n    self.flush_buffer()\n    if self._file:\n        self._file.close()\n        self._file = None\n        self._writer = None\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.flush_buffer","title":"<code>flush_buffer()</code>","text":"<p>Write the buffered log entries to the CSV file.</p> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def flush_buffer(self) -&gt; None:\n    \"\"\"\n    Write the buffered log entries to the CSV file.\n    \"\"\"\n    if not self._buffer:\n        return\n\n    self._ensure_file_handler()\n\n    if self._file is None:\n        self._file = open(self._csv_path, \"w\", newline=\"\")\n        self._writer = csv.writer(self._file)\n\n    if not self._header_written:\n        self._write_header()\n\n    self._writer.writerows(self._buffer)\n    self._buffer.clear()\n    self._file.flush()\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.reset","title":"<code>reset()</code>","text":"<p>Reset the logger state.</p> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def reset(self) -&gt; None:\n    \"\"\"\n    Reset the logger state.\n    \"\"\"\n    self._buffer.clear()\n    self._tracked_vars.clear()\n    self._var_names.clear()\n    self._header_written = False\n    if hasattr(self, \"_file_handler\"):\n        self._file_handler.close()\n        del self._file_handler\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.set_buffer_size","title":"<code>set_buffer_size(buffer_size)</code>","text":"<p>Set the maximum number of log entries to buffer before writing to the CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>buffer_size</code> <code>int</code> <p>The maximum number of log entries to buffer.</p> required Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def set_buffer_size(self, buffer_size: int) -&gt; None:\n    \"\"\"\n    Set the maximum number of log entries to buffer before writing to the CSV file.\n\n    Args:\n        buffer_size: The maximum number of log entries to buffer.\n    \"\"\"\n    self._buffer_size = buffer_size\n    self._buffer = deque(self._buffer, maxlen=buffer_size)\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.set_file_level","title":"<code>set_file_level(level)</code>","text":"<p>Set the log level for file output.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>LogLevel</code> <p>The log level for file output.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOGGER.set_file_level(LogLevel.INFO)\n&gt;&gt;&gt; LOGGER.file_level\nLogLevel.INFO\n&gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be logged\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def set_file_level(self, level: LogLevel) -&gt; None:\n    \"\"\"\n    Set the log level for file output.\n\n    Args:\n        level: The log level for file output.\n\n    Examples:\n        &gt;&gt;&gt; LOGGER.set_file_level(LogLevel.INFO)\n        &gt;&gt;&gt; LOGGER.file_level\n        LogLevel.INFO\n        &gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be logged\")\n    \"\"\"\n    self._file_level = level\n    if hasattr(self, \"_file_handler\"):\n        self._file_handler.setLevel(level=level.value)\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.set_file_name","title":"<code>set_file_name(file_name)</code>","text":"<p>Set the base name for the log file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>Union[str, None]</code> <p>The base name for the log file.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOGGER.set_file_name(\"my_log_file\")\n&gt;&gt;&gt; LOGGER.file_path\n\"./my_log_file.log\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def set_file_name(self, file_name: Union[str, None]) -&gt; None:\n    \"\"\"\n    Set the base name for the log file.\n\n    Args:\n        file_name: The base name for the log file.\n\n    Examples:\n        &gt;&gt;&gt; LOGGER.set_file_name(\"my_log_file\")\n        &gt;&gt;&gt; LOGGER.file_path\n        \"./my_log_file.log\"\n    \"\"\"\n    # if filename has an extension, remove it\n    if file_name is not None and \".\" in file_name:\n        file_name = file_name.split(\".\")[0]\n\n    self._user_file_name = file_name\n    self._file_path = \"\"\n    self._csv_path = \"\"\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.set_format","title":"<code>set_format(log_format)</code>","text":"<p>Set the log message format. The format string uses the same syntax as the built-in Python logging module.</p> <p>Parameters:</p> Name Type Description Default <code>log_format</code> <code>str</code> <p>The log message format.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOGGER.set_format(\"[%(asctime)s] %(levelname)s: %(message)s\")\n&gt;&gt;&gt; LOGGER.info(\"This is an info message\")\n[2022-01-01 12:00:00] INFO: This is an info message\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def set_format(self, log_format: str) -&gt; None:\n    \"\"\"\n    Set the log message format. The format string uses the same syntax as the built-in Python logging module.\n\n    Args:\n        log_format: The log message format.\n\n    Examples:\n        &gt;&gt;&gt; LOGGER.set_format(\"[%(asctime)s] %(levelname)s: %(message)s\")\n        &gt;&gt;&gt; LOGGER.info(\"This is an info message\")\n        [2022-01-01 12:00:00] INFO: This is an info message\n    \"\"\"\n    self._log_format = log_format\n    self._std_formatter = logging.Formatter(log_format)\n    if hasattr(self, \"_file_handler\"):\n        self._file_handler.setFormatter(fmt=self._std_formatter)\n    self._stream_handler.setFormatter(fmt=self._std_formatter)\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.set_stream_level","title":"<code>set_stream_level(level)</code>","text":"<p>Set the log level for console output.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>LogLevel</code> <p>The log level for console output.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOGGER.set_stream_level(LogLevel.INFO)\n&gt;&gt;&gt; LOGGER.stream_level\nLogLevel.INFO\n&gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be streamed\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def set_stream_level(self, level: LogLevel) -&gt; None:\n    \"\"\"\n    Set the log level for console output.\n\n    Args:\n        level: The log level for console output.\n\n    Examples:\n        &gt;&gt;&gt; LOGGER.set_stream_level(LogLevel.INFO)\n        &gt;&gt;&gt; LOGGER.stream_level\n        LogLevel.INFO\n        &gt;&gt;&gt; LOGGER.debug(\"This is a debug message and will not be streamed\")\n    \"\"\"\n    self._stream_level = level\n    self._stream_handler.setLevel(level=level.value)\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.track_variable","title":"<code>track_variable(var_func, name)</code>","text":"<p>Record the value of a variable and log it to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>var_func</code> <code>Callable[[], Any]</code> <p>A function that returns the value of the variable.</p> required <code>name</code> <code>str</code> <p>The name of the variable.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; class MyClass:\n...     def __init__(self):\n...         self.value = 42\n&gt;&gt;&gt; obj = MyClass()\n&gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n&gt;&gt;&gt; LOGGER.update()\n&gt;&gt;&gt; LOGGER.flush_buffer()\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def track_variable(self, var_func: Callable[[], Any], name: str) -&gt; None:\n    \"\"\"\n    Record the value of a variable and log it to a CSV file.\n\n    Args:\n        var_func: A function that returns the value of the variable.\n        name: The name of the variable.\n\n    Examples:\n        &gt;&gt;&gt; class MyClass:\n        ...     def __init__(self):\n        ...         self.value = 42\n        &gt;&gt;&gt; obj = MyClass()\n        &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n        &gt;&gt;&gt; LOGGER.update()\n        &gt;&gt;&gt; LOGGER.flush_buffer()\n    \"\"\"\n\n    var_id = id(var_func)\n    self._tracked_vars[var_id] = var_func\n    self._var_names[var_id] = name\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.untrack_variable","title":"<code>untrack_variable(var_func)</code>","text":"<p>Stop tracking a variable and remove it from the logger buffer.</p> <p>Parameters:</p> Name Type Description Default <code>var_func</code> <code>Callable[[], Any]</code> <p>The function used to track the variable.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; class MyClass:\n...     def __init__(self):\n...         self.value = 42\n&gt;&gt;&gt; obj = MyClass()\n&gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n&gt;&gt;&gt; LOGGER.update()\n&gt;&gt;&gt; LOGGER.flush_buffer()\n&gt;&gt;&gt; LOGGER.untrack_variable(lambda: obj.value)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def untrack_variable(self, var_func: Callable[[], Any]) -&gt; None:\n    \"\"\"\n    Stop tracking a variable and remove it from the logger buffer.\n\n    Args:\n        var_func: The function used to track the variable.\n\n    Examples:\n        &gt;&gt;&gt; class MyClass:\n        ...     def __init__(self):\n        ...         self.value = 42\n        &gt;&gt;&gt; obj = MyClass()\n        &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n        &gt;&gt;&gt; LOGGER.update()\n        &gt;&gt;&gt; LOGGER.flush_buffer()\n        &gt;&gt;&gt; LOGGER.untrack_variable(lambda: obj.value)\n    \"\"\"\n    var_id = id(var_func)\n    self._tracked_vars.pop(var_id, None)\n    self._var_names.pop(var_id, None)\n</code></pre>"},{"location":"api/log/#onshape_robotics_toolkit.log.Logger.update","title":"<code>update()</code>","text":"<p>Update the logger by logging the current values of tracked variables to the buffer.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; class MyClass:\n...     def __init__(self):\n...         self.value = 42\n&gt;&gt;&gt; obj = MyClass()\n&gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n&gt;&gt;&gt; LOGGER.update()\n</code></pre> Source code in <code>onshape_robotics_toolkit\\log.py</code> <pre><code>def update(self) -&gt; None:\n    \"\"\"\n    Update the logger by logging the current values of tracked variables to the buffer.\n\n    Examples:\n        &gt;&gt;&gt; class MyClass:\n        ...     def __init__(self):\n        ...         self.value = 42\n        &gt;&gt;&gt; obj = MyClass()\n        &gt;&gt;&gt; LOGGER.track_variable(lambda: obj.value, \"answer\")\n        &gt;&gt;&gt; LOGGER.update()\n    \"\"\"\n    if not self._tracked_vars:\n        return\n\n    data = []\n    for _var_id, get_value in self._tracked_vars.items():\n        value = get_value()\n        data.append(str(value))\n\n    self._buffer.append(data)\n\n    if len(self._buffer) &gt;= self._buffer_size:\n        self.flush_buffer()\n</code></pre>"},{"location":"api/mass/","title":"Mass","text":"<p>This module defines data model for mass properties retrieved from Onshape REST API responses.</p> <p>The data models are implemented as Pydantic BaseModel classes, which are used to</p> <pre><code>1. Parse JSON responses from the API into Python objects.\n2. Validate the structure and types of the JSON responses.\n3. Provide type hints for better code clarity and autocompletion.\n</code></pre> <p>These models ensure that the data received from the API adheres to the expected format and types, facilitating easier and safer manipulation of the data within the application.</p> Models <ul> <li>PrincipalAxis: Represents the principal axis of a part or an entity.</li> <li>MassProperties: Represents the mass properties of a part or an entity.</li> </ul>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties","title":"<code>MassProperties</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the mass properties of a part or an entity.</p> JSON <pre><code>    {\n        \"volume\" : [ 0.003411385108378978, 0.003410724395374695, 0.0034120458213832646 ],\n        \"periphery\" : [ 0.3551154530453107, 0.35506836484837767, 0.3551625412422433 ],\n        \"centroid\" : [ -2.07609188073475E-9, ... ],\n        \"inertia\" : [ 0.0994460593470721, ... ],\n        \"mass\" : [ 9.585992154544929, 9.584199206938452, 9.587785102151415 ],\n        \"hasMass\" : true,\n        \"massMissingCount\" : 0,\n        \"principalInertia\" : [ 0.09944605933465941, 0.09944605954654827, 0.19238058837442526 ],\n        \"principalAxes\" : [\n            {\n            \"x\" : -0.9702683926946019,\n            \"y\" : -5.514078101148926E-9,\n            \"z\" : -0.2420314982349062\n            }, {\n            \"x\" : -0.2420314982349062,\n            \"y\" : -5.44073563520025E-10,\n            \"z\" : 0.9702683926946021\n            }, {\n            \"x\" : 5.481818620570986E-9,\n            \"y\" : -0.9999999999999999,\n            \"z\" : 8.066832175421143E-10\n            }\n        ]\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>volume</code> <code>list[float]</code> <p>The volume of the part.</p> <code>mass</code> <code>list[float]</code> <p>The mass of the part</p> <code>centroid</code> <code>list[float]</code> <p>The centroid of the part.</p> <code>inertia</code> <code>list[float]</code> <p>The inertia of the part.</p> <code>principalInertia</code> <code>list[float, float, float]</code> <p>The principal inertia of the part.</p> <code>principalAxes</code> <code>list[PrincipalAxis]</code> <p>The principal axes of the part.</p> Properties <p>principal_inertia: The principal inertia as a numpy array. center_of_mass: The center of mass as a tuple of three floats. inertia_matrix: The inertia matrix as a 3x3 numpy matrix. principal_axes: The principal axes as a 3x3 numpy matrix.</p> <p>Methods:</p> Name Description <code>principal_axes_wrt</code> <p>Returns the principal axes with respect to a given reference frame.</p> <code>inertia_wrt</code> <p>Returns the inertia matrix with respect to a given reference frame.</p> <code>center_of_mass_wrt</code> <p>Returns the center of mass with respect to a given reference frame.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties = MassProperties(\n...     volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n...     mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n...     centroid=[...],\n...     inertia=[...],\n...     principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n...     principalAxes=[...]\n... )\n&gt;&gt;&gt; mass_properties.principal_inertia\narray([0.09944606, 0.09944606, 0.19238059])\n</code></pre> <pre><code>&gt;&gt;&gt; mass_properties.center_of_mass_wrt(np.eye(4))\narray([0., 0., 0.])\n</code></pre> <pre><code>&gt;&gt;&gt; mass_properties.principal_axes_wrt(np.eye(3))\narray([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>class MassProperties(BaseModel):\n    \"\"\"\n    Represents the mass properties of a part or an entity.\n\n    JSON:\n        ```json\n            {\n                \"volume\" : [ 0.003411385108378978, 0.003410724395374695, 0.0034120458213832646 ],\n                \"periphery\" : [ 0.3551154530453107, 0.35506836484837767, 0.3551625412422433 ],\n                \"centroid\" : [ -2.07609188073475E-9, ... ],\n                \"inertia\" : [ 0.0994460593470721, ... ],\n                \"mass\" : [ 9.585992154544929, 9.584199206938452, 9.587785102151415 ],\n                \"hasMass\" : true,\n                \"massMissingCount\" : 0,\n                \"principalInertia\" : [ 0.09944605933465941, 0.09944605954654827, 0.19238058837442526 ],\n                \"principalAxes\" : [\n                    {\n                    \"x\" : -0.9702683926946019,\n                    \"y\" : -5.514078101148926E-9,\n                    \"z\" : -0.2420314982349062\n                    }, {\n                    \"x\" : -0.2420314982349062,\n                    \"y\" : -5.44073563520025E-10,\n                    \"z\" : 0.9702683926946021\n                    }, {\n                    \"x\" : 5.481818620570986E-9,\n                    \"y\" : -0.9999999999999999,\n                    \"z\" : 8.066832175421143E-10\n                    }\n                ]\n            }\n        ```\n\n    Attributes:\n        volume (list[float]): The volume of the part.\n        mass (list[float]): The mass of the part\n        centroid (list[float]): The centroid of the part.\n        inertia (list[float]): The inertia of the part.\n        principalInertia (list[float, float, float]): The principal inertia of the part.\n        principalAxes (list[PrincipalAxis]): The principal axes of the part.\n\n    Properties:\n        principal_inertia: The principal inertia as a numpy array.\n        center_of_mass: The center of mass as a tuple of three floats.\n        inertia_matrix: The inertia matrix as a 3x3 numpy matrix.\n        principal_axes: The principal axes as a 3x3 numpy matrix.\n\n    Methods:\n        principal_axes_wrt: Returns the principal axes with respect to a given reference frame.\n        inertia_wrt: Returns the inertia matrix with respect to a given reference frame.\n        center_of_mass_wrt: Returns the center of mass with respect to a given reference frame.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties = MassProperties(\n        ...     volume=[0.003411385108378978, 0.003410724395374695, 0.0034120458213832646],\n        ...     mass=[9.585992154544929, 9.584199206938452, 9.587785102151415],\n        ...     centroid=[...],\n        ...     inertia=[...],\n        ...     principalInertia=[0.09944605933465941, 0.09944605954654827, 0.19238058837442526],\n        ...     principalAxes=[...]\n        ... )\n        &gt;&gt;&gt; mass_properties.principal_inertia\n        array([0.09944606, 0.09944606, 0.19238059])\n\n        &gt;&gt;&gt; mass_properties.center_of_mass_wrt(np.eye(4))\n        array([0., 0., 0.])\n\n        &gt;&gt;&gt; mass_properties.principal_axes_wrt(np.eye(3))\n        array([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n    \"\"\"\n\n    volume: list[float] = Field(..., description=\"The volume of the part.\")\n    mass: list[float] = Field(..., description=\"The mass of the part.\")\n    centroid: list[float] = Field(..., description=\"The centroid of the part.\")\n    inertia: list[float] = Field(..., description=\"The inertia of the part.\")\n    principalInertia: list[float, float, float] = Field(..., description=\"The principal inertia of the part.\")\n    principalAxes: list[PrincipalAxis] = Field(..., description=\"The principal axes of the part.\")\n\n    @field_validator(\"principalAxes\")\n    def check_principal_axes(cls, v: list[PrincipalAxis]) -&gt; list[PrincipalAxis]:\n        \"\"\"\n        Validate the principal axes to ensure they have 3 elements.\n\n        Args:\n            v: The principal axes to validate.\n\n        Returns:\n            The validated principal axes.\n\n        Raises:\n            ValueError: If the principal axes do not have 3 elements.\n        \"\"\"\n        if len(v) != 3:\n            raise ValueError(\"Principal axes must have 3 elements\")\n        return v\n\n    @property\n    def principal_inertia(self) -&gt; np.ndarray:\n        \"\"\"\n        Returns the principal inertia as a numpy array.\n\n        Returns:\n            The principal inertia.\n        \"\"\"\n        return np.array(self.principalInertia)\n\n    @property\n    def center_of_mass(self) -&gt; tuple[float, float, float]:\n        \"\"\"\n        Returns the center of mass as a tuple of three floats.\n\n        Returns:\n            The center of mass.\n        \"\"\"\n        return (self.centroid[0], self.centroid[1], self.centroid[2])\n\n    @property\n    def inertia_matrix(self) -&gt; np.matrix:\n        \"\"\"\n        Returns the inertia matrix as a 3x3 numpy matrix.\n\n        Returns:\n            The inertia matrix.\n        \"\"\"\n        return np.matrix(np.array(self.inertia[:9]).reshape(3, 3))\n\n    @property\n    def principal_axes(self) -&gt; np.matrix:\n        \"\"\"\n        Returns the principal axes as a 3x3 numpy matrix.\n\n        Returns:\n            The principal axes.\n        \"\"\"\n        return np.matrix(np.array([axis.values for axis in self.principalAxes]))\n\n    def principal_axes_wrt(self, reference: np.matrix) -&gt; np.matrix:\n        \"\"\"\n        Returns the principal axes with respect to a given reference frame.\n\n        Args:\n            reference: The reference frame as a 3x3 matrix.\n\n        Returns:\n            The principal axes with respect to the reference frame.\n\n        Raises:\n            ValueError: If the reference frame is not a 3x3 matrix.\n\n        Examples:\n            &gt;&gt;&gt; mass_properties.principal_axes_wrt(np.eye(3))\n            array([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n        \"\"\"\n        if reference.shape != (3, 3):\n            raise ValueError(\"Reference frame must be a 3x3 matrix\")\n\n        return reference @ self.principal_axes\n\n    def inertia_wrt(self, reference: np.matrix) -&gt; np.matrix:\n        \"\"\"\n        Returns the inertia matrix with respect to a given reference frame.\n\n        Args:\n            reference: The reference frame as a 3x3 matrix.\n\n        Returns:\n            The inertia matrix with respect to the reference frame.\n\n        Raises:\n            ValueError: If the reference frame is not a 3x3 matrix.\n\n        Examples:\n            &gt;&gt;&gt; mass_properties.inertia_wrt(np.eye(3))\n            array([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n        \"\"\"\n        if reference.shape != (3, 3):\n            raise ValueError(\"Reference frame must be a 3x3 matrix\")\n\n        return reference @ self.inertia_matrix @ reference.T\n\n    def center_of_mass_wrt(self, reference: np.matrix) -&gt; np.ndarray:\n        \"\"\"\n        Returns the center of mass with respect to a given reference frame.\n\n        Args:\n            reference: The reference frame as a 4x4 matrix.\n\n        Returns:\n            The center of mass with respect to the reference frame.\n\n        Raises:\n            ValueError: If the reference frame is not a 4x4 matrix.\n\n        Examples:\n            &gt;&gt;&gt; mass_properties.center_of_mass_wrt(np.eye(4))\n            array([0., 0., 0.])\n        \"\"\"\n        if reference.shape != (4, 4):\n            raise ValueError(\"Reference frame must be a 4x4 matrix\")\n\n        com = np.matrix([*list(self.center_of_mass), 1.0])\n        com_wrt = (reference * com.T)[:3]\n        return np.array([com_wrt[0, 0], com_wrt[1, 0], com_wrt[2, 0]])\n</code></pre>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.center_of_mass","title":"<code>center_of_mass: tuple[float, float, float]</code>  <code>property</code>","text":"<p>Returns the center of mass as a tuple of three floats.</p> <p>Returns:</p> Type Description <code>tuple[float, float, float]</code> <p>The center of mass.</p>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.inertia_matrix","title":"<code>inertia_matrix: np.matrix</code>  <code>property</code>","text":"<p>Returns the inertia matrix as a 3x3 numpy matrix.</p> <p>Returns:</p> Type Description <code>matrix</code> <p>The inertia matrix.</p>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.principal_axes","title":"<code>principal_axes: np.matrix</code>  <code>property</code>","text":"<p>Returns the principal axes as a 3x3 numpy matrix.</p> <p>Returns:</p> Type Description <code>matrix</code> <p>The principal axes.</p>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.principal_inertia","title":"<code>principal_inertia: np.ndarray</code>  <code>property</code>","text":"<p>Returns the principal inertia as a numpy array.</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>The principal inertia.</p>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.center_of_mass_wrt","title":"<code>center_of_mass_wrt(reference)</code>","text":"<p>Returns the center of mass with respect to a given reference frame.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>matrix</code> <p>The reference frame as a 4x4 matrix.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The center of mass with respect to the reference frame.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the reference frame is not a 4x4 matrix.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties.center_of_mass_wrt(np.eye(4))\narray([0., 0., 0.])\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>def center_of_mass_wrt(self, reference: np.matrix) -&gt; np.ndarray:\n    \"\"\"\n    Returns the center of mass with respect to a given reference frame.\n\n    Args:\n        reference: The reference frame as a 4x4 matrix.\n\n    Returns:\n        The center of mass with respect to the reference frame.\n\n    Raises:\n        ValueError: If the reference frame is not a 4x4 matrix.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties.center_of_mass_wrt(np.eye(4))\n        array([0., 0., 0.])\n    \"\"\"\n    if reference.shape != (4, 4):\n        raise ValueError(\"Reference frame must be a 4x4 matrix\")\n\n    com = np.matrix([*list(self.center_of_mass), 1.0])\n    com_wrt = (reference * com.T)[:3]\n    return np.array([com_wrt[0, 0], com_wrt[1, 0], com_wrt[2, 0]])\n</code></pre>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.check_principal_axes","title":"<code>check_principal_axes(v)</code>","text":"<p>Validate the principal axes to ensure they have 3 elements.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>list[PrincipalAxis]</code> <p>The principal axes to validate.</p> required <p>Returns:</p> Type Description <code>list[PrincipalAxis]</code> <p>The validated principal axes.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the principal axes do not have 3 elements.</p> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>@field_validator(\"principalAxes\")\ndef check_principal_axes(cls, v: list[PrincipalAxis]) -&gt; list[PrincipalAxis]:\n    \"\"\"\n    Validate the principal axes to ensure they have 3 elements.\n\n    Args:\n        v: The principal axes to validate.\n\n    Returns:\n        The validated principal axes.\n\n    Raises:\n        ValueError: If the principal axes do not have 3 elements.\n    \"\"\"\n    if len(v) != 3:\n        raise ValueError(\"Principal axes must have 3 elements\")\n    return v\n</code></pre>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.inertia_wrt","title":"<code>inertia_wrt(reference)</code>","text":"<p>Returns the inertia matrix with respect to a given reference frame.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>matrix</code> <p>The reference frame as a 3x3 matrix.</p> required <p>Returns:</p> Type Description <code>matrix</code> <p>The inertia matrix with respect to the reference frame.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the reference frame is not a 3x3 matrix.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties.inertia_wrt(np.eye(3))\narray([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>def inertia_wrt(self, reference: np.matrix) -&gt; np.matrix:\n    \"\"\"\n    Returns the inertia matrix with respect to a given reference frame.\n\n    Args:\n        reference: The reference frame as a 3x3 matrix.\n\n    Returns:\n        The inertia matrix with respect to the reference frame.\n\n    Raises:\n        ValueError: If the reference frame is not a 3x3 matrix.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties.inertia_wrt(np.eye(3))\n        array([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n    \"\"\"\n    if reference.shape != (3, 3):\n        raise ValueError(\"Reference frame must be a 3x3 matrix\")\n\n    return reference @ self.inertia_matrix @ reference.T\n</code></pre>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.MassProperties.principal_axes_wrt","title":"<code>principal_axes_wrt(reference)</code>","text":"<p>Returns the principal axes with respect to a given reference frame.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>matrix</code> <p>The reference frame as a 3x3 matrix.</p> required <p>Returns:</p> Type Description <code>matrix</code> <p>The principal axes with respect to the reference frame.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the reference frame is not a 3x3 matrix.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mass_properties.principal_axes_wrt(np.eye(3))\narray([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>def principal_axes_wrt(self, reference: np.matrix) -&gt; np.matrix:\n    \"\"\"\n    Returns the principal axes with respect to a given reference frame.\n\n    Args:\n        reference: The reference frame as a 3x3 matrix.\n\n    Returns:\n        The principal axes with respect to the reference frame.\n\n    Raises:\n        ValueError: If the reference frame is not a 3x3 matrix.\n\n    Examples:\n        &gt;&gt;&gt; mass_properties.principal_axes_wrt(np.eye(3))\n        array([0.09944605933465941, 0.09944605954654827, 0.19238058837442526])\n    \"\"\"\n    if reference.shape != (3, 3):\n        raise ValueError(\"Reference frame must be a 3x3 matrix\")\n\n    return reference @ self.principal_axes\n</code></pre>"},{"location":"api/mass/#onshape_robotics_toolkit.models.mass.PrincipalAxis","title":"<code>PrincipalAxis</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the principal axis of a part or an entity.</p> JSON <pre><code>    {\n        \"x\" : 5.481818620570986E-9,\n        \"y\" : -0.9999999999999999,\n        \"z\" : 8.066832175421143E-10\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>x</code> <code>float</code> <p>The x-component of the principal axis.</p> <code>y</code> <code>float</code> <p>The y-component of the principal axis.</p> <code>z</code> <code>float</code> <p>The z-component of the principal axis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; axis = PrincipalAxis(x=0.0, y=0.0, z=1.0)\n&gt;&gt;&gt; axis.values\narray([0., 0., 1.])\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\mass.py</code> <pre><code>class PrincipalAxis(BaseModel):\n    \"\"\"\n    Represents the principal axis of a part or an entity.\n\n    JSON:\n        ```json\n            {\n                \"x\" : 5.481818620570986E-9,\n                \"y\" : -0.9999999999999999,\n                \"z\" : 8.066832175421143E-10\n            }\n        ```\n\n    Attributes:\n        x (float): The x-component of the principal axis.\n        y (float): The y-component of the principal axis.\n        z (float): The z-component of the principal axis.\n\n    Examples:\n        &gt;&gt;&gt; axis = PrincipalAxis(x=0.0, y=0.0, z=1.0)\n        &gt;&gt;&gt; axis.values\n        array([0., 0., 1.])\n\n    \"\"\"\n\n    x: float = Field(..., description=\"The x-component of the principal axis.\")\n    y: float = Field(..., description=\"The y-component of the principal axis.\")\n    z: float = Field(..., description=\"The z-component of the principal axis.\")\n\n    @property\n    def values(self) -&gt; np.ndarray:\n        return np.array([self.x, self.y, self.z])\n</code></pre>"},{"location":"api/mesh/","title":"Mesh","text":"<p>This module contains functions for transforming meshes and inertia matrices.</p>"},{"location":"api/mesh/#onshape_robotics_toolkit.mesh.transform_inertia_matrix","title":"<code>transform_inertia_matrix(inertia_matrix, rotation)</code>","text":"<p>Transform an inertia matrix</p> <p>Parameters:</p> Name Type Description Default <code>inertia_matrix</code> <code>matrix</code> <p>Inertia matrix to use for transformation</p> required <code>rotation</code> <code>matrix</code> <p>Rotation matrix to apply to the inertia matrix</p> required <p>Returns:</p> Type Description <code>matrix</code> <p>Transformed inertia matrix</p> Source code in <code>onshape_robotics_toolkit\\mesh.py</code> <pre><code>def transform_inertia_matrix(inertia_matrix: np.matrix, rotation: np.matrix) -&gt; np.matrix:\n    \"\"\"\n    Transform an inertia matrix\n\n    Args:\n        inertia_matrix: Inertia matrix to use for transformation\n        rotation: Rotation matrix to apply to the inertia matrix\n\n    Returns:\n        Transformed inertia matrix\n    \"\"\"\n\n    return rotation @ inertia_matrix @ rotation.T\n</code></pre>"},{"location":"api/mesh/#onshape_robotics_toolkit.mesh.transform_mesh","title":"<code>transform_mesh(mesh, transform)</code>","text":"<p>Apply a transformation matrix to an STL mesh.</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh</code> <p>STL mesh to use for transformation</p> required <code>transform</code> <code>ndarray</code> <p>Transformation matrix to apply to the mesh</p> required <p>Returns:</p> Type Description <code>Mesh</code> <p>Transformed STL mesh</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mesh = Mesh.from_file(\"mesh.stl\")\n&gt;&gt;&gt; transform = np.eye(4)\n&gt;&gt;&gt; transform_mesh(mesh, transform)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\mesh.py</code> <pre><code>def transform_mesh(mesh: Mesh, transform: np.ndarray) -&gt; Mesh:\n    \"\"\"\n    Apply a transformation matrix to an STL mesh.\n\n    Args:\n        mesh: STL mesh to use for transformation\n        transform: Transformation matrix to apply to the mesh\n\n    Returns:\n        Transformed STL mesh\n\n    Examples:\n        &gt;&gt;&gt; mesh = Mesh.from_file(\"mesh.stl\")\n        &gt;&gt;&gt; transform = np.eye(4)\n        &gt;&gt;&gt; transform_mesh(mesh, transform)\n    \"\"\"\n\n    _transform_vectors = partial(\n        transform_vectors, rotation=transform[:3, :3], translation=transform[0:3, 3:4].T.tolist()\n    )\n\n    mesh.v0 = _transform_vectors(mesh.v0)\n    mesh.v1 = _transform_vectors(mesh.v1)\n    mesh.v2 = _transform_vectors(mesh.v2)\n    mesh.normals = _transform_vectors(mesh.normals)\n\n    return mesh\n</code></pre>"},{"location":"api/mesh/#onshape_robotics_toolkit.mesh.transform_vectors","title":"<code>transform_vectors(vectors, rotation, translation)</code>","text":"<p>Apply a transformation matrix to a set of vectors.</p> <p>Parameters:</p> Name Type Description Default <code>vectors</code> <code>ndarray</code> <p>Array of vectors to use for transformation</p> required <code>rotation</code> <code>ndarray</code> <p>Rotation matrix to apply to the vectors</p> required <code>translation</code> <code>ndarray</code> <p>Translation matrix to apply to the vectors</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Array of transformed vectors</p> Source code in <code>onshape_robotics_toolkit\\mesh.py</code> <pre><code>def transform_vectors(vectors: np.ndarray, rotation: np.ndarray, translation: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    Apply a transformation matrix to a set of vectors.\n\n    Args:\n        vectors: Array of vectors to use for transformation\n        rotation: Rotation matrix to apply to the vectors\n        translation: Translation matrix to apply to the vectors\n\n    Returns:\n        Array of transformed vectors\n    \"\"\"\n\n    return np.dot(vectors, rotation.T) + translation * len(vectors)\n</code></pre>"},{"location":"api/parse/","title":"Parse","text":"<p>This module contains functions that provide a way to traverse the assembly structure, extract information about parts, subassemblies, instances, and mates, and generate a hierarchical representation of the assembly.</p>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.build_rigid_subassembly_occurrence_map","title":"<code>build_rigid_subassembly_occurrence_map(rigid_subassemblies, id_to_name_map, parts)</code>  <code>async</code>","text":"<p>Asynchronously build a map of rigid subassembly occurrences.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def build_rigid_subassembly_occurrence_map(\n    rigid_subassemblies: dict[str, RootAssembly], id_to_name_map: dict[str, str], parts: dict[str, Part]\n) -&gt; dict[str, dict[str, Occurrence]]:\n    \"\"\"\n    Asynchronously build a map of rigid subassembly occurrences.\n    \"\"\"\n    occurrence_map: dict[str, dict[str, Occurrence]] = {}\n    for assembly_key, rigid_subassembly in rigid_subassemblies.items():\n        sub_occurrences: dict[str, Occurrence] = {}\n        for occurrence in rigid_subassembly.occurrences:\n            try:\n                occurrence_path = [id_to_name_map[path] for path in occurrence.path]\n                sub_occurrences[SUBASSEMBLY_JOINER.join(occurrence_path)] = occurrence\n            except KeyError:\n                LOGGER.warning(f\"Occurrence path {occurrence.path} not found\")\n\n        # Populate parts data\n        parts[assembly_key] = Part(\n            isStandardContent=False,\n            fullConfiguration=rigid_subassembly.fullConfiguration,\n            configuration=rigid_subassembly.configuration,\n            documentId=rigid_subassembly.documentId,\n            elementId=rigid_subassembly.elementId,\n            documentMicroversion=rigid_subassembly.documentMicroversion,\n            documentVersion=\"\",\n            partId=\"\",\n            bodyType=\"\",\n            MassProperty=rigid_subassembly.MassProperty,\n            isRigidAssembly=True,\n            rigidAssemblyWorkspaceId=rigid_subassembly.documentMetaData.defaultWorkspace.id,\n            rigidAssemblyToPartTF={},\n        )\n        occurrence_map[assembly_key] = sub_occurrences\n\n    return occurrence_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.fetch_rigid_subassemblies_async","title":"<code>fetch_rigid_subassemblies_async(subassembly, key, client, rigid_subassembly_map)</code>  <code>async</code>","text":"<p>Fetch rigid subassemblies asynchronously.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def fetch_rigid_subassemblies_async(\n    subassembly: SubAssembly, key: str, client: Client, rigid_subassembly_map: dict[str, RootAssembly]\n):\n    \"\"\"\n    Fetch rigid subassemblies asynchronously.\n    \"\"\"\n    try:\n        rigid_subassembly_map[key] = await asyncio.to_thread(\n            client.get_root_assembly,\n            did=subassembly.documentId,\n            wtype=WorkspaceType.M.value,\n            wid=subassembly.documentMicroversion,\n            eid=subassembly.elementId,\n            with_mass_properties=True,\n            log_response=False,\n        )\n    except Exception as e:\n        LOGGER.error(f\"Failed to fetch rigid subassembly for {key}: {e}\")\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_instances","title":"<code>get_instances(assembly, max_depth=0)</code>","text":"<p>Optimized synchronous wrapper for <code>get_instances</code>.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_instances(\n    assembly: Assembly, max_depth: int = 0\n) -&gt; tuple[dict[str, Union[PartInstance, AssemblyInstance]], dict[str, Occurrence], dict[str, str]]:\n    \"\"\"\n    Optimized synchronous wrapper for `get_instances`.\n    \"\"\"\n    instance_map: dict[str, Union[PartInstance, AssemblyInstance]] = {}\n    id_to_name_map: dict[str, str] = {}\n    asyncio.run(\n        traverse_instances_async(\n            assembly.rootAssembly,\n            \"\",\n            0,\n            max_depth,\n            assembly,\n            id_to_name_map,\n            instance_map,\n        )\n    )\n    occurrence_map = get_occurrences(assembly, id_to_name_map, max_depth)\n    return instance_map, occurrence_map, id_to_name_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_instances_sync","title":"<code>get_instances_sync(assembly, max_depth=0)</code>","text":"<p>Get instances and their sanitized names from an Onshape assembly.</p> <p>Parameters:</p> Name Type Description Default <code>assembly</code> <code>Assembly</code> <p>The Onshape assembly object to use for extracting instances.</p> required <code>max_depth</code> <code>int</code> <p>Maximum depth to traverse in the assembly hierarchy. Default is 5</p> <code>0</code> <p>Returns:</p> Type Description <code>dict[str, Union[PartInstance, AssemblyInstance]]</code> <p>A tuple containing:</p> <code>dict[str, Occurrence]</code> <ul> <li>A dictionary mapping instance IDs to their corresponding instances.</li> </ul> <code>dict[str, str]</code> <ul> <li>A dictionary mapping instance IDs to their sanitized names.</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assembly = Assembly(...)\n&gt;&gt;&gt; get_instances(assembly, max_depth=2)\n(\n    {\n        \"part1\": PartInstance(...),\n        \"subassembly1\": AssemblyInstance(...),\n    },\n    {\n        \"part1\": \"part1\",\n        \"subassembly1\": \"subassembly1\",\n    }\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_instances_sync(\n    assembly: Assembly, max_depth: int = 0\n) -&gt; tuple[dict[str, Union[PartInstance, AssemblyInstance]], dict[str, Occurrence], dict[str, str]]:\n    \"\"\"\n    Get instances and their sanitized names from an Onshape assembly.\n\n    Args:\n        assembly: The Onshape assembly object to use for extracting instances.\n        max_depth: Maximum depth to traverse in the assembly hierarchy. Default is 5\n\n    Returns:\n        A tuple containing:\n        - A dictionary mapping instance IDs to their corresponding instances.\n        - A dictionary mapping instance IDs to their sanitized names.\n\n    Examples:\n        &gt;&gt;&gt; assembly = Assembly(...)\n        &gt;&gt;&gt; get_instances(assembly, max_depth=2)\n        (\n            {\n                \"part1\": PartInstance(...),\n                \"subassembly1\": AssemblyInstance(...),\n            },\n            {\n                \"part1\": \"part1\",\n                \"subassembly1\": \"subassembly1\",\n            }\n        )\n    \"\"\"\n\n    def traverse_instances(\n        root: Union[RootAssembly, SubAssembly], prefix: str = \"\", current_depth: int = 0\n    ) -&gt; tuple[dict[str, Union[PartInstance, AssemblyInstance]], dict[str, str]]:\n        \"\"\"\n        Traverse the assembly structure to get instances.\n\n        Args:\n            root: Root assembly or subassembly object to traverse.\n            prefix: Prefix for the instance ID.\n            current_depth: Current depth in the assembly hierarchy.\n\n        Returns:\n            A tuple containing:\n            - A dictionary mapping instance IDs to their corresponding instances.\n            - A dictionary mapping instance IDs to their sanitized names.\n        \"\"\"\n        instance_map = {}\n        id_to_name_map = {}\n\n        # Stop traversing if the maximum depth is reached\n        if current_depth &gt;= max_depth:\n            LOGGER.debug(f\"Max depth {max_depth} reached. Stopping traversal at depth {current_depth}.\")\n            return instance_map, id_to_name_map\n\n        for instance in root.instances:\n            sanitized_name = get_sanitized_name(instance.name)\n            LOGGER.debug(f\"Parsing instance: {sanitized_name}\")\n            instance_id = f\"{prefix}{SUBASSEMBLY_JOINER}{sanitized_name}\" if prefix else sanitized_name\n            id_to_name_map[instance.id] = sanitized_name\n            instance_map[instance_id] = instance\n\n            # Recursively process sub-assemblies if applicable\n            if instance.type == InstanceType.ASSEMBLY:\n                for sub_assembly in assembly.subAssemblies:\n                    if sub_assembly.uid == instance.uid:\n                        sub_instance_map, sub_id_to_name_map = traverse_instances(\n                            sub_assembly, instance_id, current_depth + 1\n                        )\n                        instance_map.update(sub_instance_map)\n                        id_to_name_map.update(sub_id_to_name_map)\n\n        return instance_map, id_to_name_map\n\n    instance_map, id_to_name_map = traverse_instances(assembly.rootAssembly)\n    # return occurrences internally as it relies on max_depth\n    occurrence_map = get_occurrences(assembly, id_to_name_map, max_depth)\n\n    return instance_map, occurrence_map, id_to_name_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_mates_and_relations","title":"<code>get_mates_and_relations(assembly, subassemblies, rigid_subassemblies, id_to_name_map, parts)</code>","text":"<p>Synchronous wrapper for <code>get_mates_and_relations_async</code>.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_mates_and_relations(\n    assembly: Assembly,\n    subassemblies: dict[str, SubAssembly],\n    rigid_subassemblies: dict[str, RootAssembly],\n    id_to_name_map: dict[str, str],\n    parts: dict[str, Part],\n) -&gt; tuple[dict[str, MateFeatureData], dict[str, MateRelationFeatureData]]:\n    \"\"\"\n    Synchronous wrapper for `get_mates_and_relations_async`.\n    \"\"\"\n    return asyncio.run(\n        get_mates_and_relations_async(assembly, subassemblies, rigid_subassemblies, id_to_name_map, parts)\n    )\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_mates_and_relations_async","title":"<code>get_mates_and_relations_async(assembly, subassemblies, rigid_subassemblies, id_to_name_map, parts)</code>  <code>async</code>","text":"<p>Asynchronously get mates and relations.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def get_mates_and_relations_async(\n    assembly: Assembly,\n    subassemblies: dict[str, SubAssembly],\n    rigid_subassemblies: dict[str, RootAssembly],\n    id_to_name_map: dict[str, str],\n    parts: dict[str, Part],\n) -&gt; tuple[dict[str, MateFeatureData], dict[str, MateRelationFeatureData]]:\n    \"\"\"\n    Asynchronously get mates and relations.\n    \"\"\"\n    rigid_subassembly_occurrence_map = await build_rigid_subassembly_occurrence_map(\n        rigid_subassemblies, id_to_name_map, parts\n    )\n\n    mates_map, relations_map = await process_features_async(\n        assembly.rootAssembly.features,\n        parts,\n        id_to_name_map,\n        rigid_subassembly_occurrence_map,\n        rigid_subassemblies,\n        None,\n    )\n\n    for key, subassembly in subassemblies.items():\n        sub_mates, sub_relations = await process_features_async(\n            subassembly.features, parts, id_to_name_map, rigid_subassembly_occurrence_map, rigid_subassemblies, key\n        )\n        mates_map.update(sub_mates)\n        relations_map.update(sub_relations)\n\n    return mates_map, relations_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_occurrence_name","title":"<code>get_occurrence_name(occurrences, subassembly_prefix=None)</code>","text":"<p>Get the mapping name for an occurrence path.</p> <p>Parameters:</p> Name Type Description Default <code>occurrences</code> <code>list[str]</code> <p>Occurrence path.</p> required <code>subassembly_prefix</code> <code>Optional[str]</code> <p>Prefix for the subassembly.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The mapping name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_occurrence_name([\"subassembly1\", \"part1\"], \"subassembly1\")\n\"subassembly1-SUB-part1\"\n</code></pre> <pre><code>&gt;&gt;&gt; get_occurrence_name([\"part1\"], \"subassembly1\")\n\"subassembly1-SUB-part1\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_occurrence_name(occurrences: list[str], subassembly_prefix: Optional[str] = None) -&gt; str:\n    \"\"\"\n    Get the mapping name for an occurrence path.\n\n    Args:\n        occurrences: Occurrence path.\n        subassembly_prefix: Prefix for the subassembly.\n\n    Returns:\n        The mapping name.\n\n    Examples:\n        &gt;&gt;&gt; get_occurrence_name([\"subassembly1\", \"part1\"], \"subassembly1\")\n        \"subassembly1-SUB-part1\"\n\n        &gt;&gt;&gt; get_occurrence_name([\"part1\"], \"subassembly1\")\n        \"subassembly1-SUB-part1\"\n    \"\"\"\n    prefix = f\"{subassembly_prefix}{SUBASSEMBLY_JOINER}\" if subassembly_prefix else \"\"\n    return f\"{prefix}{SUBASSEMBLY_JOINER.join(occurrences)}\"\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_occurrences","title":"<code>get_occurrences(assembly, id_to_name_map, max_depth=0)</code>","text":"<p>Optimized occurrences fetching using comprehensions.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_occurrences(assembly: Assembly, id_to_name_map: dict[str, str], max_depth: int = 0) -&gt; dict[str, Occurrence]:\n    \"\"\"\n    Optimized occurrences fetching using comprehensions.\n    \"\"\"\n    return {\n        SUBASSEMBLY_JOINER.join([\n            id_to_name_map[path] for path in occurrence.path if path in id_to_name_map\n        ]): occurrence\n        for occurrence in assembly.rootAssembly.occurrences\n        if len(occurrence.path) &lt;= max_depth + 1\n    }\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_parts","title":"<code>get_parts(assembly, rigid_subassemblies, client, instances)</code>","text":"<p>Get parts of an Onshape assembly.</p> <p>Parameters:</p> Name Type Description Default <code>assembly</code> <code>Assembly</code> <p>The Onshape assembly object to use for extracting parts.</p> required <code>rigid_subassemblies</code> <code>dict[str, RootAssembly]</code> <p>Mapping of instance IDs to rigid subassemblies.</p> required <code>client</code> <code>Client</code> <p>The Onshape client object to use for sending API requests.</p> required <code>instances</code> <code>dict[str, Union[PartInstance, AssemblyInstance]]</code> <p>Mapping of instance IDs to their corresponding instances.</p> required <p>Returns:</p> Type Description <code>dict[str, Part]</code> <p>A dictionary mapping part IDs to their corresponding part objects.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_parts(\n    assembly: Assembly,\n    rigid_subassemblies: dict[str, RootAssembly],\n    client: Client,\n    instances: dict[str, Union[PartInstance, AssemblyInstance]],\n) -&gt; dict[str, Part]:\n    \"\"\"\n    Get parts of an Onshape assembly.\n\n    Args:\n        assembly: The Onshape assembly object to use for extracting parts.\n        rigid_subassemblies: Mapping of instance IDs to rigid subassemblies.\n        client: The Onshape client object to use for sending API requests.\n        instances: Mapping of instance IDs to their corresponding instances.\n\n    Returns:\n        A dictionary mapping part IDs to their corresponding part objects.\n    \"\"\"\n    return asyncio.run(_get_parts_async(assembly, rigid_subassemblies, client, instances))\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_subassemblies","title":"<code>get_subassemblies(assembly, client, instances)</code>","text":"<p>Synchronous wrapper for <code>get_subassemblies_async</code>.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def get_subassemblies(\n    assembly: Assembly,\n    client: Client,\n    instances: dict[str, Union[PartInstance, AssemblyInstance]],\n) -&gt; tuple[dict[str, SubAssembly], dict[str, RootAssembly]]:\n    \"\"\"\n    Synchronous wrapper for `get_subassemblies_async`.\n    \"\"\"\n    return asyncio.run(get_subassemblies_async(assembly, client, instances))\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.get_subassemblies_async","title":"<code>get_subassemblies_async(assembly, client, instance_map)</code>  <code>async</code>","text":"<p>Asynchronously fetch subassemblies.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def get_subassemblies_async(\n    assembly: Assembly,\n    client: Client,\n    instance_map: dict[str, Union[PartInstance, AssemblyInstance]],\n) -&gt; tuple[dict[str, SubAssembly], dict[str, RootAssembly]]:\n    \"\"\"\n    Asynchronously fetch subassemblies.\n    \"\"\"\n    subassembly_map: dict[str, SubAssembly] = {}\n    rigid_subassembly_map: dict[str, RootAssembly] = {}\n\n    # Group by UID\n    subassembly_instance_map = {}\n    rigid_subassembly_instance_map = {}\n\n    for instance_key, instance in instance_map.items():\n        if instance.type == InstanceType.ASSEMBLY:\n            if instance.isRigid:\n                rigid_subassembly_instance_map.setdefault(instance.uid, []).append(instance_key)\n            else:\n                subassembly_instance_map.setdefault(instance.uid, []).append(instance_key)\n\n    # Process subassemblies concurrently\n    tasks = []\n    for subassembly in assembly.subAssemblies:\n        uid = subassembly.uid\n        if uid in subassembly_instance_map:\n            is_rigid = len(subassembly.features) == 0 or all(\n                feature.featureType == AssemblyFeatureType.MATEGROUP for feature in subassembly.features\n            )\n            for key in subassembly_instance_map[uid]:\n                if is_rigid:\n                    tasks.append(fetch_rigid_subassemblies_async(subassembly, key, client, rigid_subassembly_map))\n                else:\n                    subassembly_map[key] = subassembly\n\n        elif uid in rigid_subassembly_instance_map:\n            for key in rigid_subassembly_instance_map[uid]:\n                tasks.append(fetch_rigid_subassemblies_async(subassembly, key, client, rigid_subassembly_map))\n\n    await asyncio.gather(*tasks)\n    return subassembly_map, rigid_subassembly_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.join_mate_occurrences","title":"<code>join_mate_occurrences(parent, child, prefix=None)</code>","text":"<p>Join two occurrence paths with a mate joiner.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>list[str]</code> <p>Occurrence path of the parent entity.</p> required <code>child</code> <code>list[str]</code> <p>Occurrence path of the child entity.</p> required <code>prefix</code> <code>Optional[str]</code> <p>Prefix to add to the occurrence path.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The joined occurrence path.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; join_mate_occurrences([\"subassembly1\", \"part1\"], [\"subassembly2\"])\n\"subassembly1-SUB-part1-MATE-subassembly2\"\n</code></pre> <pre><code>&gt;&gt;&gt; join_mate_occurrences([\"part1\"], [\"part2\"])\n\"part1-MATE-part2\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>def join_mate_occurrences(parent: list[str], child: list[str], prefix: Optional[str] = None) -&gt; str:\n    \"\"\"\n    Join two occurrence paths with a mate joiner.\n\n    Args:\n        parent: Occurrence path of the parent entity.\n        child: Occurrence path of the child entity.\n        prefix: Prefix to add to the occurrence path.\n\n    Returns:\n        The joined occurrence path.\n\n    Examples:\n        &gt;&gt;&gt; join_mate_occurrences([\"subassembly1\", \"part1\"], [\"subassembly2\"])\n        \"subassembly1-SUB-part1-MATE-subassembly2\"\n\n        &gt;&gt;&gt; join_mate_occurrences([\"part1\"], [\"part2\"])\n        \"part1-MATE-part2\"\n    \"\"\"\n    parent_occurrence = get_occurrence_name(parent, prefix)\n    child_occurrence = get_occurrence_name(child, prefix)\n    return f\"{parent_occurrence}{MATE_JOINER}{child_occurrence}\"\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.process_features_async","title":"<code>process_features_async(features, parts, id_to_name_map, rigid_subassembly_occurrence_map, rigid_subassemblies, subassembly_prefix)</code>  <code>async</code>","text":"<p>Process assembly features asynchronously.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def process_features_async(  # noqa: C901\n    features: list[AssemblyFeature],\n    parts: dict[str, Part],\n    id_to_name_map: dict[str, str],\n    rigid_subassembly_occurrence_map: dict[str, dict[str, Occurrence]],\n    rigid_subassemblies: dict[str, RootAssembly],\n    subassembly_prefix: Optional[str],\n) -&gt; tuple[dict[str, MateFeatureData], dict[str, MateRelationFeatureData]]:\n    \"\"\"\n    Process assembly features asynchronously.\n    \"\"\"\n    mates_map: dict[str, MateFeatureData] = {}\n    relations_map: dict[str, MateRelationFeatureData] = {}\n\n    for feature in features:\n        feature.featureData.id = feature.id\n\n        if feature.suppressed:\n            continue\n\n        if feature.featureType == AssemblyFeatureType.MATE:\n            if len(feature.featureData.matedEntities) &lt; 2:\n                LOGGER.warning(f\"Invalid mate feature: {feature}\")\n                continue\n\n            try:\n                child_occurrences = [\n                    id_to_name_map[path] for path in feature.featureData.matedEntities[CHILD].matedOccurrence\n                ]\n                parent_occurrences = [\n                    id_to_name_map[path] for path in feature.featureData.matedEntities[PARENT].matedOccurrence\n                ]\n            except KeyError as e:\n                LOGGER.warning(e)\n                LOGGER.warning(f\"Key not found in {id_to_name_map.keys()}\")\n                continue\n\n            # Handle rigid subassemblies\n            if parent_occurrences[0] in rigid_subassemblies:\n                _occurrence = rigid_subassembly_occurrence_map[parent_occurrences[0]].get(parent_occurrences[1])\n                if _occurrence:\n                    parent_parentCS = MatedCS.from_tf(np.matrix(_occurrence.transform).reshape(4, 4))\n                    parts[parent_occurrences[0]].rigidAssemblyToPartTF[parent_occurrences[1]] = parent_parentCS.part_tf\n                    feature.featureData.matedEntities[PARENT].parentCS = parent_parentCS\n                parent_occurrences = [parent_occurrences[0]]\n\n            if child_occurrences[0] in rigid_subassemblies:\n                _occurrence = rigid_subassembly_occurrence_map[child_occurrences[0]].get(child_occurrences[1])\n                if _occurrence:\n                    child_parentCS = MatedCS.from_tf(np.matrix(_occurrence.transform).reshape(4, 4))\n                    parts[child_occurrences[0]].rigidAssemblyToPartTF[child_occurrences[1]] = child_parentCS.part_tf\n                    feature.featureData.matedEntities[CHILD].parentCS = child_parentCS\n                child_occurrences = [child_occurrences[0]]\n\n            mates_map[\n                join_mate_occurrences(\n                    parent=parent_occurrences,\n                    child=child_occurrences,\n                    prefix=subassembly_prefix,\n                )\n            ] = feature.featureData\n\n        elif feature.featureType == AssemblyFeatureType.MATERELATION:\n            if feature.featureData.relationType == RelationType.SCREW:\n                child_joint_id = feature.featureData.mates[0].featureId\n            else:\n                child_joint_id = feature.featureData.mates[RELATION_CHILD].featureId\n\n            relations_map[child_joint_id] = feature.featureData\n\n    return mates_map, relations_map\n</code></pre>"},{"location":"api/parse/#onshape_robotics_toolkit.parse.traverse_instances_async","title":"<code>traverse_instances_async(root, prefix, current_depth, max_depth, assembly, id_to_name_map, instance_map)</code>  <code>async</code>","text":"<p>Asynchronously traverse the assembly structure to get instances.</p> Source code in <code>onshape_robotics_toolkit\\parse.py</code> <pre><code>async def traverse_instances_async(\n    root: Union[RootAssembly, SubAssembly],\n    prefix: str,\n    current_depth: int,\n    max_depth: int,\n    assembly: Assembly,\n    id_to_name_map: dict[str, str],\n    instance_map: dict[str, Union[PartInstance, AssemblyInstance]],\n) -&gt; None:\n    \"\"\"\n    Asynchronously traverse the assembly structure to get instances.\n    \"\"\"\n    isRigid = False\n    if current_depth &gt;= max_depth:\n        LOGGER.debug(\n            f\"Max depth {max_depth} reached. Assuming all sub-assemblies to be rigid at depth {current_depth}.\"\n        )\n        isRigid = True\n\n    for instance in root.instances:\n        sanitized_name = get_sanitized_name(instance.name)\n        LOGGER.debug(f\"Parsing instance: {sanitized_name}\")\n        instance_id = f\"{prefix}{SUBASSEMBLY_JOINER}{sanitized_name}\" if prefix else sanitized_name\n        id_to_name_map[instance.id] = sanitized_name\n        instance_map[instance_id] = instance\n\n        if instance.type == InstanceType.ASSEMBLY:\n            instance_map[instance_id].isRigid = isRigid\n\n        # Handle subassemblies concurrently\n        if instance.type == InstanceType.ASSEMBLY:\n            tasks = [\n                traverse_instances_async(\n                    sub_assembly, instance_id, current_depth + 1, max_depth, assembly, id_to_name_map, instance_map\n                )\n                for sub_assembly in assembly.subAssemblies\n                if sub_assembly.uid == instance.uid\n            ]\n            await asyncio.gather(*tasks)\n</code></pre>"},{"location":"api/robot/","title":"Robot","text":"<p>This module contains classes for creating a URDF robot model</p> Dataclass <ul> <li>Robot: Represents a robot model in URDF format, containing links and joints.</li> </ul>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot","title":"<code>Robot</code>","text":"<p>Represents a robot model with a graph structure for links and joints.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the robot.</p> <code>graph</code> <code>DiGraph</code> <p>The graph structure holding links (nodes) and joints (edges).</p> <code>assets</code> <code>Optional[dict[str, Asset]]</code> <p>Assets associated with the robot.</p> <code>type</code> <code>RobotType</code> <p>The type of the robot (URDF, MJCF, etc.).</p> <p>Methods:</p> Name Description <code>add_link</code> <p>Add a link to the graph.</p> <code>add_joint</code> <p>Add a joint to the graph.</p> <code>to_urdf</code> <p>Generate URDF XML from the graph.</p> <code>save</code> <p>Save the robot model to a URDF file.</p> <code>show</code> <p>Display the robot's graph as a tree.</p> <code>from_urdf</code> <p>Create a robot model from a URDF file.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>class Robot:\n    \"\"\"\n    Represents a robot model with a graph structure for links and joints.\n\n    Attributes:\n        name (str): The name of the robot.\n        graph (nx.DiGraph): The graph structure holding links (nodes) and joints (edges).\n        assets (Optional[dict[str, Asset]]): Assets associated with the robot.\n        type (RobotType): The type of the robot (URDF, MJCF, etc.).\n\n    Methods:\n        add_link: Add a link to the graph.\n        add_joint: Add a joint to the graph.\n        to_urdf: Generate URDF XML from the graph.\n        save: Save the robot model to a URDF file.\n        show: Display the robot's graph as a tree.\n        from_urdf: Create a robot model from a URDF file.\n    \"\"\"\n\n    def __init__(self, name: str, assets: Optional[dict[str, Asset]] = None, robot_type: RobotType = RobotType.URDF):\n        self.name: str = name\n        self.graph: nx.DiGraph = nx.DiGraph()  # Graph to hold links and joints\n\n        if assets is None:\n            self.assets: dict[str, Asset] = {}\n        else:\n            self.assets: dict[str, Asset] = assets\n\n        self.type: RobotType = robot_type\n\n        # Onshape assembly attributes\n        self.parts: dict[str, Part] = {}\n        self.mates: dict[str, MateFeatureData] = {}\n        self.relations: dict[str, MateRelationFeatureData] = {}\n\n        self.subassemblies: dict[str, SubAssembly] = {}\n        self.rigid_subassemblies: dict[str, RootAssembly] = {}\n\n        self.assembly: Optional[Assembly] = None\n        self.model: Optional[ET.Element] = None\n\n        # MuJoCo attributes\n        self.lights: dict[str, Any] = {}\n        self.cameras: dict[str, Any] = {}\n        self.actuators: dict[str, Any] = {}\n        self.sensors: dict[str, Any] = {}\n        self.custom_elements: dict[str, Any] = {}\n        self.mutated_elements: dict[str, Any] = {}\n\n        self.position: tuple[float, float, float] = (0, 0, 0)\n        self.ground_position: tuple[float, float, float] = (0, 0, 0)\n        self.compiler_attributes: dict[str, str] = DEFAULT_COMPILER_ATTRIBUTES\n        self.option_attributes: dict[str, str] = DEFAULT_OPTION_ATTRIBUTES\n\n    def add_link(self, link: Link) -&gt; None:\n        \"\"\"Add a link to the graph.\"\"\"\n        self.graph.add_node(link.name, data=link)\n\n    def add_joint(self, joint: BaseJoint) -&gt; None:\n        \"\"\"Add a joint to the graph.\"\"\"\n        self.graph.add_edge(joint.parent, joint.child, data=joint)\n\n    def set_robot_position(self, pos: tuple[float, float, float]) -&gt; None:\n        self.position = pos\n\n    def set_ground_position(self, pos: tuple[float, float, float]) -&gt; None:\n        self.ground_position = pos\n\n    def set_compiler_attributes(self, attributes: dict[str, str]) -&gt; None:\n        self.compiler_attributes = attributes\n\n    def set_option_attributes(self, attributes: dict[str, str]) -&gt; None:\n        self.option_attributes = attributes\n\n    def add_light(\n        self,\n        name: str,\n        directional: bool,\n        diffuse: tuple[float, float, float],\n        specular: tuple[float, float, float],\n        pos: tuple[float, float, float],\n        direction: tuple[float, float, float],\n        castshadow: bool,\n    ) -&gt; None:\n        self.lights[name] = Light(\n            directional=directional,\n            diffuse=diffuse,\n            specular=specular,\n            pos=pos,\n            direction=direction,\n            castshadow=castshadow,\n        )\n\n    def add_actuator(\n        self,\n        actuator_name: str,\n        joint_name: str,\n        ctrl_limited: bool,\n        gear: float,\n        add_encoder: bool = True,\n        add_force_sensor: bool = True,\n        ctrl_range: tuple[float, float] = (0, 0),\n    ) -&gt; None:\n        self.actuators[actuator_name] = Actuator(\n            name=actuator_name,\n            joint=joint_name,\n            ctrllimited=ctrl_limited,\n            gear=gear,\n            ctrlrange=ctrl_range,\n        )\n\n        if add_encoder:\n            self.add_sensor(actuator_name + \"-enc\", Encoder(actuator_name, actuator_name))\n\n        if add_force_sensor:\n            self.add_sensor(actuator_name + \"-frc\", ForceSensor(actuator_name + \"-frc\", actuator_name))\n\n    def add_sensor(self, name: str, sensor: Sensor) -&gt; None:\n        self.sensors[name] = sensor\n\n    def add_custom_element_by_tag(\n        self,\n        name: str,\n        parent_tag: str,  # Like 'asset', 'worldbody', etc.\n        element: ET.Element,\n    ) -&gt; None:\n        \"\"\"\n        Add a custom XML element to the first occurrence of a parent tag.\n\n        Args:\n            name: Name for referencing this custom element\n            parent_tag: Tag name of parent element (e.g. \"asset\", \"worldbody\")\n            element: The XML element to add\n\n        Examples:\n            &gt;&gt;&gt; # Add texture to asset section\n            &gt;&gt;&gt; texture = ET.Element(\"texture\", ...)\n            &gt;&gt;&gt; robot.add_custom_element_by_tag(\n            ...     \"wood_texture\",\n            ...     \"asset\",\n            ...     texture\n            ... )\n        \"\"\"\n        self.custom_elements[name] = {\"parent\": parent_tag, \"element\": element, \"find_by_tag\": True}\n\n    def add_custom_element_by_name(\n        self,\n        name: str,\n        parent_name: str,  # Like 'Part-3-1', 'ballbot', etc.\n        element: ET.Element,\n    ) -&gt; None:\n        \"\"\"\n        Add a custom XML element to a parent element with specific name.\n\n        Args:\n            name: Name for referencing this custom element\n            parent_name: Name attribute of the parent element (e.g. \"Part-3-1\")\n            element: The XML element to add\n\n        Examples:\n            &gt;&gt;&gt; # Add IMU site to specific body\n            &gt;&gt;&gt; imu_site = ET.Element(\"site\", ...)\n            &gt;&gt;&gt; robot.add_custom_element_by_name(\n            ...     \"imu\",\n            ...     \"Part-3-1\",\n            ...     imu_site\n            ... )\n        \"\"\"\n        self.custom_elements[name] = {\"parent\": parent_name, \"element\": element, \"find_by_tag\": False}\n\n    def set_element_attributes(\n        self,\n        element_name: str,\n        attributes: dict[str, str],\n    ) -&gt; None:\n        \"\"\"\n        Set or update attributes of an existing XML element.\n\n        Args:\n            element: The element to modify\n            attributes: Dictionary of attribute key-value pairs to set/update\n\n        Examples:\n            &gt;&gt;&gt; # Update existing element attributes\n            &gt;&gt;&gt; robot.set_element_attributes(\n            ...     ground_element,\n            ...     {\"size\": \"3 3 0.001\", \"friction\": \"1 0.5 0.5\"}\n            ... )\n        \"\"\"\n        self.mutated_elements[element_name] = attributes\n\n    def add_ground_plane(\n        self, root: ET.Element, size: int = 2, orientation: tuple[float, float, float] = (0, 0, 0)\n    ) -&gt; ET.Element:\n        \"\"\"\n        Add a ground plane to the root element with associated texture and material.\n            Args:\n            root: The root element to append the ground plane to\n            size: Size of the ground plane (default: 2)\n            orientation: Euler angles for orientation (default: (0, 0, 0))\n            Returns:\n            ET.Element: The ground plane element\n        \"\"\"\n        # Create ground plane geom element\n        ground_geom = ET.Element(\n            \"geom\",\n            type=\"plane\",\n            pos=\" \".join(map(str, self.ground_position)),\n            euler=\" \".join(map(str, orientation)),\n            size=f\"{size} {size} 0.001\",\n            condim=\"3\",\n            conaffinity=\"15\",\n            material=\"grid\",\n        )\n\n        # Add to custom elements\n        self.add_custom_element_by_tag(\"ground\", \"worldbody\", ground_geom)\n\n        return ground_geom\n\n    def add_ground_plane_assets(self, root: ET.Element) -&gt; None:\n        # Add texture definition\n        \"\"\"Add texture and material assets for the ground plane\"\"\"\n        # Create texture element\n        checker_texture = ET.Element(\n            \"texture\",\n            name=\"checker\",\n            type=\"2d\",\n            builtin=\"checker\",\n            rgb1=\".1 .2 .3\",\n            rgb2=\".2 .3 .4\",\n            width=\"300\",\n            height=\"300\",\n        )\n        self.add_custom_element_by_tag(\"checker\", \"asset\", checker_texture)\n\n        # Create material element\n        grid_material = ET.Element(\"material\", name=\"grid\", texture=\"checker\", texrepeat=\"8 8\", reflectance=\".2\")\n        self.add_custom_element_by_tag(\"grid\", \"asset\", grid_material)\n\n    def to_urdf(self) -&gt; str:\n        \"\"\"Generate URDF XML from the graph.\"\"\"\n        robot = ET.Element(\"robot\", name=self.name)\n\n        # Add links\n        for link_name, link_data in self.graph.nodes(data=\"data\"):\n            if link_data is not None:\n                link_data.to_xml(robot)\n            else:\n                LOGGER.warning(f\"Link {link_name} has no data.\")\n\n        # Add joints\n        for parent, child, joint_data in self.graph.edges(data=\"data\"):\n            if joint_data is not None:\n                joint_data.to_xml(robot)\n            else:\n                LOGGER.warning(f\"Joint between {parent} and {child} has no data.\")\n\n        return ET.tostring(robot, pretty_print=True, encoding=\"unicode\")\n\n    def get_xml_string(self, element: ET.Element) -&gt; str:\n        \"\"\"Generate URDF XML from the graph.\"\"\"\n        return ET.tostring(element, pretty_print=True, encoding=\"unicode\")\n\n    def to_mjcf(self) -&gt; str:  # noqa: C901\n        \"\"\"Generate MJCF XML from the graph.\"\"\"\n        model = ET.Element(\"mujoco\", model=self.name)\n\n        ET.SubElement(\n            model,\n            \"compiler\",\n            attrib=self.compiler_attributes,\n        )\n\n        ET.SubElement(\n            model,\n            \"option\",\n            attrib=self.option_attributes,\n        )\n\n        if self.assets:\n            asset_element = ET.SubElement(model, \"asset\")\n            for asset in self.assets.values():\n                asset.to_mjcf(asset_element)\n\n            self.add_ground_plane_assets(asset_element)\n        else:\n            # Find or create asset element after default element\n            asset = ET.SubElement(model, \"asset\")\n            self.add_ground_plane_assets(asset)\n\n        worldbody = ET.SubElement(model, \"worldbody\")\n        self.add_ground_plane(worldbody)\n\n        if self.lights:\n            for light in self.lights.values():\n                light.to_mjcf(worldbody)\n\n        root_body = ET.SubElement(worldbody, \"body\", name=self.name, pos=\" \".join(map(str, self.position)))\n        ET.SubElement(root_body, \"freejoint\", name=f\"{self.name}_freejoint\")\n\n        body_elements = {self.name: root_body}\n\n        for link_name, link_data in self.graph.nodes(data=\"data\"):\n            if link_data is not None:\n                body_elements[link_name] = link_data.to_mjcf(root_body)\n            else:\n                LOGGER.warning(f\"Link {link_name} has no data.\")\n\n        dissolved_transforms = {}\n\n        combined_mass = 0\n        combined_diaginertia = np.zeros(3)\n        combined_pos = np.zeros(3)\n        combined_euler = np.zeros(3)\n\n        # First, process all fixed joints\n        for parent_name, child_name, joint_data in self.graph.edges(data=\"data\"):\n            if joint_data is not None and joint_data.joint_type == \"fixed\":\n                parent_body = body_elements.get(parent_name)\n                child_body = body_elements.get(child_name)\n\n                if parent_body is not None and child_body is not None:\n                    LOGGER.debug(f\"\\nProcessing fixed joint from {parent_name} to {child_name}\")\n\n                    # Convert joint transform from URDF convention\n                    joint_pos = np.array(joint_data.origin.xyz)\n                    joint_rot = Rotation.from_euler(URDF_EULER_SEQ, joint_data.origin.rpy)\n\n                    # If parent was dissolved, compose transformations\n                    if parent_name in dissolved_transforms:\n                        parent_pos, parent_rot = dissolved_transforms[parent_name]\n                        # Transform position and rotation\n                        joint_pos = parent_rot.apply(joint_pos) + parent_pos\n                        joint_rot = parent_rot * joint_rot\n\n                    dissolved_transforms[child_name] = (joint_pos, joint_rot)\n\n                    # Transform geometries\n                    for element in list(child_body):\n                        if element.tag == \"inertial\":\n                            # Get current inertial properties\n                            current_pos = np.array([float(x) for x in (element.get(\"pos\") or \"0 0 0\").split()])\n                            current_euler = np.array([float(x) for x in (element.get(\"euler\") or \"0 0 0\").split()])\n                            current_rot = Rotation.from_euler(MJCF_EULER_SEQ, current_euler, degrees=False)\n\n                            # Get current mass and diaginertia\n                            current_mass = float(element.get(\"mass\", 0))\n                            current_diaginertia = np.array([\n                                float(x) for x in (element.get(\"diaginertia\") or \"0 0 0\").split()\n                            ])\n\n                            # Transform position and orientation\n                            new_pos = joint_rot.apply(current_pos) + joint_pos\n                            new_rot = joint_rot * current_rot\n\n                            # Convert back to MuJoCo convention\n                            new_euler = new_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                            # Accumulate inertial properties\n                            combined_mass += current_mass\n                            combined_diaginertia += current_diaginertia\n                            combined_pos += new_pos * current_mass\n                            combined_euler += new_euler * current_mass\n\n                            continue\n\n                        elif element.tag == \"geom\":\n                            current_pos = np.array([float(x) for x in (element.get(\"pos\") or \"0 0 0\").split()])\n                            current_euler = np.array([float(x) for x in (element.get(\"euler\") or \"0 0 0\").split()])\n\n                            # Convert current rotation from MuJoCo convention\n                            current_rot = Rotation.from_euler(MJCF_EULER_SEQ, current_euler, degrees=False)\n\n                            # Apply the dissolved transformation\n                            new_pos = joint_rot.apply(current_pos) + joint_pos\n                            new_rot = joint_rot * current_rot  # Order matters for rotation composition\n\n                            # Convert back to MuJoCo convention - explicitly specify intrinsic/extrinsic\n                            new_euler = new_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                            element.set(\"pos\", \" \".join(format_number(v) for v in new_pos))\n                            element.set(\"euler\", \" \".join(format_number(v) for v in new_euler))\n\n                        parent_body.append(element)\n\n                    root_body.remove(child_body)\n                    body_elements[child_name] = parent_body\n\n        # Normalize the combined position and orientation by the total mass\n        if combined_mass &gt; 0:\n            combined_pos /= combined_mass\n            combined_euler /= combined_mass\n\n        # Find the inertial element of the parent body\n        parent_inertial = parent_body.find(\"inertial\")\n        if parent_inertial is not None:\n            # Update the existing inertial element\n            parent_inertial.set(\"mass\", str(combined_mass))\n            parent_inertial.set(\"pos\", \" \".join(format_number(v) for v in combined_pos))\n            parent_inertial.set(\"euler\", \" \".join(format_number(v) for v in combined_euler))\n            parent_inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in combined_diaginertia))\n        else:\n            # If no inertial element exists, create one\n            new_inertial = ET.Element(\"inertial\")\n            new_inertial.set(\"mass\", str(combined_mass))\n            new_inertial.set(\"pos\", \" \".join(format_number(v) for v in combined_pos))\n            new_inertial.set(\"euler\", \" \".join(format_number(v) for v in combined_euler))\n            new_inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in combined_diaginertia))\n            parent_body.append(new_inertial)\n\n        # Then process revolute joints\n        for parent_name, child_name, joint_data in self.graph.edges(data=\"data\"):\n            if joint_data is not None and joint_data.joint_type != \"fixed\":\n                parent_body = body_elements.get(parent_name)\n                child_body = body_elements.get(child_name)\n\n                if parent_body is not None and child_body is not None:\n                    LOGGER.debug(f\"\\nProcessing revolute joint from {parent_name} to {child_name}\")\n\n                    # Get dissolved parent transform\n                    if parent_name in dissolved_transforms:\n                        parent_pos, parent_rot = dissolved_transforms[parent_name]\n                    else:\n                        parent_pos = np.array([0, 0, 0])\n                        parent_rot = Rotation.from_euler(URDF_EULER_SEQ, [0, 0, 0])\n\n                    # Convert joint transform from URDF convention\n                    joint_pos = np.array(joint_data.origin.xyz)\n                    joint_rot = Rotation.from_euler(URDF_EULER_SEQ, joint_data.origin.rpy)\n\n                    # Apply parent's dissolved transformation\n                    final_pos = parent_rot.apply(joint_pos) + parent_pos\n                    final_rot = parent_rot * joint_rot\n\n                    # Convert to MuJoCo convention while maintaining the joint axis orientation\n                    final_euler = final_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                    LOGGER.debug(f\"Joint {parent_name}-&gt;{child_name}:\")\n                    LOGGER.debug(f\"  Original: pos={joint_data.origin.xyz}, rpy={joint_data.origin.rpy}\")\n                    LOGGER.debug(f\"  Final: pos={final_pos}, euler={final_euler}\")\n\n                    # Update child body transformation\n                    child_body.set(\"pos\", \" \".join(format_number(v) for v in final_pos))\n                    child_body.set(\"euler\", \" \".join(format_number(v) for v in final_euler))\n\n                    # Create joint with zero origin\n                    joint_data.origin.xyz = [0, 0, 0]\n                    joint_data.origin.rpy = [0, 0, 0]\n                    joint_data.to_mjcf(child_body)\n\n                    # Move child under parent\n                    parent_body.append(child_body)\n\n        if self.actuators:\n            actuator_element = ET.SubElement(model, \"actuator\")\n            for actuator in self.actuators.values():\n                actuator.to_mjcf(actuator_element)\n\n        if self.sensors:\n            sensor_element = ET.SubElement(model, \"sensor\")\n            for sensor in self.sensors.values():\n                sensor.to_mjcf(sensor_element)\n\n        if self.custom_elements:\n            for element_info in self.custom_elements.values():\n                parent = element_info[\"parent\"]\n                find_by_tag = element_info.get(\"find_by_tag\", False)\n                element = element_info[\"element\"]\n\n                if find_by_tag:\n                    parent_element = model.find(parent)\n                else:\n                    xpath = f\".//body[@name='{parent}']\"\n                    parent_element = model.find(xpath)\n\n                if parent_element is not None:\n                    # Create new element with proper parent relationship\n                    new_element = ET.SubElement(parent_element, element.tag, element.attrib)\n                    # Copy any children if they exist\n                    for child in element:\n                        new_element.append(ET.fromstring(ET.tostring(child)))  # noqa: S320\n                else:\n                    search_type = \"tag\" if find_by_tag else \"name\"\n                    LOGGER.warning(f\"Parent element with {search_type} '{parent}' not found in model.\")\n\n        for element_name, attributes in self.mutated_elements.items():\n            # Search recursively through all descendants, looking for both body and joint elements\n            elements = model.findall(f\".//*[@name='{element_name}']\")\n            if elements:\n                element = elements[0]  # Get the first matching element\n                for key, value in attributes.items():\n                    element.set(key, str(value))\n            else:\n                LOGGER.warning(f\"Could not find element with name '{element_name}'\")\n\n        return ET.tostring(model, pretty_print=True, encoding=\"unicode\")\n\n    def save(self, file_path: Optional[str] = None, download_assets: bool = True) -&gt; None:\n        \"\"\"Save the robot model to a URDF file.\"\"\"\n        if download_assets and self.assets:\n            asyncio.run(self._download_assets())\n\n        if not file_path:\n            LOGGER.warning(\"No file path provided. Saving to current directory.\")\n            LOGGER.warning(\"Please keep in mind that the path to the assets will not be updated\")\n            file_path = f\"{self.name}.{self.type}\"\n\n        xml_declaration = '&lt;?xml version=\"1.0\" ?&gt;\\n'\n\n        if self.type == RobotType.URDF:\n            urdf_str = xml_declaration + self.to_urdf()\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(urdf_str)\n\n        elif self.type == RobotType.MJCF:\n            mjcf_str = xml_declaration + self.to_mjcf()\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(mjcf_str)\n\n        LOGGER.info(f\"Robot model saved to {os.path.abspath(file_path)}\")\n\n    def show_tree(self) -&gt; None:\n        \"\"\"Display the robot's graph as a tree structure.\"\"\"\n\n        def print_tree(node, depth=0):\n            prefix = \"    \" * depth\n            print(f\"{prefix}{node}\")\n            for child in self.graph.successors(node):\n                print_tree(child, depth + 1)\n\n        root_nodes = [n for n in self.graph.nodes if self.graph.in_degree(n) == 0]\n        for root in root_nodes:\n            print_tree(root)\n\n    def show_graph(self, file_name: Optional[str] = None) -&gt; None:\n        \"\"\"Display the robot's graph as a directed graph.\"\"\"\n        plot_graph(self.graph, file_name=file_name)\n\n    async def _download_assets(self) -&gt; None:\n        \"\"\"Asynchronously download the assets.\"\"\"\n        if not self.assets:\n            LOGGER.warning(\"No assets found for the robot model.\")\n            return\n\n        tasks = [asset.download() for asset in self.assets.values() if not asset.is_from_file]\n        try:\n            await asyncio.gather(*tasks)\n            LOGGER.info(\"All assets downloaded successfully.\")\n        except Exception as e:\n            LOGGER.error(f\"Error downloading assets: {e}\")\n\n    def add_custom_element(self, parent_name: str, element: ET.Element) -&gt; None:\n        \"\"\"Add a custom XML element to the robot model.\"\"\"\n        if self.model is None:\n            self.model = self.create_robot_model()\n\n        if parent_name == \"root\":\n            self.model.insert(0, element)\n        else:\n            parent = self.model.find(f\".//*[@name='{parent_name}']\")\n            if parent is None:\n                raise ValueError(f\"Parent with name '{parent_name}' not found in the robot model.\")\n\n            # Add the custom element under the parent\n            parent.append(element)\n\n        LOGGER.info(f\"Custom element added to parent '{parent_name}'.\")\n\n    @classmethod\n    def from_urdf(cls, file_name: str, robot_type: RobotType) -&gt; \"Robot\":  # noqa: C901\n        \"\"\"Load a robot model from a URDF file.\"\"\"\n        tree: ET.ElementTree = ET.parse(file_name)  # noqa: S320\n        root: ET.Element = tree.getroot()\n\n        name = root.attrib[\"name\"]\n        robot = cls(name=name, robot_type=robot_type)\n\n        for element in root:\n            if element.tag == \"link\":\n                link = Link.from_xml(element)\n                robot.add_link(link)\n\n                # Process the visual element within the link\n                visual = element.find(\"visual\")\n                if visual is not None:\n                    geometry = visual.find(\"geometry\")\n                    if geometry is not None:\n                        mesh = geometry.find(\"mesh\")\n                        if mesh is not None:\n                            file_name = mesh.attrib.get(\"filename\")\n                            if file_name and file_name not in robot.assets:\n                                robot.assets[file_name] = Asset.from_file(file_name)\n\n                # Process the collision element within the link\n                collision = element.find(\"collision\")\n                if collision is not None:\n                    geometry = collision.find(\"geometry\")\n                    if geometry is not None:\n                        mesh = geometry.find(\"mesh\")\n                        if mesh is not None:\n                            file_name = mesh.attrib.get(\"filename\")\n                            if file_name and file_name not in robot.assets:\n                                robot.assets[file_name] = Asset.from_file(file_name)\n\n            elif element.tag == \"joint\":\n                joint = set_joint_from_xml(element)\n                if joint:\n                    robot.add_joint(joint)\n\n        return robot\n\n    @classmethod\n    def from_url(\n        cls,\n        name: str,\n        url: str,\n        client: Client,\n        max_depth: int = 0,\n        use_user_defined_root: bool = False,\n        robot_type: RobotType = RobotType.URDF,\n    ) -&gt; \"Robot\":\n        \"\"\"Create a robot model from an Onshape CAD assembly.\"\"\"\n\n        document = Document.from_url(url=url)\n        client.set_base_url(document.base_url)\n\n        assembly = client.get_assembly(\n            did=document.did,\n            wtype=document.wtype,\n            wid=document.wid,\n            eid=document.eid,\n            log_response=False,\n            with_meta_data=True,\n        )\n\n        instances, occurrences, id_to_name_map = get_instances(assembly=assembly, max_depth=max_depth)\n        subassemblies, rigid_subassemblies = get_subassemblies(assembly=assembly, client=client, instances=instances)\n\n        parts = get_parts(\n            assembly=assembly, rigid_subassemblies=rigid_subassemblies, client=client, instances=instances\n        )\n        mates, relations = get_mates_and_relations(\n            assembly=assembly,\n            subassemblies=subassemblies,\n            rigid_subassemblies=rigid_subassemblies,\n            id_to_name_map=id_to_name_map,\n            parts=parts,\n        )\n\n        graph, root_node = create_graph(\n            occurrences=occurrences,\n            instances=instances,\n            parts=parts,\n            mates=mates,\n            use_user_defined_root=use_user_defined_root,\n        )\n\n        robot = get_robot(\n            assembly=assembly,\n            graph=graph,\n            root_node=root_node,\n            parts=parts,\n            mates=mates,\n            relations=relations,\n            client=client,\n            robot_name=name,\n        )\n\n        robot.parts = parts\n        robot.mates = mates\n        robot.relations = relations\n\n        robot.subassemblies = subassemblies\n        robot.rigid_subassemblies = rigid_subassemblies\n\n        robot.assembly = assembly\n\n        robot.type = robot_type\n\n        return robot\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_custom_element","title":"<code>add_custom_element(parent_name, element)</code>","text":"<p>Add a custom XML element to the robot model.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_custom_element(self, parent_name: str, element: ET.Element) -&gt; None:\n    \"\"\"Add a custom XML element to the robot model.\"\"\"\n    if self.model is None:\n        self.model = self.create_robot_model()\n\n    if parent_name == \"root\":\n        self.model.insert(0, element)\n    else:\n        parent = self.model.find(f\".//*[@name='{parent_name}']\")\n        if parent is None:\n            raise ValueError(f\"Parent with name '{parent_name}' not found in the robot model.\")\n\n        # Add the custom element under the parent\n        parent.append(element)\n\n    LOGGER.info(f\"Custom element added to parent '{parent_name}'.\")\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_custom_element_by_name","title":"<code>add_custom_element_by_name(name, parent_name, element)</code>","text":"<p>Add a custom XML element to a parent element with specific name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for referencing this custom element</p> required <code>parent_name</code> <code>str</code> <p>Name attribute of the parent element (e.g. \"Part-3-1\")</p> required <code>element</code> <code>Element</code> <p>The XML element to add</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Add IMU site to specific body\n&gt;&gt;&gt; imu_site = ET.Element(\"site\", ...)\n&gt;&gt;&gt; robot.add_custom_element_by_name(\n...     \"imu\",\n...     \"Part-3-1\",\n...     imu_site\n... )\n</code></pre> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_custom_element_by_name(\n    self,\n    name: str,\n    parent_name: str,  # Like 'Part-3-1', 'ballbot', etc.\n    element: ET.Element,\n) -&gt; None:\n    \"\"\"\n    Add a custom XML element to a parent element with specific name.\n\n    Args:\n        name: Name for referencing this custom element\n        parent_name: Name attribute of the parent element (e.g. \"Part-3-1\")\n        element: The XML element to add\n\n    Examples:\n        &gt;&gt;&gt; # Add IMU site to specific body\n        &gt;&gt;&gt; imu_site = ET.Element(\"site\", ...)\n        &gt;&gt;&gt; robot.add_custom_element_by_name(\n        ...     \"imu\",\n        ...     \"Part-3-1\",\n        ...     imu_site\n        ... )\n    \"\"\"\n    self.custom_elements[name] = {\"parent\": parent_name, \"element\": element, \"find_by_tag\": False}\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_custom_element_by_tag","title":"<code>add_custom_element_by_tag(name, parent_tag, element)</code>","text":"<p>Add a custom XML element to the first occurrence of a parent tag.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for referencing this custom element</p> required <code>parent_tag</code> <code>str</code> <p>Tag name of parent element (e.g. \"asset\", \"worldbody\")</p> required <code>element</code> <code>Element</code> <p>The XML element to add</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Add texture to asset section\n&gt;&gt;&gt; texture = ET.Element(\"texture\", ...)\n&gt;&gt;&gt; robot.add_custom_element_by_tag(\n...     \"wood_texture\",\n...     \"asset\",\n...     texture\n... )\n</code></pre> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_custom_element_by_tag(\n    self,\n    name: str,\n    parent_tag: str,  # Like 'asset', 'worldbody', etc.\n    element: ET.Element,\n) -&gt; None:\n    \"\"\"\n    Add a custom XML element to the first occurrence of a parent tag.\n\n    Args:\n        name: Name for referencing this custom element\n        parent_tag: Tag name of parent element (e.g. \"asset\", \"worldbody\")\n        element: The XML element to add\n\n    Examples:\n        &gt;&gt;&gt; # Add texture to asset section\n        &gt;&gt;&gt; texture = ET.Element(\"texture\", ...)\n        &gt;&gt;&gt; robot.add_custom_element_by_tag(\n        ...     \"wood_texture\",\n        ...     \"asset\",\n        ...     texture\n        ... )\n    \"\"\"\n    self.custom_elements[name] = {\"parent\": parent_tag, \"element\": element, \"find_by_tag\": True}\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_ground_plane","title":"<code>add_ground_plane(root, size=2, orientation=(0, 0, 0))</code>","text":"<p>Add a ground plane to the root element with associated texture and material.     Args:     root: The root element to append the ground plane to     size: Size of the ground plane (default: 2)     orientation: Euler angles for orientation (default: (0, 0, 0))     Returns:     ET.Element: The ground plane element</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_ground_plane(\n    self, root: ET.Element, size: int = 2, orientation: tuple[float, float, float] = (0, 0, 0)\n) -&gt; ET.Element:\n    \"\"\"\n    Add a ground plane to the root element with associated texture and material.\n        Args:\n        root: The root element to append the ground plane to\n        size: Size of the ground plane (default: 2)\n        orientation: Euler angles for orientation (default: (0, 0, 0))\n        Returns:\n        ET.Element: The ground plane element\n    \"\"\"\n    # Create ground plane geom element\n    ground_geom = ET.Element(\n        \"geom\",\n        type=\"plane\",\n        pos=\" \".join(map(str, self.ground_position)),\n        euler=\" \".join(map(str, orientation)),\n        size=f\"{size} {size} 0.001\",\n        condim=\"3\",\n        conaffinity=\"15\",\n        material=\"grid\",\n    )\n\n    # Add to custom elements\n    self.add_custom_element_by_tag(\"ground\", \"worldbody\", ground_geom)\n\n    return ground_geom\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_ground_plane_assets","title":"<code>add_ground_plane_assets(root)</code>","text":"<p>Add texture and material assets for the ground plane</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_ground_plane_assets(self, root: ET.Element) -&gt; None:\n    # Add texture definition\n    \"\"\"Add texture and material assets for the ground plane\"\"\"\n    # Create texture element\n    checker_texture = ET.Element(\n        \"texture\",\n        name=\"checker\",\n        type=\"2d\",\n        builtin=\"checker\",\n        rgb1=\".1 .2 .3\",\n        rgb2=\".2 .3 .4\",\n        width=\"300\",\n        height=\"300\",\n    )\n    self.add_custom_element_by_tag(\"checker\", \"asset\", checker_texture)\n\n    # Create material element\n    grid_material = ET.Element(\"material\", name=\"grid\", texture=\"checker\", texrepeat=\"8 8\", reflectance=\".2\")\n    self.add_custom_element_by_tag(\"grid\", \"asset\", grid_material)\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_joint","title":"<code>add_joint(joint)</code>","text":"<p>Add a joint to the graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_joint(self, joint: BaseJoint) -&gt; None:\n    \"\"\"Add a joint to the graph.\"\"\"\n    self.graph.add_edge(joint.parent, joint.child, data=joint)\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.add_link","title":"<code>add_link(link)</code>","text":"<p>Add a link to the graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def add_link(self, link: Link) -&gt; None:\n    \"\"\"Add a link to the graph.\"\"\"\n    self.graph.add_node(link.name, data=link)\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.from_urdf","title":"<code>from_urdf(file_name, robot_type)</code>  <code>classmethod</code>","text":"<p>Load a robot model from a URDF file.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>@classmethod\ndef from_urdf(cls, file_name: str, robot_type: RobotType) -&gt; \"Robot\":  # noqa: C901\n    \"\"\"Load a robot model from a URDF file.\"\"\"\n    tree: ET.ElementTree = ET.parse(file_name)  # noqa: S320\n    root: ET.Element = tree.getroot()\n\n    name = root.attrib[\"name\"]\n    robot = cls(name=name, robot_type=robot_type)\n\n    for element in root:\n        if element.tag == \"link\":\n            link = Link.from_xml(element)\n            robot.add_link(link)\n\n            # Process the visual element within the link\n            visual = element.find(\"visual\")\n            if visual is not None:\n                geometry = visual.find(\"geometry\")\n                if geometry is not None:\n                    mesh = geometry.find(\"mesh\")\n                    if mesh is not None:\n                        file_name = mesh.attrib.get(\"filename\")\n                        if file_name and file_name not in robot.assets:\n                            robot.assets[file_name] = Asset.from_file(file_name)\n\n            # Process the collision element within the link\n            collision = element.find(\"collision\")\n            if collision is not None:\n                geometry = collision.find(\"geometry\")\n                if geometry is not None:\n                    mesh = geometry.find(\"mesh\")\n                    if mesh is not None:\n                        file_name = mesh.attrib.get(\"filename\")\n                        if file_name and file_name not in robot.assets:\n                            robot.assets[file_name] = Asset.from_file(file_name)\n\n        elif element.tag == \"joint\":\n            joint = set_joint_from_xml(element)\n            if joint:\n                robot.add_joint(joint)\n\n    return robot\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.from_url","title":"<code>from_url(name, url, client, max_depth=0, use_user_defined_root=False, robot_type=RobotType.URDF)</code>  <code>classmethod</code>","text":"<p>Create a robot model from an Onshape CAD assembly.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>@classmethod\ndef from_url(\n    cls,\n    name: str,\n    url: str,\n    client: Client,\n    max_depth: int = 0,\n    use_user_defined_root: bool = False,\n    robot_type: RobotType = RobotType.URDF,\n) -&gt; \"Robot\":\n    \"\"\"Create a robot model from an Onshape CAD assembly.\"\"\"\n\n    document = Document.from_url(url=url)\n    client.set_base_url(document.base_url)\n\n    assembly = client.get_assembly(\n        did=document.did,\n        wtype=document.wtype,\n        wid=document.wid,\n        eid=document.eid,\n        log_response=False,\n        with_meta_data=True,\n    )\n\n    instances, occurrences, id_to_name_map = get_instances(assembly=assembly, max_depth=max_depth)\n    subassemblies, rigid_subassemblies = get_subassemblies(assembly=assembly, client=client, instances=instances)\n\n    parts = get_parts(\n        assembly=assembly, rigid_subassemblies=rigid_subassemblies, client=client, instances=instances\n    )\n    mates, relations = get_mates_and_relations(\n        assembly=assembly,\n        subassemblies=subassemblies,\n        rigid_subassemblies=rigid_subassemblies,\n        id_to_name_map=id_to_name_map,\n        parts=parts,\n    )\n\n    graph, root_node = create_graph(\n        occurrences=occurrences,\n        instances=instances,\n        parts=parts,\n        mates=mates,\n        use_user_defined_root=use_user_defined_root,\n    )\n\n    robot = get_robot(\n        assembly=assembly,\n        graph=graph,\n        root_node=root_node,\n        parts=parts,\n        mates=mates,\n        relations=relations,\n        client=client,\n        robot_name=name,\n    )\n\n    robot.parts = parts\n    robot.mates = mates\n    robot.relations = relations\n\n    robot.subassemblies = subassemblies\n    robot.rigid_subassemblies = rigid_subassemblies\n\n    robot.assembly = assembly\n\n    robot.type = robot_type\n\n    return robot\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.get_xml_string","title":"<code>get_xml_string(element)</code>","text":"<p>Generate URDF XML from the graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def get_xml_string(self, element: ET.Element) -&gt; str:\n    \"\"\"Generate URDF XML from the graph.\"\"\"\n    return ET.tostring(element, pretty_print=True, encoding=\"unicode\")\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.save","title":"<code>save(file_path=None, download_assets=True)</code>","text":"<p>Save the robot model to a URDF file.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def save(self, file_path: Optional[str] = None, download_assets: bool = True) -&gt; None:\n    \"\"\"Save the robot model to a URDF file.\"\"\"\n    if download_assets and self.assets:\n        asyncio.run(self._download_assets())\n\n    if not file_path:\n        LOGGER.warning(\"No file path provided. Saving to current directory.\")\n        LOGGER.warning(\"Please keep in mind that the path to the assets will not be updated\")\n        file_path = f\"{self.name}.{self.type}\"\n\n    xml_declaration = '&lt;?xml version=\"1.0\" ?&gt;\\n'\n\n    if self.type == RobotType.URDF:\n        urdf_str = xml_declaration + self.to_urdf()\n        with open(file_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(urdf_str)\n\n    elif self.type == RobotType.MJCF:\n        mjcf_str = xml_declaration + self.to_mjcf()\n        with open(file_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(mjcf_str)\n\n    LOGGER.info(f\"Robot model saved to {os.path.abspath(file_path)}\")\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.set_element_attributes","title":"<code>set_element_attributes(element_name, attributes)</code>","text":"<p>Set or update attributes of an existing XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The element to modify</p> required <code>attributes</code> <code>dict[str, str]</code> <p>Dictionary of attribute key-value pairs to set/update</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Update existing element attributes\n&gt;&gt;&gt; robot.set_element_attributes(\n...     ground_element,\n...     {\"size\": \"3 3 0.001\", \"friction\": \"1 0.5 0.5\"}\n... )\n</code></pre> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def set_element_attributes(\n    self,\n    element_name: str,\n    attributes: dict[str, str],\n) -&gt; None:\n    \"\"\"\n    Set or update attributes of an existing XML element.\n\n    Args:\n        element: The element to modify\n        attributes: Dictionary of attribute key-value pairs to set/update\n\n    Examples:\n        &gt;&gt;&gt; # Update existing element attributes\n        &gt;&gt;&gt; robot.set_element_attributes(\n        ...     ground_element,\n        ...     {\"size\": \"3 3 0.001\", \"friction\": \"1 0.5 0.5\"}\n        ... )\n    \"\"\"\n    self.mutated_elements[element_name] = attributes\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.show_graph","title":"<code>show_graph(file_name=None)</code>","text":"<p>Display the robot's graph as a directed graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def show_graph(self, file_name: Optional[str] = None) -&gt; None:\n    \"\"\"Display the robot's graph as a directed graph.\"\"\"\n    plot_graph(self.graph, file_name=file_name)\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.show_tree","title":"<code>show_tree()</code>","text":"<p>Display the robot's graph as a tree structure.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def show_tree(self) -&gt; None:\n    \"\"\"Display the robot's graph as a tree structure.\"\"\"\n\n    def print_tree(node, depth=0):\n        prefix = \"    \" * depth\n        print(f\"{prefix}{node}\")\n        for child in self.graph.successors(node):\n            print_tree(child, depth + 1)\n\n    root_nodes = [n for n in self.graph.nodes if self.graph.in_degree(n) == 0]\n    for root in root_nodes:\n        print_tree(root)\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.to_mjcf","title":"<code>to_mjcf()</code>","text":"<p>Generate MJCF XML from the graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def to_mjcf(self) -&gt; str:  # noqa: C901\n    \"\"\"Generate MJCF XML from the graph.\"\"\"\n    model = ET.Element(\"mujoco\", model=self.name)\n\n    ET.SubElement(\n        model,\n        \"compiler\",\n        attrib=self.compiler_attributes,\n    )\n\n    ET.SubElement(\n        model,\n        \"option\",\n        attrib=self.option_attributes,\n    )\n\n    if self.assets:\n        asset_element = ET.SubElement(model, \"asset\")\n        for asset in self.assets.values():\n            asset.to_mjcf(asset_element)\n\n        self.add_ground_plane_assets(asset_element)\n    else:\n        # Find or create asset element after default element\n        asset = ET.SubElement(model, \"asset\")\n        self.add_ground_plane_assets(asset)\n\n    worldbody = ET.SubElement(model, \"worldbody\")\n    self.add_ground_plane(worldbody)\n\n    if self.lights:\n        for light in self.lights.values():\n            light.to_mjcf(worldbody)\n\n    root_body = ET.SubElement(worldbody, \"body\", name=self.name, pos=\" \".join(map(str, self.position)))\n    ET.SubElement(root_body, \"freejoint\", name=f\"{self.name}_freejoint\")\n\n    body_elements = {self.name: root_body}\n\n    for link_name, link_data in self.graph.nodes(data=\"data\"):\n        if link_data is not None:\n            body_elements[link_name] = link_data.to_mjcf(root_body)\n        else:\n            LOGGER.warning(f\"Link {link_name} has no data.\")\n\n    dissolved_transforms = {}\n\n    combined_mass = 0\n    combined_diaginertia = np.zeros(3)\n    combined_pos = np.zeros(3)\n    combined_euler = np.zeros(3)\n\n    # First, process all fixed joints\n    for parent_name, child_name, joint_data in self.graph.edges(data=\"data\"):\n        if joint_data is not None and joint_data.joint_type == \"fixed\":\n            parent_body = body_elements.get(parent_name)\n            child_body = body_elements.get(child_name)\n\n            if parent_body is not None and child_body is not None:\n                LOGGER.debug(f\"\\nProcessing fixed joint from {parent_name} to {child_name}\")\n\n                # Convert joint transform from URDF convention\n                joint_pos = np.array(joint_data.origin.xyz)\n                joint_rot = Rotation.from_euler(URDF_EULER_SEQ, joint_data.origin.rpy)\n\n                # If parent was dissolved, compose transformations\n                if parent_name in dissolved_transforms:\n                    parent_pos, parent_rot = dissolved_transforms[parent_name]\n                    # Transform position and rotation\n                    joint_pos = parent_rot.apply(joint_pos) + parent_pos\n                    joint_rot = parent_rot * joint_rot\n\n                dissolved_transforms[child_name] = (joint_pos, joint_rot)\n\n                # Transform geometries\n                for element in list(child_body):\n                    if element.tag == \"inertial\":\n                        # Get current inertial properties\n                        current_pos = np.array([float(x) for x in (element.get(\"pos\") or \"0 0 0\").split()])\n                        current_euler = np.array([float(x) for x in (element.get(\"euler\") or \"0 0 0\").split()])\n                        current_rot = Rotation.from_euler(MJCF_EULER_SEQ, current_euler, degrees=False)\n\n                        # Get current mass and diaginertia\n                        current_mass = float(element.get(\"mass\", 0))\n                        current_diaginertia = np.array([\n                            float(x) for x in (element.get(\"diaginertia\") or \"0 0 0\").split()\n                        ])\n\n                        # Transform position and orientation\n                        new_pos = joint_rot.apply(current_pos) + joint_pos\n                        new_rot = joint_rot * current_rot\n\n                        # Convert back to MuJoCo convention\n                        new_euler = new_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                        # Accumulate inertial properties\n                        combined_mass += current_mass\n                        combined_diaginertia += current_diaginertia\n                        combined_pos += new_pos * current_mass\n                        combined_euler += new_euler * current_mass\n\n                        continue\n\n                    elif element.tag == \"geom\":\n                        current_pos = np.array([float(x) for x in (element.get(\"pos\") or \"0 0 0\").split()])\n                        current_euler = np.array([float(x) for x in (element.get(\"euler\") or \"0 0 0\").split()])\n\n                        # Convert current rotation from MuJoCo convention\n                        current_rot = Rotation.from_euler(MJCF_EULER_SEQ, current_euler, degrees=False)\n\n                        # Apply the dissolved transformation\n                        new_pos = joint_rot.apply(current_pos) + joint_pos\n                        new_rot = joint_rot * current_rot  # Order matters for rotation composition\n\n                        # Convert back to MuJoCo convention - explicitly specify intrinsic/extrinsic\n                        new_euler = new_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                        element.set(\"pos\", \" \".join(format_number(v) for v in new_pos))\n                        element.set(\"euler\", \" \".join(format_number(v) for v in new_euler))\n\n                    parent_body.append(element)\n\n                root_body.remove(child_body)\n                body_elements[child_name] = parent_body\n\n    # Normalize the combined position and orientation by the total mass\n    if combined_mass &gt; 0:\n        combined_pos /= combined_mass\n        combined_euler /= combined_mass\n\n    # Find the inertial element of the parent body\n    parent_inertial = parent_body.find(\"inertial\")\n    if parent_inertial is not None:\n        # Update the existing inertial element\n        parent_inertial.set(\"mass\", str(combined_mass))\n        parent_inertial.set(\"pos\", \" \".join(format_number(v) for v in combined_pos))\n        parent_inertial.set(\"euler\", \" \".join(format_number(v) for v in combined_euler))\n        parent_inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in combined_diaginertia))\n    else:\n        # If no inertial element exists, create one\n        new_inertial = ET.Element(\"inertial\")\n        new_inertial.set(\"mass\", str(combined_mass))\n        new_inertial.set(\"pos\", \" \".join(format_number(v) for v in combined_pos))\n        new_inertial.set(\"euler\", \" \".join(format_number(v) for v in combined_euler))\n        new_inertial.set(\"diaginertia\", \" \".join(format_number(v) for v in combined_diaginertia))\n        parent_body.append(new_inertial)\n\n    # Then process revolute joints\n    for parent_name, child_name, joint_data in self.graph.edges(data=\"data\"):\n        if joint_data is not None and joint_data.joint_type != \"fixed\":\n            parent_body = body_elements.get(parent_name)\n            child_body = body_elements.get(child_name)\n\n            if parent_body is not None and child_body is not None:\n                LOGGER.debug(f\"\\nProcessing revolute joint from {parent_name} to {child_name}\")\n\n                # Get dissolved parent transform\n                if parent_name in dissolved_transforms:\n                    parent_pos, parent_rot = dissolved_transforms[parent_name]\n                else:\n                    parent_pos = np.array([0, 0, 0])\n                    parent_rot = Rotation.from_euler(URDF_EULER_SEQ, [0, 0, 0])\n\n                # Convert joint transform from URDF convention\n                joint_pos = np.array(joint_data.origin.xyz)\n                joint_rot = Rotation.from_euler(URDF_EULER_SEQ, joint_data.origin.rpy)\n\n                # Apply parent's dissolved transformation\n                final_pos = parent_rot.apply(joint_pos) + parent_pos\n                final_rot = parent_rot * joint_rot\n\n                # Convert to MuJoCo convention while maintaining the joint axis orientation\n                final_euler = final_rot.as_euler(MJCF_EULER_SEQ, degrees=False)\n\n                LOGGER.debug(f\"Joint {parent_name}-&gt;{child_name}:\")\n                LOGGER.debug(f\"  Original: pos={joint_data.origin.xyz}, rpy={joint_data.origin.rpy}\")\n                LOGGER.debug(f\"  Final: pos={final_pos}, euler={final_euler}\")\n\n                # Update child body transformation\n                child_body.set(\"pos\", \" \".join(format_number(v) for v in final_pos))\n                child_body.set(\"euler\", \" \".join(format_number(v) for v in final_euler))\n\n                # Create joint with zero origin\n                joint_data.origin.xyz = [0, 0, 0]\n                joint_data.origin.rpy = [0, 0, 0]\n                joint_data.to_mjcf(child_body)\n\n                # Move child under parent\n                parent_body.append(child_body)\n\n    if self.actuators:\n        actuator_element = ET.SubElement(model, \"actuator\")\n        for actuator in self.actuators.values():\n            actuator.to_mjcf(actuator_element)\n\n    if self.sensors:\n        sensor_element = ET.SubElement(model, \"sensor\")\n        for sensor in self.sensors.values():\n            sensor.to_mjcf(sensor_element)\n\n    if self.custom_elements:\n        for element_info in self.custom_elements.values():\n            parent = element_info[\"parent\"]\n            find_by_tag = element_info.get(\"find_by_tag\", False)\n            element = element_info[\"element\"]\n\n            if find_by_tag:\n                parent_element = model.find(parent)\n            else:\n                xpath = f\".//body[@name='{parent}']\"\n                parent_element = model.find(xpath)\n\n            if parent_element is not None:\n                # Create new element with proper parent relationship\n                new_element = ET.SubElement(parent_element, element.tag, element.attrib)\n                # Copy any children if they exist\n                for child in element:\n                    new_element.append(ET.fromstring(ET.tostring(child)))  # noqa: S320\n            else:\n                search_type = \"tag\" if find_by_tag else \"name\"\n                LOGGER.warning(f\"Parent element with {search_type} '{parent}' not found in model.\")\n\n    for element_name, attributes in self.mutated_elements.items():\n        # Search recursively through all descendants, looking for both body and joint elements\n        elements = model.findall(f\".//*[@name='{element_name}']\")\n        if elements:\n            element = elements[0]  # Get the first matching element\n            for key, value in attributes.items():\n                element.set(key, str(value))\n        else:\n            LOGGER.warning(f\"Could not find element with name '{element_name}'\")\n\n    return ET.tostring(model, pretty_print=True, encoding=\"unicode\")\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.Robot.to_urdf","title":"<code>to_urdf()</code>","text":"<p>Generate URDF XML from the graph.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def to_urdf(self) -&gt; str:\n    \"\"\"Generate URDF XML from the graph.\"\"\"\n    robot = ET.Element(\"robot\", name=self.name)\n\n    # Add links\n    for link_name, link_data in self.graph.nodes(data=\"data\"):\n        if link_data is not None:\n            link_data.to_xml(robot)\n        else:\n            LOGGER.warning(f\"Link {link_name} has no data.\")\n\n    # Add joints\n    for parent, child, joint_data in self.graph.edges(data=\"data\"):\n        if joint_data is not None:\n            joint_data.to_xml(robot)\n        else:\n            LOGGER.warning(f\"Joint between {parent} and {child} has no data.\")\n\n    return ET.tostring(robot, pretty_print=True, encoding=\"unicode\")\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.RobotType","title":"<code>RobotType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for different types of robots.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>class RobotType(str, Enum):\n    \"\"\"\n    Enum for different types of robots.\n    \"\"\"\n\n    URDF = \"urdf\"\n    MJCF = \"xml\"\n\n    def __str__(self):\n        return self.value\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.get_robot","title":"<code>get_robot(assembly, graph, root_node, parts, mates, relations, client, robot_name)</code>","text":"<p>Generate a Robot instance from an Onshape assembly.</p> <p>Parameters:</p> Name Type Description Default <code>assembly</code> <code>Assembly</code> <p>The Onshape assembly object.</p> required <code>graph</code> <code>DiGraph</code> <p>The graph representation of the assembly.</p> required <code>root_node</code> <code>str</code> <p>The root node of the graph.</p> required <code>parts</code> <code>dict[str, Part]</code> <p>The dictionary of parts in the assembly.</p> required <code>mates</code> <code>dict[str, MateFeatureData]</code> <p>The dictionary of mates in the assembly.</p> required <code>relations</code> <code>dict[str, MateRelationFeatureData]</code> <p>The dictionary of mate relations in the assembly.</p> required <code>client</code> <code>Client</code> <p>The Onshape client object.</p> required <code>robot_name</code> <code>str</code> <p>Name of the robot.</p> required <p>Returns:</p> Name Type Description <code>Robot</code> <code>Robot</code> <p>The generated Robot instance.</p> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def get_robot(\n    assembly: Assembly,\n    graph: nx.DiGraph,\n    root_node: str,\n    parts: dict[str, Part],\n    mates: dict[str, MateFeatureData],\n    relations: dict[str, MateRelationFeatureData],\n    client: Client,\n    robot_name: str,\n) -&gt; Robot:\n    \"\"\"\n    Generate a Robot instance from an Onshape assembly.\n\n    Args:\n        assembly: The Onshape assembly object.\n        graph: The graph representation of the assembly.\n        root_node: The root node of the graph.\n        parts: The dictionary of parts in the assembly.\n        mates: The dictionary of mates in the assembly.\n        relations: The dictionary of mate relations in the assembly.\n        client: The Onshape client object.\n        robot_name: Name of the robot.\n\n    Returns:\n        Robot: The generated Robot instance.\n    \"\"\"\n    robot = Robot(name=robot_name)\n\n    assets_map = {}\n    stl_to_link_tf_map = {}\n    topological_mates, topological_relations = get_topological_mates(graph, mates, relations)\n\n    LOGGER.info(f\"Processing root node: {root_node}\")\n\n    root_link, stl_to_root_tf, root_asset = get_robot_link(\n        name=root_node, part=parts[root_node], wid=assembly.document.wid, client=client, mate=None\n    )\n    robot.add_link(root_link)\n    assets_map[root_node] = root_asset\n    stl_to_link_tf_map[root_node] = stl_to_root_tf\n\n    LOGGER.info(f\"Processing {len(graph.edges)} edges in the graph.\")\n\n    for parent, child in graph.edges:\n        mate_key = f\"{parent}{MATE_JOINER}{child}\"\n        LOGGER.info(f\"Processing edge: {parent} -&gt; {child}\")\n        parent_tf = stl_to_link_tf_map[parent]\n\n        if parent not in parts or child not in parts:\n            LOGGER.warning(f\"Part {parent} or {child} not found in parts dictionary. Skipping.\")\n            continue\n\n        joint_mimic = None\n        relation = topological_relations.get(topological_mates[mate_key].id)\n        if relation:\n            multiplier = (\n                relation.relationLength\n                if relation.relationType == RelationType.RACK_AND_PINION\n                else relation.relationRatio\n            )\n            joint_mimic = JointMimic(\n                joint=get_joint_name(relation.mates[RELATION_PARENT].featureId, mates),\n                multiplier=multiplier,\n                offset=0.0,\n            )\n\n        joint_list, link_list = get_robot_joint(\n            parent,\n            child,\n            topological_mates[mate_key],\n            parent_tf,\n            joint_mimic,\n            is_rigid_assembly=parts[parent].isRigidAssembly,\n        )\n\n        link, stl_to_link_tf, asset = get_robot_link(\n            child, parts[child], assembly.document.wid, client, topological_mates[mate_key]\n        )\n        stl_to_link_tf_map[child] = stl_to_link_tf\n        assets_map[child] = asset\n\n        if child not in robot.graph:\n            robot.add_link(link)\n        else:\n            LOGGER.warning(f\"Link {child} already exists in the robot graph. Skipping.\")\n\n        for link in link_list:\n            if link.name not in robot.graph:\n                robot.add_link(link)\n            else:\n                LOGGER.warning(f\"Link {link.name} already exists in the robot graph. Skipping.\")\n\n        for joint in joint_list:\n            robot.add_joint(joint)\n\n    robot.assets = assets_map\n    return robot\n</code></pre>"},{"location":"api/robot/#onshape_robotics_toolkit.robot.set_joint_from_xml","title":"<code>set_joint_from_xml(element)</code>","text":"<p>Set the joint type from an XML element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The XML element.</p> required <p>Returns:</p> Name Type Description <code>BaseJoint</code> <code>BaseJoint | None</code> <p>The joint type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; element = ET.Element(\"joint\", type=\"fixed\")\n&gt;&gt;&gt; set_joint_from_xml(element)\n&lt;FixedJoint&gt;\n</code></pre> Source code in <code>onshape_robotics_toolkit\\robot.py</code> <pre><code>def set_joint_from_xml(element: ET.Element) -&gt; BaseJoint | None:\n    \"\"\"\n    Set the joint type from an XML element.\n\n    Args:\n        element (ET.Element): The XML element.\n\n    Returns:\n        BaseJoint: The joint type.\n\n    Examples:\n        &gt;&gt;&gt; element = ET.Element(\"joint\", type=\"fixed\")\n        &gt;&gt;&gt; set_joint_from_xml(element)\n        &lt;FixedJoint&gt;\n    \"\"\"\n    joint_type = element.attrib[\"type\"]\n    if joint_type == JointType.FIXED:\n        return FixedJoint.from_xml(element)\n    elif joint_type == JointType.REVOLUTE:\n        return RevoluteJoint.from_xml(element)\n    elif joint_type == JointType.CONTINUOUS:\n        return ContinuousJoint.from_xml(element)\n    elif joint_type == JointType.PRISMATIC:\n        return PrismaticJoint.from_xml(element)\n    elif joint_type == JointType.FLOATING:\n        return FloatingJoint.from_xml(element)\n    return None\n</code></pre>"},{"location":"api/urdf/","title":"Urdf","text":"<p>This module contains functions to generate URDF components from Onshape assembly data.</p>"},{"location":"api/urdf/#onshape_robotics_toolkit.urdf.get_robot_joint","title":"<code>get_robot_joint(parent, child, mate, stl_to_parent_tf, mimic=None, is_rigid_assembly=False)</code>","text":"<p>Generate a URDF joint from an Onshape mate feature.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>str</code> <p>The name of the parent link.</p> required <code>child</code> <code>str</code> <p>The name of the child link.</p> required <code>mate</code> <code>MateFeatureData</code> <p>The Onshape mate feature object.</p> required <code>stl_to_parent_tf</code> <code>matrix</code> <p>The transformation matrix from the STL origin to the parent link origin.</p> required <p>Returns:</p> Type Description <code>tuple[list[BaseJoint], Optional[list[Link]]]</code> <p>Joint object that represents the URDF joint.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_robot_joint(\"root\", \"link1\", mate, np.eye(4))\nRevoluteJoint(\n    name='base_link_to_link1',\n    parent='root',\n    child='link1',\n    origin=Origin(...),\n    limits=JointLimits(...),\n    axis=Axis(...),\n    dynamics=JointDynamics(...)\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\urdf.py</code> <pre><code>def get_robot_joint(\n    parent: str,\n    child: str,\n    mate: MateFeatureData,\n    stl_to_parent_tf: np.matrix,\n    mimic: Optional[JointMimic] = None,\n    is_rigid_assembly: bool = False,\n) -&gt; tuple[list[BaseJoint], Optional[list[Link]]]:\n    \"\"\"\n    Generate a URDF joint from an Onshape mate feature.\n\n    Args:\n        parent: The name of the parent link.\n        child: The name of the child link.\n        mate: The Onshape mate feature object.\n        stl_to_parent_tf: The transformation matrix from the STL origin to the parent link origin.\n\n    Returns:\n        Joint object that represents the URDF joint.\n\n    Examples:\n        &gt;&gt;&gt; get_robot_joint(\"root\", \"link1\", mate, np.eye(4))\n        RevoluteJoint(\n            name='base_link_to_link1',\n            parent='root',\n            child='link1',\n            origin=Origin(...),\n            limits=JointLimits(...),\n            axis=Axis(...),\n            dynamics=JointDynamics(...)\n        )\n\n    \"\"\"\n    links = []\n    if isinstance(mate, MateFeatureData):\n        if not is_rigid_assembly:\n            parent_to_mate_tf = mate.matedEntities[PARENT].matedCS.part_to_mate_tf\n        else:\n            # for rigid assemblies, get the parentCS and transform it to the mateCS\n            parent_to_mate_tf = (\n                mate.matedEntities[PARENT].parentCS.part_tf @ mate.matedEntities[PARENT].matedCS.part_to_mate_tf\n            )\n\n    stl_to_mate_tf = stl_to_parent_tf @ parent_to_mate_tf\n    origin = Origin.from_matrix(stl_to_mate_tf)\n    sanitized_name = get_sanitized_name(mate.name)\n\n    LOGGER.info(f\"Creating robot joint from {parent} to {child}\")\n\n    if mate.mateType == MateType.REVOLUTE:\n        return [\n            RevoluteJoint(\n                name=sanitized_name,\n                parent=parent,\n                child=child,\n                origin=origin,\n                limits=JointLimits(\n                    effort=1.0,\n                    velocity=1.0,\n                    lower=-np.pi,\n                    upper=np.pi,\n                ),\n                axis=Axis((0.0, 0.0, -1.0)),\n                dynamics=JointDynamics(damping=0.1, friction=0.1),\n                mimic=mimic,\n            )\n        ], links\n\n    elif mate.mateType == MateType.FASTENED:\n        return [FixedJoint(name=sanitized_name, parent=parent, child=child, origin=origin)], links\n\n    elif mate.mateType == MateType.SLIDER or mate.mateType == MateType.CYLINDRICAL:\n        return [\n            PrismaticJoint(\n                name=sanitized_name,\n                parent=parent,\n                child=child,\n                origin=origin,\n                limits=JointLimits(\n                    effort=1.0,\n                    velocity=1.0,\n                    lower=-0.1,\n                    upper=0.1,\n                ),\n                axis=Axis((0.0, 0.0, -1.0)),\n                dynamics=JointDynamics(damping=0.1, friction=0.1),\n                mimic=mimic,\n            )\n        ], links\n\n    elif mate.mateType == MateType.BALL:\n        dummy_x = Link(\n            name=f\"{parent}-{get_sanitized_name(mate.name)}-x\",\n            inertial=InertialLink(\n                mass=0.0,\n                inertia=Inertia.zero_inertia(),\n                origin=Origin.zero_origin(),\n            ),\n        )\n        dummy_y = Link(\n            name=f\"{parent}-{get_sanitized_name(mate.name)}-y\",\n            inertial=InertialLink(\n                mass=0.0,\n                inertia=Inertia.zero_inertia(),\n                origin=Origin.zero_origin(),\n            ),\n        )\n\n        links = [dummy_x, dummy_y]\n\n        return [\n            RevoluteJoint(\n                name=sanitized_name + \"-x\",\n                parent=parent,\n                child=dummy_x.name,\n                origin=origin,\n                limits=JointLimits(\n                    effort=1.0,\n                    velocity=1.0,\n                    lower=-np.pi,\n                    upper=np.pi,\n                ),\n                axis=Axis((1.0, 0.0, 0.0)),\n                dynamics=JointDynamics(damping=0.1, friction=0.1),\n                mimic=mimic,\n            ),\n            RevoluteJoint(\n                name=sanitized_name + \"-y\",\n                parent=dummy_x.name,\n                child=dummy_y.name,\n                origin=Origin.zero_origin(),\n                limits=JointLimits(\n                    effort=1.0,\n                    velocity=1.0,\n                    lower=-np.pi,\n                    upper=np.pi,\n                ),\n                axis=Axis((0.0, 1.0, 0.0)),\n                dynamics=JointDynamics(damping=0.1, friction=0.1),\n                mimic=mimic,\n            ),\n            RevoluteJoint(\n                name=sanitized_name + \"-z\",\n                parent=dummy_y.name,\n                child=child,\n                origin=Origin.zero_origin(),\n                limits=JointLimits(\n                    effort=1.0,\n                    velocity=1.0,\n                    lower=-np.pi,\n                    upper=np.pi,\n                ),\n                axis=Axis((0.0, 0.0, -1.0)),\n                dynamics=JointDynamics(damping=0.1, friction=0.1),\n                mimic=mimic,\n            ),\n        ], links\n\n    else:\n        LOGGER.warning(f\"Unsupported joint type: {mate.mateType}\")\n        return [DummyJoint(name=sanitized_name, parent=parent, child=child, origin=origin)], links\n</code></pre>"},{"location":"api/urdf/#onshape_robotics_toolkit.urdf.get_robot_link","title":"<code>get_robot_link(name, part, wid, client, mate=None)</code>","text":"<p>Generate a URDF link from an Onshape part.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the link.</p> required <code>part</code> <code>Part</code> <p>The Onshape part object.</p> required <code>wid</code> <code>str</code> <p>The unique identifier of the workspace.</p> required <code>client</code> <code>Client</code> <p>The Onshape client object to use for sending API requests.</p> required <code>mate</code> <code>Optional[Union[MateFeatureData, None]]</code> <p>MateFeatureData object to use for generating the transformation matrix.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[Link, matrix, Asset]</code> <p>tuple[Link, np.matrix]: The generated link object and the transformation matrix from the STL origin to the link origin.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_robot_link(\"root\", part, wid, client)\n(\n    Link(name='root', visual=VisualLink(...), collision=CollisionLink(...), inertial=InertialLink(...)),\n    np.matrix([[1., 0., 0., 0.],\n        [0., 1., 0., 0.],\n        [0., 0., 1., 0.],\n        [0., 0., 0., 1.]])\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\urdf.py</code> <pre><code>def get_robot_link(\n    name: str,\n    part: Part,\n    wid: str,\n    client: Client,\n    mate: Optional[Union[MateFeatureData, None]] = None,\n) -&gt; tuple[Link, np.matrix, Asset]:\n    \"\"\"\n    Generate a URDF link from an Onshape part.\n\n    Args:\n        name: The name of the link.\n        part: The Onshape part object.\n        wid: The unique identifier of the workspace.\n        client: The Onshape client object to use for sending API requests.\n        mate: MateFeatureData object to use for generating the transformation matrix.\n\n    Returns:\n        tuple[Link, np.matrix]: The generated link object\n            and the transformation matrix from the STL origin to the link origin.\n\n    Examples:\n        &gt;&gt;&gt; get_robot_link(\"root\", part, wid, client)\n        (\n            Link(name='root', visual=VisualLink(...), collision=CollisionLink(...), inertial=InertialLink(...)),\n            np.matrix([[1., 0., 0., 0.],\n                [0., 1., 0., 0.],\n                [0., 0., 1., 0.],\n                [0., 0., 0., 1.]])\n        )\n\n    \"\"\"\n    _link_to_stl_tf = np.eye(4)\n\n    if mate is None:\n        _link_to_stl_tf[:3, 3] = np.array(part.MassProperty.center_of_mass).reshape(3)\n    elif mate.matedEntities[CHILD].parentCS:\n        _link_to_stl_tf = mate.matedEntities[CHILD].parentCS.part_tf @ mate.matedEntities[CHILD].matedCS.part_to_mate_tf\n    else:\n        _link_to_stl_tf = mate.matedEntities[CHILD].matedCS.part_to_mate_tf\n\n    _stl_to_link_tf = np.matrix(np.linalg.inv(_link_to_stl_tf))\n    _mass = part.MassProperty.mass[0]\n    _origin = Origin.zero_origin()\n    _com = part.MassProperty.center_of_mass_wrt(_stl_to_link_tf)\n    _inertia = part.MassProperty.inertia_wrt(np.matrix(_stl_to_link_tf[:3, :3]))\n    _principal_axes_rotation = (0.0, 0.0, 0.0)\n\n    LOGGER.info(f\"Creating robot link for {name}\")\n\n    if part.documentVersion:\n        wtype = WorkspaceType.V.value\n        mvwid = part.documentVersion\n\n    elif part.isRigidAssembly:\n        wtype = WorkspaceType.W.value\n        mvwid = part.rigidAssemblyWorkspaceId\n    else:\n        wtype = WorkspaceType.W.value\n        mvwid = wid\n\n    _asset = Asset(\n        did=part.documentId,\n        wtype=wtype,\n        wid=mvwid,\n        eid=part.elementId,\n        partID=part.partId,\n        client=client,\n        transform=_stl_to_link_tf,\n        is_rigid_assembly=part.isRigidAssembly,\n        file_name=f\"{name}.stl\",\n    )\n\n    _mesh_path = _asset.relative_path\n\n    _link = Link(\n        name=name,\n        visual=VisualLink(\n            name=f\"{name}-visual\",\n            origin=_origin,\n            geometry=MeshGeometry(_mesh_path),\n            material=Material.from_color(name=f\"{name}-material\", color=random.SystemRandom().choice(list(Colors))),\n        ),\n        inertial=InertialLink(\n            origin=Origin(\n                xyz=_com,\n                rpy=_principal_axes_rotation,\n            ),\n            mass=_mass,\n            inertia=Inertia(\n                ixx=_inertia[0, 0],\n                ixy=_inertia[0, 1],\n                ixz=_inertia[0, 2],\n                iyy=_inertia[1, 1],\n                iyz=_inertia[1, 2],\n                izz=_inertia[2, 2],\n            ),\n        ),\n        collision=CollisionLink(\n            name=f\"{name}-collision\",\n            origin=_origin,\n            geometry=MeshGeometry(_mesh_path),\n        ),\n    )\n\n    return _link, _stl_to_link_tf, _asset\n</code></pre>"},{"location":"api/urdf/#onshape_robotics_toolkit.urdf.get_topological_mates","title":"<code>get_topological_mates(graph, mates, relations=None)</code>","text":"<p>Get the topological mates from the graph. This shuffles the order of the mates to match the directed graph edges.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>DiGraph</code> <p>The graph representation of the assembly.</p> required <code>mates</code> <code>dict[str, MateFeatureData]</code> <p>The dictionary of mates in the assembly.</p> required <p>Returns:</p> Type Description <code>tuple[dict[str, MateFeatureData], dict[str, MateRelationFeatureData]]</code> <p>dict[str, MateFeatureData]: The topological mates.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_topological_mates(graph, mates)\n{\n    'link1-MATE-body': MateFeatureData(...),\n    'subassembly1-SUB-link2-MATE-body': MateFeatureData(...),\n}\n</code></pre> Source code in <code>onshape_robotics_toolkit\\urdf.py</code> <pre><code>def get_topological_mates(\n    graph: DiGraph,\n    mates: dict[str, MateFeatureData],\n    relations: Optional[dict[str, MateRelationFeatureData]] = None,\n) -&gt; tuple[dict[str, MateFeatureData], dict[str, MateRelationFeatureData]]:\n    \"\"\"\n    Get the topological mates from the graph. This shuffles the order of the mates to match the directed graph edges.\n\n    Args:\n        graph: The graph representation of the assembly.\n        mates: The dictionary of mates in the assembly.\n\n    Returns:\n        dict[str, MateFeatureData]: The topological mates.\n\n    Examples:\n        &gt;&gt;&gt; get_topological_mates(graph, mates)\n        {\n            'link1-MATE-body': MateFeatureData(...),\n            'subassembly1-SUB-link2-MATE-body': MateFeatureData(...),\n        }\n    \"\"\"\n    topological_mates: dict[str, MateFeatureData] = {}\n    topological_relations: dict[str, MateRelationFeatureData] = relations or {}\n\n    mate_keys = {tuple(key.split(MATE_JOINER)) for key in mates}\n    graph_edges = set(graph.edges)\n\n    rogue_mates = mate_keys.difference(graph_edges)\n\n    for edge in graph.edges:\n        parent, child = edge\n        key = f\"{parent}{MATE_JOINER}{child}\"\n\n        if (child, parent) in rogue_mates:\n            # the only way it can be a rogue mate is if the parent and child are swapped\n            # LOGGER.info(f\"Rogue mate found: {edge}\")\n            rogue_key = f\"{child}{MATE_JOINER}{parent}\"\n            topological_mates[key] = mates[rogue_key]\n\n            if isinstance(topological_mates[key], MateFeatureData):\n                topological_mates[key].matedEntities = topological_mates[key].matedEntities[::-1]\n\n            if relations and rogue_key in topological_relations:\n                LOGGER.info(f\"Rogue relation found: {rogue_key}\")\n                topological_relations[key] = topological_relations[rogue_key]\n                topological_relations.pop(rogue_key)\n\n        else:\n            topological_mates[key] = mates[key]\n\n    return topological_mates, topological_relations\n</code></pre>"},{"location":"api/utilities/","title":"Utilities","text":""},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.format_number","title":"<code>format_number(value)</code>","text":"<p>Format a number to 8 significant figures</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>Number to format</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Formatted number</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_number(0.123456789)\n\"0.12345679\"\n</code></pre> <pre><code>&gt;&gt;&gt; format_number(123456789)\n\"123456789\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def format_number(value: float) -&gt; str:\n    \"\"\"\n    Format a number to 8 significant figures\n\n    Args:\n        value (float): Number to format\n\n    Returns:\n        str: Formatted number\n\n    Examples:\n        &gt;&gt;&gt; format_number(0.123456789)\n        \"0.12345679\"\n\n        &gt;&gt;&gt; format_number(123456789)\n        \"123456789\"\n    \"\"\"\n\n    return f\"{value:.8g}\"\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.generate_uid","title":"<code>generate_uid(values)</code>","text":"<p>Generate a 16-character unique identifier from a list of strings</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[str]</code> <p>List of strings to concatenate</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Unique identifier</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; generate_uid([\"hello\", \"world\"])\n\"c4ca4238a0b92382\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def generate_uid(values: list[str]) -&gt; str:\n    \"\"\"\n    Generate a 16-character unique identifier from a list of strings\n\n    Args:\n        values (list[str]): List of strings to concatenate\n\n    Returns:\n        str: Unique identifier\n\n    Examples:\n        &gt;&gt;&gt; generate_uid([\"hello\", \"world\"])\n        \"c4ca4238a0b92382\"\n    \"\"\"\n\n    _value = \"\".join(values)\n    return hashlib.sha256(_value.encode()).hexdigest()[:16]\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.get_random_files","title":"<code>get_random_files(directory, file_extension, count)</code>","text":"<p>Get random files from a directory with a specific file extension and count</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory path</p> required <code>file_extension</code> <code>str</code> <p>File extension</p> required <code>count</code> <code>int</code> <p>Number of files to select</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of file paths</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Not enough files in directory if count exceeds number of files</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_random_files(\"json\", \".json\", 1)\n[\"json/file.json\"]\n</code></pre> <pre><code>&gt;&gt;&gt; get_random_files(\"json\", \".json\", 2)\n[\"json/file1.json\", \"json/file2.json\"]\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def get_random_files(directory: str, file_extension: str, count: int) -&gt; list[str]:\n    \"\"\"\n    Get random files from a directory with a specific file extension and count\n\n    Args:\n        directory (str): Directory path\n        file_extension (str): File extension\n        count (int): Number of files to select\n\n    Returns:\n        list[str]: List of file paths\n\n    Raises:\n        ValueError: Not enough files in directory if count exceeds number of files\n\n    Examples:\n        &gt;&gt;&gt; get_random_files(\"json\", \".json\", 1)\n        [\"json/file.json\"]\n\n        &gt;&gt;&gt; get_random_files(\"json\", \".json\", 2)\n        [\"json/file1.json\", \"json/file2.json\"]\n    \"\"\"\n\n    _files = [file for file in os.listdir(directory) if file.endswith(file_extension)]\n\n    if len(_files) &lt; count:\n        raise ValueError(\"Not enough files in directory\")\n\n    selected_files = random.sample(_files, count)\n    file_paths = [os.path.join(directory, file) for file in selected_files]\n\n    LOGGER.info(f\"Selected files: {file_paths}\")\n\n    return file_paths, [x.split(\".\")[0] for x in selected_files]\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.get_random_names","title":"<code>get_random_names(directory, count, filename='words.txt')</code>","text":"<p>Generate random names from a list of words in a file</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Path to directory containing words file</p> required <code>count</code> <code>int</code> <p>Number of random names to generate</p> required <code>filename</code> <code>str</code> <p>File containing list of words. Default is \"words.txt\"</p> <code>'words.txt'</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of random names</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If count exceeds the number of available words</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_random_names(directory=\"../\", count=1)\n[\"charizard\"]\n</code></pre> <pre><code>&gt;&gt;&gt; get_random_names(directory=\"../\", count=2)\n[\"charizard\", \"pikachu\"]\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def get_random_names(directory: str, count: int, filename: str = \"words.txt\") -&gt; list[str]:\n    \"\"\"\n    Generate random names from a list of words in a file\n\n    Args:\n        directory: Path to directory containing words file\n        count: Number of random names to generate\n        filename: File containing list of words. Default is \"words.txt\"\n\n    Returns:\n        List of random names\n\n    Raises:\n        ValueError: If count exceeds the number of available words\n\n    Examples:\n        &gt;&gt;&gt; get_random_names(directory=\"../\", count=1)\n        [\"charizard\"]\n\n        &gt;&gt;&gt; get_random_names(directory=\"../\", count=2)\n        [\"charizard\", \"pikachu\"]\n    \"\"\"\n\n    words_file_path = os.path.join(directory, filename)\n\n    with open(words_file_path) as file:\n        words = file.read().splitlines()\n\n    if count &gt; len(words):\n        raise ValueError(\"count exceeds the number of available words\")\n\n    return random.sample(words, count)\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.get_sanitized_name","title":"<code>get_sanitized_name(name, replace_with='-')</code>","text":"<p>Sanitize a name by removing special characters, preserving \"-\" and \"_\", and replacing spaces with a specified character. Ensures no consecutive replacement characters in the result.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to sanitize</p> required <code>replace_with</code> <code>str</code> <p>Character to replace spaces with (default is '-')</p> <code>'-'</code> <p>Returns:</p> Type Description <code>str</code> <p>Sanitized name</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_sanitized_name(\"wheel1 &lt;3&gt;\", '-')\n\"wheel1-3\"\n&gt;&gt;&gt; get_sanitized_name(\"Hello  World!\", '_')\n\"Hello_World\"\n&gt;&gt;&gt; get_sanitized_name(\"my--robot!!\", '-')\n\"my-robot\"\n&gt;&gt;&gt; get_sanitized_name(\"bad__name__\", '_')\n\"bad_name\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def get_sanitized_name(name: str, replace_with: str = \"-\") -&gt; str:\n    \"\"\"\n    Sanitize a name by removing special characters, preserving \"-\" and \"_\", and\n    replacing spaces with a specified character. Ensures no consecutive replacement\n    characters in the result.\n\n    Args:\n        name: Name to sanitize\n        replace_with: Character to replace spaces with (default is '-')\n\n    Returns:\n        Sanitized name\n\n    Examples:\n        &gt;&gt;&gt; get_sanitized_name(\"wheel1 &lt;3&gt;\", '-')\n        \"wheel1-3\"\n        &gt;&gt;&gt; get_sanitized_name(\"Hello  World!\", '_')\n        \"Hello_World\"\n        &gt;&gt;&gt; get_sanitized_name(\"my--robot!!\", '-')\n        \"my-robot\"\n        &gt;&gt;&gt; get_sanitized_name(\"bad__name__\", '_')\n        \"bad_name\"\n    \"\"\"\n\n    if replace_with not in \"-_\":\n        raise ValueError(\"replace_with must be either '-' or '_'\")\n\n    sanitized_name = \"\".join(char if char.isalnum() or char in \"-_ \" else \"\" for char in name)\n    sanitized_name = sanitized_name.replace(\" \", replace_with)\n    sanitized_name = re.sub(f\"{re.escape(replace_with)}{{2,}}\", replace_with, sanitized_name)\n\n    return sanitized_name\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.make_unique_keys","title":"<code>make_unique_keys(keys)</code>","text":"<p>Make a list of keys unique by appending a number to duplicate keys and return a mapping of unique keys to their original indices.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[str]</code> <p>List of keys.</p> required <p>Returns:</p> Type Description <code>dict[str, int]</code> <p>A dictionary mapping unique keys to their original indices.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; make_unique_keys([\"a\", \"b\", \"a\", \"a\"])\n{\"a\": 0, \"b\": 1, \"a-1\": 2, \"a-2\": 3}\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def make_unique_keys(keys: list[str]) -&gt; dict[str, int]:\n    \"\"\"\n    Make a list of keys unique by appending a number to duplicate keys and\n    return a mapping of unique keys to their original indices.\n\n    Args:\n        keys: List of keys.\n\n    Returns:\n        A dictionary mapping unique keys to their original indices.\n\n    Examples:\n        &gt;&gt;&gt; make_unique_keys([\"a\", \"b\", \"a\", \"a\"])\n        {\"a\": 0, \"b\": 1, \"a-1\": 2, \"a-2\": 3}\n    \"\"\"\n    unique_key_map = {}\n    key_count = {}\n\n    for index, key in enumerate(keys):\n        if key in key_count:\n            key_count[key] += 1\n            unique_key = f\"{key}-{key_count[key]}\"\n        else:\n            key_count[key] = 0\n            unique_key = key\n\n        unique_key_map[unique_key] = index\n\n    return unique_key_map\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.make_unique_name","title":"<code>make_unique_name(name, existing_names)</code>","text":"<p>Make a name unique by appending a number to the name if it already exists in a set.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to make unique.</p> required <code>existing_names</code> <code>set[str]</code> <p>Set of existing names.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A unique name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; make_unique_name(\"name\", {\"name\"})\n\"name-1\"\n&gt;&gt;&gt; make_unique_name(\"name\", {\"name\", \"name-1\"})\n\"name-2\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def make_unique_name(name: str, existing_names: set[str]) -&gt; str:\n    \"\"\"\n    Make a name unique by appending a number to the name if it already exists in a set.\n\n    Args:\n        name: Name to make unique.\n        existing_names: Set of existing names.\n\n    Returns:\n        A unique name.\n\n    Examples:\n        &gt;&gt;&gt; make_unique_name(\"name\", {\"name\"})\n        \"name-1\"\n        &gt;&gt;&gt; make_unique_name(\"name\", {\"name\", \"name-1\"})\n        \"name-2\"\n    \"\"\"\n    if name not in existing_names:\n        return name\n\n    count = 1\n    while f\"{name}-{count}\" in existing_names:\n        count += 1\n\n    return f\"{name}-{count}\"\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.print_dict","title":"<code>print_dict(d, indent=0)</code>","text":"<p>Print a dictionary with indentation for nested dictionaries</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>dict</code> <p>Dictionary to print</p> required <code>indent</code> <code>int</code> <p>Number of tabs to indent</p> <code>0</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print_dict({\"a\": 1, \"b\": {\"c\": 2}})\na\n    1\nb\n    c\n        2\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def print_dict(d: dict, indent=0) -&gt; None:\n    \"\"\"\n    Print a dictionary with indentation for nested dictionaries\n\n    Args:\n        d (dict): Dictionary to print\n        indent (int): Number of tabs to indent\n\n    Returns:\n        None\n\n    Examples:\n        &gt;&gt;&gt; print_dict({\"a\": 1, \"b\": {\"c\": 2}})\n        a\n            1\n        b\n            c\n                2\n    \"\"\"\n\n    for key, value in d.items():\n        print()\n        print(\"\\t\" * indent + str(key))\n        if isinstance(value, dict):\n            print_dict(value, indent + 1)\n        else:\n            print(\"\\t\" * (indent + 1) + str(value))\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.save_model_as_json","title":"<code>save_model_as_json(model, file_path, indent=4)</code>","text":"<p>Save a Pydantic model as a JSON file</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BaseModel</code> <p>Pydantic model to save</p> required <code>file_path</code> <code>str</code> <p>File path to save JSON file</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; class TestModel(BaseModel):\n...     a: int\n...     b: str\n...\n&gt;&gt;&gt; save_model_as_json(TestModel(a=1, b=\"hello\"), \"test.json\")\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def save_model_as_json(model: BaseModel, file_path: str, indent: int = 4) -&gt; None:\n    \"\"\"\n    Save a Pydantic model as a JSON file\n\n    Args:\n        model (BaseModel): Pydantic model to save\n        file_path (str): File path to save JSON file\n\n    Returns:\n        None\n\n    Examples:\n        &gt;&gt;&gt; class TestModel(BaseModel):\n        ...     a: int\n        ...     b: str\n        ...\n        &gt;&gt;&gt; save_model_as_json(TestModel(a=1, b=\"hello\"), \"test.json\")\n    \"\"\"\n\n    with open(file_path, \"w\") as file:\n        json.dump(model.model_dump(), file, indent=indent, cls=CustomJSONEncoder)\n</code></pre>"},{"location":"api/utilities/#onshape_robotics_toolkit.utilities.xml_escape","title":"<code>xml_escape(unescaped)</code>","text":"<p>Escape XML characters in a string</p> <p>Parameters:</p> Name Type Description Default <code>unescaped</code> <code>str</code> <p>Unescaped string</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Escaped string</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml_escape(\"hello 'world' \"world\"\")\n\"hello &amp;apos;world&amp;apos; &amp;quot;world&amp;quot;\"\n</code></pre> <pre><code>&gt;&gt;&gt; xml_escape(\"hello &lt;world&gt;\")\n\"hello &amp;lt;world&amp;gt;\"\n</code></pre> Source code in <code>onshape_robotics_toolkit\\utilities\\helpers.py</code> <pre><code>def xml_escape(unescaped: str) -&gt; str:\n    \"\"\"\n    Escape XML characters in a string\n\n    Args:\n        unescaped (str): Unescaped string\n\n    Returns:\n        str: Escaped string\n\n    Examples:\n        &gt;&gt;&gt; xml_escape(\"hello 'world' \\\"world\\\"\")\n        \"hello &amp;apos;world&amp;apos; &amp;quot;world&amp;quot;\"\n\n        &gt;&gt;&gt; xml_escape(\"hello &lt;world&gt;\")\n        \"hello &amp;lt;world&amp;gt;\"\n    \"\"\"\n\n    return escape(unescaped, entities={\"'\": \"&amp;apos;\", '\"': \"&amp;quot;\"})\n</code></pre>"},{"location":"api/variable/","title":"Variable","text":"<p>This module defines data models for variables used in Onshape documents retrieved from Onshape REST API responses.</p> <p>The data models are implemented as Pydantic BaseModel classes, which are used to</p> <pre><code>1. Parse JSON responses from the API into Python objects.\n2. Validate the structure and types of the JSON responses.\n3. Provide type hints for better code clarity and autocompletion.\n</code></pre> <p>These models ensure that the data received from the API adheres to the expected format and types, facilitating easier and safer manipulation of the data within the application.</p> Models <ul> <li>Variable: Represents a variable used in Onshape's Variable Studio.</li> </ul> Enum <ul> <li>VARIABLE_TYPE: Enumerates the possible variable types in Onshape (LENGTH, ANGLE, NUMBER, ANY).</li> </ul>"},{"location":"api/variable/#onshape_robotics_toolkit.models.variable.VARIABLE_TYPE","title":"<code>VARIABLE_TYPE</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the possible variable types in Onshape</p> <p>Attributes:</p> Name Type Description <code>LENGTH</code> <code>str</code> <p>Length variable type</p> <code>ANGLE</code> <code>str</code> <p>Angle variable type</p> <code>NUMBER</code> <code>str</code> <p>Number variable type</p> <code>ANY</code> <code>str</code> <p>Any variable type</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; VARIABLE_TYPE.LENGTH\n'LENGTH'\n&gt;&gt;&gt; VARIABLE_TYPE.ANGLE\n'ANGLE'\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\variable.py</code> <pre><code>class VARIABLE_TYPE(str, Enum):\n    \"\"\"\n    Enumerates the possible variable types in Onshape\n\n    Attributes:\n        LENGTH (str): Length variable type\n        ANGLE (str): Angle variable type\n        NUMBER (str): Number variable type\n        ANY (str): Any variable type\n\n    Examples:\n        &gt;&gt;&gt; VARIABLE_TYPE.LENGTH\n        'LENGTH'\n        &gt;&gt;&gt; VARIABLE_TYPE.ANGLE\n        'ANGLE'\n    \"\"\"\n\n    LENGTH = \"LENGTH\"\n    ANGLE = \"ANGLE\"\n    NUMBER = \"NUMBER\"\n    ANY = \"ANY\"\n</code></pre>"},{"location":"api/variable/#onshape_robotics_toolkit.models.variable.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a variable used in Onshape's Variable Studio.</p> JSON <pre><code>    {\n        \"type\": \"ANGLE\",\n        \"name\": \"forkAngle\",\n        \"value\": null,\n        \"description\": \"Fork angle for front wheel assembly in deg\",\n        \"expression\": \"15 deg\"\n    }\n</code></pre> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the variable (LENGTH, ANGLE, NUMBER, ANY).</p> <code>name</code> <code>str</code> <p>The name of the variable.</p> <code>value</code> <code>str</code> <p>The value of the variable.</p> <code>description</code> <code>str</code> <p>The description of the variable.</p> <code>expression</code> <code>str</code> <p>The expression of the variable.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; variable = Variable(\n...     type=\"ANGLE\",\n...     name=\"forkAngle\",\n...     value=None,\n...     description=\"Fork angle for front wheel assembly in deg\",\n...     expression=\"15 deg\"\n... )\n&gt;&gt;&gt; variable\nVariable(\n    type='ANGLE',\n    name='forkAngle',\n    value=None,\n    description='Fork angle for front wheel assembly in deg',\n    expression='15 deg'\n)\n</code></pre> Source code in <code>onshape_robotics_toolkit\\models\\variable.py</code> <pre><code>class Variable(BaseModel):\n    \"\"\"\n    Represents a variable used in Onshape's Variable Studio.\n\n    JSON:\n        ```json\n            {\n                \"type\": \"ANGLE\",\n                \"name\": \"forkAngle\",\n                \"value\": null,\n                \"description\": \"Fork angle for front wheel assembly in deg\",\n                \"expression\": \"15 deg\"\n            }\n        ```\n\n    Attributes:\n        type (str): The type of the variable (LENGTH, ANGLE, NUMBER, ANY).\n        name (str): The name of the variable.\n        value (str, optional): The value of the variable.\n        description (str, optional): The description of the variable.\n        expression (str, optional): The expression of the variable.\n\n    Examples:\n        &gt;&gt;&gt; variable = Variable(\n        ...     type=\"ANGLE\",\n        ...     name=\"forkAngle\",\n        ...     value=None,\n        ...     description=\"Fork angle for front wheel assembly in deg\",\n        ...     expression=\"15 deg\"\n        ... )\n        &gt;&gt;&gt; variable\n        Variable(\n            type='ANGLE',\n            name='forkAngle',\n            value=None,\n            description='Fork angle for front wheel assembly in deg',\n            expression='15 deg'\n        )\n    \"\"\"\n\n    type: str = Field(..., description=\"The type of the variable (LENGTH, ANGLE, NUMBER, ANY)\")\n    name: str = Field(..., description=\"The name of the variable\")\n    value: Union[str, None] = Field(None, description=\"The value of the variable\")\n    description: str = Field(None, description=\"The description of the variable\")\n    expression: str = Field(None, description=\"The expression of the variable\")\n\n    @field_validator(\"name\")\n    def validate_name(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the variable name to ensure it is not empty.\n\n        Args:\n            value (str): The variable name to validate.\n\n        Returns:\n            str: The validated variable name.\n\n        Raises:\n            ValueError: If the variable name is empty.\n        \"\"\"\n        if not value:\n            raise ValueError(\"Variable name cannot be empty\")\n\n        return value\n\n    @field_validator(\"type\")\n    def validate_type(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the variable type to ensure it is one of the valid types.\n\n        Args:\n            value (str): The variable type to validate.\n\n        Returns:\n            str: The validated variable type.\n\n        Raises:\n            ValueError: If the variable type is not one of the valid types.\n        \"\"\"\n        if value not in VARIABLE_TYPE.__members__.values():\n            raise ValueError(f\"Invalid variable type: {value}\")\n\n        return value\n\n    @field_validator(\"expression\")\n    def validate_expression(cls, value: str) -&gt; str:\n        \"\"\"\n        Validate the variable expression to ensure it is not empty and in the correct format.\n\n        Args:\n            value (str): The variable expression to validate.\n\n        Returns:\n            str: The validated variable expression.\n\n        Raises:\n            ValueError: If the variable expression is empty or not in the correct format.\n        \"\"\"\n        if not value:\n            raise ValueError(\"Variable expression cannot be empty\")\n\n        # ensure that there is a space between the value and the unit\n        if not value.split(\" \")[1]:\n            raise ValueError(\"Invalid expression format, must be in the form of 'value unit' e.g. '15 deg'\")\n\n        return value\n</code></pre>"},{"location":"api/variable/#onshape_robotics_toolkit.models.variable.Variable.validate_expression","title":"<code>validate_expression(value)</code>","text":"<p>Validate the variable expression to ensure it is not empty and in the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The variable expression to validate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated variable expression.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the variable expression is empty or not in the correct format.</p> Source code in <code>onshape_robotics_toolkit\\models\\variable.py</code> <pre><code>@field_validator(\"expression\")\ndef validate_expression(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the variable expression to ensure it is not empty and in the correct format.\n\n    Args:\n        value (str): The variable expression to validate.\n\n    Returns:\n        str: The validated variable expression.\n\n    Raises:\n        ValueError: If the variable expression is empty or not in the correct format.\n    \"\"\"\n    if not value:\n        raise ValueError(\"Variable expression cannot be empty\")\n\n    # ensure that there is a space between the value and the unit\n    if not value.split(\" \")[1]:\n        raise ValueError(\"Invalid expression format, must be in the form of 'value unit' e.g. '15 deg'\")\n\n    return value\n</code></pre>"},{"location":"api/variable/#onshape_robotics_toolkit.models.variable.Variable.validate_name","title":"<code>validate_name(value)</code>","text":"<p>Validate the variable name to ensure it is not empty.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The variable name to validate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated variable name.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the variable name is empty.</p> Source code in <code>onshape_robotics_toolkit\\models\\variable.py</code> <pre><code>@field_validator(\"name\")\ndef validate_name(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the variable name to ensure it is not empty.\n\n    Args:\n        value (str): The variable name to validate.\n\n    Returns:\n        str: The validated variable name.\n\n    Raises:\n        ValueError: If the variable name is empty.\n    \"\"\"\n    if not value:\n        raise ValueError(\"Variable name cannot be empty\")\n\n    return value\n</code></pre>"},{"location":"api/variable/#onshape_robotics_toolkit.models.variable.Variable.validate_type","title":"<code>validate_type(value)</code>","text":"<p>Validate the variable type to ensure it is one of the valid types.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The variable type to validate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The validated variable type.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the variable type is not one of the valid types.</p> Source code in <code>onshape_robotics_toolkit\\models\\variable.py</code> <pre><code>@field_validator(\"type\")\ndef validate_type(cls, value: str) -&gt; str:\n    \"\"\"\n    Validate the variable type to ensure it is one of the valid types.\n\n    Args:\n        value (str): The variable type to validate.\n\n    Returns:\n        str: The validated variable type.\n\n    Raises:\n        ValueError: If the variable type is not one of the valid types.\n    \"\"\"\n    if value not in VARIABLE_TYPE.__members__.values():\n        raise ValueError(f\"Invalid variable type: {value}\")\n\n    return value\n</code></pre>"},{"location":"tutorials/edit/","title":"Editing a CAD assembly","text":"<p>In this tutorial, we\u2019ll explore how to edit an Onshape CAD assembly by modifying its variables in the Variable Studio and exporting the resulting assembly to a URDF file using the <code>onshape-robotics-toolkit</code> Python library.</p> <p></p>"},{"location":"tutorials/edit/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Installed the <code>onshape-robotics-toolkit</code> library:   <pre><code>pip install onshape-robotics-toolkit\n</code></pre></li> <li>API Keys: Set up your Onshape API keys in a <code>.env</code> file as outlined in the Getting Started guide.</li> <li>Access to the Onshape Document: Use a CAD document with a Variable Studio. For this tutorial, we\u2019ll use the following example:   Example CAD Document.</li> </ul>"},{"location":"tutorials/edit/#step-by-step-workflow","title":"Step-by-Step Workflow","text":""},{"location":"tutorials/edit/#step-1-initialize-the-onshape-client","title":"Step 1: Initialize the Onshape Client","text":"<p>Set up the Onshape API client for authentication and interaction:</p> <pre><code>import onshape_robotics_toolkit as osa\n\n# Initialize the client\nclient = osa.Client(\n    env=\"./.env\"\n)\n</code></pre>"},{"location":"tutorials/edit/#step-2-access-the-cad-document-and-variables","title":"Step 2: Access the CAD Document and Variables","text":"<p>Use the CAD document URL to create a <code>Document</code> object and fetch its variables:</p> <pre><code>doc = osa.Document.from_url(\n    url=\"https://cad.onshape.com/documents/a1c1addf75444f54b504f25c/w/0d17b8ebb2a4c76be9fff3c7/e/a86aaf34d2f4353288df8812\"\n)\n\n# Retrieve the Variable Studio element\nelements = client.get_elements(doc.did, doc.wtype, doc.wid)\nvariables = client.get_variables(doc.did, doc.wid, elements[\"variables\"].id)\n</code></pre>"},{"location":"tutorials/edit/#step-3-modify-variables-in-the-variable-studio","title":"Step 3: Modify Variables in the Variable Studio","text":"<p>Edit the variables to adjust the CAD assembly dimensions. For example, modify the wheel diameter, wheel thickness, and fork angle:</p> <pre><code>variables[\"wheelDiameter\"].expression = \"300 mm\"\nvariables[\"wheelThickness\"].expression = \"71 mm\"\nvariables[\"forkAngle\"].expression = \"20 deg\"\n\n# Save the updated variables back to the Variable Studio\nclient.set_variables(doc.did, doc.wid, elements[\"variables\"].id, variables)\n</code></pre>"},{"location":"tutorials/edit/#step-4-retrieve-and-parse-the-assembly","title":"Step 4: Retrieve and Parse the Assembly","text":"<p>Fetch the assembly data and parse its components:</p> <pre><code>from onshape_robotics_toolkit.parse import (\n    get_instances,\n    get_mates_and_relations,\n    get_occurrences,\n    get_parts,\n    get_subassemblies,\n)\n\n# Retrieve the assembly\nassembly = client.get_assembly(doc.did, doc.wtype, doc.wid, elements[\"assembly\"].id)\n\n# Extract components\ninstances, occurrences, id_to_name_map = get_instances(assemblymax_depth=1)\n\nsubassemblies, rigid_subassemblies = get_subassemblies(assembly, client, instances)\nparts = get_parts(assembly, rigid_subassemblies, client, instances)\n\nmates, relations = get_mates_and_relations(assembly, subassemblies, rigid_subassemblies, id_to_name_map, parts)\n</code></pre>"},{"location":"tutorials/edit/#step-5-visualize-the-assembly-graph","title":"Step 5: Visualize the Assembly Graph","text":"<p>Generate a graph visualization of the assembly structure:</p> <pre><code>from onshape_robotics_toolkit.graph import create_graph\nfrom onshape_robotics_toolkit.urdf import get_robot\nfrom onshape_robotics_toolkit.models.robot import Robot\n\n# Create and save the assembly graph\ngraph, root_node = create_graph(occurrences=occurrences, instances=instances, parts=parts, mates=mates)\n\nrobot = get_robot(assembly, graph, root_node, parts, mates, relations, client, \"test\")\nrobot.show_graph(\"bike.png\")\n</code></pre> <p></p> <p>This will save an image of the assembly graph (<code>bike.png</code>) in your current working directory.</p>"},{"location":"tutorials/edit/#step-6-export-the-assembly-to-a-urdf-file","title":"Step 6: Export the Assembly to a URDF File","text":"<p>Convert the robot class into a URDF file for robotics applications:</p> <pre><code>robot.save(\"bike.urdf\")\n</code></pre> <p></p>"},{"location":"tutorials/edit/#result","title":"Result","text":"<p>After completing the steps, you will have:</p> <ol> <li>A visualization of the updated assembly graph saved as <code>bike.png</code>.</li> <li>A URDF file (<code>bike.urdf</code>) representing the edited assembly.</li> </ol> <p>The URDF file can now be used in robotics simulators like Gazebo or integrated into ROS-based projects.</p>"},{"location":"tutorials/export/","title":"Exporting an Onshape Assembly to URDF","text":"<p>This tutorial demonstrates a streamlined workflow for converting an Onshape assembly to a URDF file using the <code>onshape-robotics-toolkit</code> library. Follow these steps to easily generate a URDF file and visualize your assembly's structure.</p> <p></p>"},{"location":"tutorials/export/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following:</p> <ul> <li>Install the library: You have the <code>onshape-robotics-toolkit</code> library installed.   <pre><code>pip install onshape-robotics-toolkit\n</code></pre></li> <li>API Keys: Set up your Onshape API keys in a <code>.env</code> file. Refer to the Getting Started guide if needed.</li> <li>Document URL: Have the URL of the Onshape assembly you want to export. For this example, we\u2019ll use a quadruped robot assembly.</li> </ul>"},{"location":"tutorials/export/#workflow-onshape-assembly-to-json-and-graph-visualization","title":"Workflow: Onshape Assembly to JSON and Graph Visualization","text":""},{"location":"tutorials/export/#step-1-set-up-logging-and-initialize-the-client","title":"Step 1: Set Up Logging and Initialize the Client","text":"<p>Start by configuring the logger and initializing the Onshape API client:</p> <pre><code>from onshape_robotics_toolkit.connect import Client\nfrom onshape_robotics_toolkit.log import LOGGER, LogLevel\n\nLOGGER.set_file_name(\"quadruped.log\")\nLOGGER.set_stream_level(LogLevel.INFO)\n\nclient = Client(env=\"./.env\")\n</code></pre> <p>The logger will save logs to <code>quadruped.log</code> and display logs at the <code>INFO</code> level in the console.</p>"},{"location":"tutorials/export/#step-2-load-the-onshape-assembly","title":"Step 2: Load the Onshape Assembly","text":"<p>Use the <code>Robot</code> class to load the assembly directly from its Onshape document URL:</p> <pre><code>from onshape_robotics_toolkit.robot import Robot\n\nrobot = Robot.from_url(\n    name=\"quadruped\",\n    url=\"https://cad.onshape.com/documents/cf6b852d2c88d661ac2e17e8/w/c842455c29cc878dc48bdc68/e/b5e293d409dd0b88596181ef\",\n    client=client,\n    max_depth=0,\n    use_user_defined_root=False,\n)\n</code></pre> <p>This will create a <code>Robot</code> object named \"quadruped\" from the specified Onshape document URL. The <code>max_depth</code> parameter controls the level of subassemblies to include, and <code>use_user_defined_root</code> specifies whether to use a user-defined root for the assembly.</p>"},{"location":"tutorials/export/#step-3-save-the-assembly-as-json","title":"Step 3: Save the Assembly as JSON","text":"<p>Export the assembly data to a JSON file for easy analysis or integration with other tools:</p> <pre><code>from onshape_robotics_toolkit.utilities.helpers import save_model_as_json\n\nsave_model_as_json(robot.assembly, \"quadruped.json\")\n</code></pre> <p>This will save the assembly details into a file named <code>quadruped.json</code> in the current working directory.</p>"},{"location":"tutorials/export/#step-4-visualize-the-assembly-graph","title":"Step 4: Visualize the Assembly Graph","text":"<p>Generate and save a graphical representation of the assembly\u2019s structure:</p> <pre><code>robot.show_graph(file_name=\"quadruped.png\")\n</code></pre> <p>This will create a PNG file named <code>quadruped.png</code> showing the hierarchical structure of the assembly.</p>"},{"location":"tutorials/export/#step-5-save-the-robot-object-as-a-urdf-file","title":"Step 5: Save the Robot Object as a URDF File","text":"<p>If you plan to use the robot in a simulation environment, you can save the robot object as a URDF file:</p> <pre><code>robot.save()\n</code></pre> <p>This saves the robot object to disk as a URDF file named <code>quadruped.robot</code>.</p>"},{"location":"tutorials/export/#result","title":"Result","text":"<p>After running the script, you\u2019ll find the following files in your working directory:</p> <ol> <li>Assembly JSON File (<code>quadruped.json</code>): Contains the complete assembly details.</li> <li>Assembly Graph (<code>quadruped.png</code>): A visual representation of the assembly\u2019s structure.</li> <li>Robot URDF File (<code>quadruped.urdf</code>): A URDF file for simulation.</li> </ol> <p>These files can be used for further analysis, simulation, or into other workflows.</p>"}]}